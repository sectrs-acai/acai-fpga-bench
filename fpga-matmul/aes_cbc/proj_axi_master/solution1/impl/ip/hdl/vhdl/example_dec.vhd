-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    crypto_buff_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    crypto_buff_ce0 : OUT STD_LOGIC;
    crypto_buff_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    pt_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    pt_ce0 : OUT STD_LOGIC;
    pt_we0 : OUT STD_LOGIC;
    pt_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of example_dec is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "01110000011011110110111001101101011011000110101101101010011010010110100001100111011001100110010101100100011000110110001001100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal key_r_reg_407 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal IV_reg_412 : STD_LOGIC_VECTOR (127 downto 0);
    signal e_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal end_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_done : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_idle : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_ready : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_write : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_write : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_crypto_buff_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_crypto_buff_ce0 : STD_LOGIC;
    signal grp_updateKey_1_fu_202_ap_start : STD_LOGIC;
    signal grp_updateKey_1_fu_202_ap_done : STD_LOGIC;
    signal grp_updateKey_1_fu_202_ap_idle : STD_LOGIC;
    signal grp_updateKey_1_fu_202_ap_ready : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_0_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_1_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_2_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_3 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_3_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_4 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_4_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_5 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_5_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_6 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_6_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_7 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_7_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_8 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_8_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_9 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_9_ap_vld : STD_LOGIC;
    signal grp_updateKey_1_fu_202_this_1_10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_1_fu_202_this_1_10_ap_vld : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_done : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_idle : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_ready : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_endCiphertextStrm_read : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_ciphertextStrm_read : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_write : STD_LOGIC;
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_write : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_idle : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_ready : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_endPlaintextStrm_read : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_plaintextStrm_read : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_ce0 : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_we0 : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ciphertextStrm_full_n : STD_LOGIC;
    signal ciphertextStrm_write : STD_LOGIC;
    signal endCiphertextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_full_n : STD_LOGIC;
    signal endCiphertextStrm_write : STD_LOGIC;
    signal grp_updateKey_1_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal cipherkeyStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal cipherkeyStrm_empty_n : STD_LOGIC;
    signal cipherkeyStrm_read : STD_LOGIC;
    signal IVStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal IVStrm_empty_n : STD_LOGIC;
    signal IVStrm_read : STD_LOGIC;
    signal endCiphertextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_empty_n : STD_LOGIC;
    signal endCiphertextStrm_read : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state5_ignore_call40 : BOOLEAN;
    signal decipher_key_list_V_fu_102 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal decipher_key_list_V_1_fu_106 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_2_fu_110 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_3_fu_114 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_4_fu_118 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_5_fu_122 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_6_fu_126 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_7_fu_130 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_8_fu_134 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_9_fu_138 : STD_LOGIC_VECTOR (127 downto 0);
    signal decipher_key_list_V_10_fu_142 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ciphertextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal ciphertextStrm_empty_n : STD_LOGIC;
    signal ciphertextStrm_read : STD_LOGIC;
    signal plaintextStrm_full_n : STD_LOGIC;
    signal plaintextStrm_write : STD_LOGIC;
    signal endPlaintextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_full_n : STD_LOGIC;
    signal endPlaintextStrm_write : STD_LOGIC;
    signal grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal plaintextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal plaintextStrm_empty_n : STD_LOGIC;
    signal plaintextStrm_read : STD_LOGIC;
    signal endPlaintextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_empty_n : STD_LOGIC;
    signal endPlaintextStrm_read : STD_LOGIC;
    signal cipherkeyStrm_full_n : STD_LOGIC;
    signal cipherkeyStrm_write : STD_LOGIC;
    signal IVStrm_full_n : STD_LOGIC;
    signal IVStrm_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component example_dec_Pipeline_VITIS_LOOP_118_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertextStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        ciphertextStrm_full_n : IN STD_LOGIC;
        ciphertextStrm_write : OUT STD_LOGIC;
        endCiphertextStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endCiphertextStrm_full_n : IN STD_LOGIC;
        endCiphertextStrm_write : OUT STD_LOGIC;
        crypto_buff_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        crypto_buff_ce0 : OUT STD_LOGIC;
        crypto_buff_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_updateKey_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_1_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_0_ap_vld : OUT STD_LOGIC;
        this_1_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_1_ap_vld : OUT STD_LOGIC;
        this_1_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_2_ap_vld : OUT STD_LOGIC;
        this_1_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_3_ap_vld : OUT STD_LOGIC;
        this_1_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_4_ap_vld : OUT STD_LOGIC;
        this_1_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_5_ap_vld : OUT STD_LOGIC;
        this_1_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_6_ap_vld : OUT STD_LOGIC;
        this_1_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_7_ap_vld : OUT STD_LOGIC;
        this_1_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_8_ap_vld : OUT STD_LOGIC;
        this_1_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_9_ap_vld : OUT STD_LOGIC;
        this_1_10 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_10_ap_vld : OUT STD_LOGIC;
        cipherkey : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_dec_Pipeline_decryption_cbc_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        endCiphertextStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endCiphertextStrm_empty_n : IN STD_LOGIC;
        endCiphertextStrm_read : OUT STD_LOGIC;
        ciphertextStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        ciphertextStrm_empty_n : IN STD_LOGIC;
        ciphertextStrm_read : OUT STD_LOGIC;
        plaintextStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        plaintextStrm_full_n : IN STD_LOGIC;
        plaintextStrm_write : OUT STD_LOGIC;
        endPlaintextStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endPlaintextStrm_full_n : IN STD_LOGIC;
        endPlaintextStrm_write : OUT STD_LOGIC;
        IV : IN STD_LOGIC_VECTOR (127 downto 0);
        e : IN STD_LOGIC_VECTOR (0 downto 0);
        rhs_V : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_9_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_8_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_7_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_6_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_5_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_4_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_3_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_2_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_1_load : IN STD_LOGIC_VECTOR (127 downto 0);
        decipher_key_list_V_load : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_dec_Pipeline_VITIS_LOOP_129_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        endPlaintextStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endPlaintextStrm_empty_n : IN STD_LOGIC;
        endPlaintextStrm_read : OUT STD_LOGIC;
        plaintextStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        plaintextStrm_empty_n : IN STD_LOGIC;
        plaintextStrm_read : OUT STD_LOGIC;
        end_r : IN STD_LOGIC_VECTOR (0 downto 0);
        pt_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        pt_ce0 : OUT STD_LOGIC;
        pt_we0 : OUT STD_LOGIC;
        pt_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_fifo_w128_d256_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component example_fifo_w1_d256_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component example_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194 : component example_dec_Pipeline_VITIS_LOOP_118_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start,
        ap_done => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_done,
        ap_idle => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_idle,
        ap_ready => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_ready,
        ciphertextStrm_din => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_din,
        ciphertextStrm_full_n => ciphertextStrm_full_n,
        ciphertextStrm_write => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_write,
        endCiphertextStrm_din => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_din,
        endCiphertextStrm_full_n => endCiphertextStrm_full_n,
        endCiphertextStrm_write => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_write,
        crypto_buff_address0 => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_crypto_buff_address0,
        crypto_buff_ce0 => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_crypto_buff_ce0,
        crypto_buff_q0 => crypto_buff_q0);

    grp_updateKey_1_fu_202 : component example_updateKey_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateKey_1_fu_202_ap_start,
        ap_done => grp_updateKey_1_fu_202_ap_done,
        ap_idle => grp_updateKey_1_fu_202_ap_idle,
        ap_ready => grp_updateKey_1_fu_202_ap_ready,
        this_1_0 => grp_updateKey_1_fu_202_this_1_0,
        this_1_0_ap_vld => grp_updateKey_1_fu_202_this_1_0_ap_vld,
        this_1_1 => grp_updateKey_1_fu_202_this_1_1,
        this_1_1_ap_vld => grp_updateKey_1_fu_202_this_1_1_ap_vld,
        this_1_2 => grp_updateKey_1_fu_202_this_1_2,
        this_1_2_ap_vld => grp_updateKey_1_fu_202_this_1_2_ap_vld,
        this_1_3 => grp_updateKey_1_fu_202_this_1_3,
        this_1_3_ap_vld => grp_updateKey_1_fu_202_this_1_3_ap_vld,
        this_1_4 => grp_updateKey_1_fu_202_this_1_4,
        this_1_4_ap_vld => grp_updateKey_1_fu_202_this_1_4_ap_vld,
        this_1_5 => grp_updateKey_1_fu_202_this_1_5,
        this_1_5_ap_vld => grp_updateKey_1_fu_202_this_1_5_ap_vld,
        this_1_6 => grp_updateKey_1_fu_202_this_1_6,
        this_1_6_ap_vld => grp_updateKey_1_fu_202_this_1_6_ap_vld,
        this_1_7 => grp_updateKey_1_fu_202_this_1_7,
        this_1_7_ap_vld => grp_updateKey_1_fu_202_this_1_7_ap_vld,
        this_1_8 => grp_updateKey_1_fu_202_this_1_8,
        this_1_8_ap_vld => grp_updateKey_1_fu_202_this_1_8_ap_vld,
        this_1_9 => grp_updateKey_1_fu_202_this_1_9,
        this_1_9_ap_vld => grp_updateKey_1_fu_202_this_1_9_ap_vld,
        this_1_10 => grp_updateKey_1_fu_202_this_1_10,
        this_1_10_ap_vld => grp_updateKey_1_fu_202_this_1_10_ap_vld,
        cipherkey => key_r_reg_407);

    grp_dec_Pipeline_decryption_cbc_loop_fu_223 : component example_dec_Pipeline_decryption_cbc_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start,
        ap_done => grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_done,
        ap_idle => grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_idle,
        ap_ready => grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_ready,
        endCiphertextStrm_dout => endCiphertextStrm_dout,
        endCiphertextStrm_empty_n => endCiphertextStrm_empty_n,
        endCiphertextStrm_read => grp_dec_Pipeline_decryption_cbc_loop_fu_223_endCiphertextStrm_read,
        ciphertextStrm_dout => ciphertextStrm_dout,
        ciphertextStrm_empty_n => ciphertextStrm_empty_n,
        ciphertextStrm_read => grp_dec_Pipeline_decryption_cbc_loop_fu_223_ciphertextStrm_read,
        plaintextStrm_din => grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_din,
        plaintextStrm_full_n => plaintextStrm_full_n,
        plaintextStrm_write => grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_write,
        endPlaintextStrm_din => grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_din,
        endPlaintextStrm_full_n => endPlaintextStrm_full_n,
        endPlaintextStrm_write => grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_write,
        IV => IV_reg_412,
        e => e_reg_417,
        rhs_V => decipher_key_list_V_10_fu_142,
        decipher_key_list_V_9_load => decipher_key_list_V_9_fu_138,
        decipher_key_list_V_8_load => decipher_key_list_V_8_fu_134,
        decipher_key_list_V_7_load => decipher_key_list_V_7_fu_130,
        decipher_key_list_V_6_load => decipher_key_list_V_6_fu_126,
        decipher_key_list_V_5_load => decipher_key_list_V_5_fu_122,
        decipher_key_list_V_4_load => decipher_key_list_V_4_fu_118,
        decipher_key_list_V_3_load => decipher_key_list_V_3_fu_114,
        decipher_key_list_V_2_load => decipher_key_list_V_2_fu_110,
        decipher_key_list_V_1_load => decipher_key_list_V_1_fu_106,
        decipher_key_list_V_load => decipher_key_list_V_fu_102);

    grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248 : component example_dec_Pipeline_VITIS_LOOP_129_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start,
        ap_done => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done,
        ap_idle => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_idle,
        ap_ready => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_ready,
        endPlaintextStrm_dout => endPlaintextStrm_dout,
        endPlaintextStrm_empty_n => endPlaintextStrm_empty_n,
        endPlaintextStrm_read => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_endPlaintextStrm_read,
        plaintextStrm_dout => plaintextStrm_dout,
        plaintextStrm_empty_n => plaintextStrm_empty_n,
        plaintextStrm_read => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_plaintextStrm_read,
        end_r => end_reg_455,
        pt_address0 => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_address0,
        pt_ce0 => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_ce0,
        pt_we0 => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_we0,
        pt_d0 => grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_d0);

    ciphertextStrm_fifo_U : component example_fifo_w128_d256_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_din,
        if_full_n => ciphertextStrm_full_n,
        if_write => ciphertextStrm_write,
        if_dout => ciphertextStrm_dout,
        if_empty_n => ciphertextStrm_empty_n,
        if_read => ciphertextStrm_read);

    endCiphertextStrm_fifo_U : component example_fifo_w1_d256_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endCiphertextStrm_din,
        if_full_n => endCiphertextStrm_full_n,
        if_write => endCiphertextStrm_write,
        if_dout => endCiphertextStrm_dout,
        if_empty_n => endCiphertextStrm_empty_n,
        if_read => endCiphertextStrm_read);

    cipherkeyStrm_fifo_U : component example_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => cipherkeyStrm_full_n,
        if_write => cipherkeyStrm_write,
        if_dout => cipherkeyStrm_dout,
        if_empty_n => cipherkeyStrm_empty_n,
        if_read => cipherkeyStrm_read);

    IVStrm_fifo_U : component example_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => IVStrm_full_n,
        if_write => IVStrm_write,
        if_dout => IVStrm_dout,
        if_empty_n => IVStrm_empty_n,
        if_read => IVStrm_read);

    plaintextStrm_fifo_U : component example_fifo_w128_d256_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_din,
        if_full_n => plaintextStrm_full_n,
        if_write => plaintextStrm_write,
        if_dout => plaintextStrm_dout,
        if_empty_n => plaintextStrm_empty_n,
        if_read => plaintextStrm_read);

    endPlaintextStrm_fifo_U : component example_fifo_w1_d256_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endPlaintextStrm_din,
        if_full_n => endPlaintextStrm_full_n,
        if_write => endPlaintextStrm_write,
        if_dout => endPlaintextStrm_dout,
        if_empty_n => endPlaintextStrm_empty_n,
        if_read => endPlaintextStrm_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_ready = ap_const_logic_1)) then 
                    grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = ap_NS_fsm_state11))) then 
                    grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_ready = ap_const_logic_1)) then 
                    grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_ready = ap_const_logic_1)) then 
                    grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateKey_1_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateKey_1_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_updateKey_1_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateKey_1_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_updateKey_1_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                IV_reg_412 <= IVStrm_dout;
                e_reg_417 <= endCiphertextStrm_dout;
                key_r_reg_407 <= cipherkeyStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_updateKey_1_fu_202_this_1_10_ap_vld = ap_const_logic_1))) then
                decipher_key_list_V_10_fu_142 <= grp_updateKey_1_fu_202_this_1_10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_1_fu_106 <= grp_updateKey_1_fu_202_this_1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_2_fu_110 <= grp_updateKey_1_fu_202_this_1_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_3_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_3_fu_114 <= grp_updateKey_1_fu_202_this_1_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_4_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_4_fu_118 <= grp_updateKey_1_fu_202_this_1_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_5_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_5_fu_122 <= grp_updateKey_1_fu_202_this_1_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_6_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_6_fu_126 <= grp_updateKey_1_fu_202_this_1_6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_7_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_7_fu_130 <= grp_updateKey_1_fu_202_this_1_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_updateKey_1_fu_202_this_1_8_ap_vld = ap_const_logic_1))) then
                decipher_key_list_V_8_fu_134 <= grp_updateKey_1_fu_202_this_1_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_updateKey_1_fu_202_this_1_9_ap_vld = ap_const_logic_1))) then
                decipher_key_list_V_9_fu_138 <= grp_updateKey_1_fu_202_this_1_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_1_fu_202_this_1_0_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                decipher_key_list_V_fu_102 <= grp_updateKey_1_fu_202_this_1_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                end_reg_455 <= endPlaintextStrm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state10, grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_done, grp_updateKey_1_fu_202_ap_done, grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_done, grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done, ap_CS_fsm_state3, endCiphertextStrm_full_n, cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n, ap_CS_fsm_state6, ap_CS_fsm_state8, endPlaintextStrm_full_n, ap_CS_fsm_state12, endPlaintextStrm_empty_n, cipherkeyStrm_full_n, IVStrm_full_n, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (endCiphertextStrm_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_updateKey_1_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((endPlaintextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    IVStrm_read_assign_proc : process(ap_CS_fsm_state5, cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            IVStrm_read <= ap_const_logic_1;
        else 
            IVStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_write_assign_proc : process(ap_start, ap_CS_fsm_state1, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IVStrm_write <= ap_const_logic_1;
        else 
            IVStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);

    ap_ST_fsm_state10_blk_assign_proc : process(endPlaintextStrm_empty_n)
    begin
        if ((endPlaintextStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done)
    begin
        if ((grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if (((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_done)
    begin
        if ((grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(endCiphertextStrm_full_n)
    begin
        if ((endCiphertextStrm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n)
    begin
        if (((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(grp_updateKey_1_fu_202_ap_done)
    begin
        if ((grp_updateKey_1_fu_202_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_done)
    begin
        if ((grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(endPlaintextStrm_full_n)
    begin
        if ((endPlaintextStrm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n)
    begin
                ap_block_state5 <= ((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_ignore_call40_assign_proc : process(cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n)
    begin
                ap_block_state5_ignore_call40 <= ((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_read_assign_proc : process(ap_CS_fsm_state5, cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cipherkeyStrm_read <= ap_const_logic_1;
        else 
            cipherkeyStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_write_assign_proc : process(ap_start, ap_CS_fsm_state1, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cipherkeyStrm_write <= ap_const_logic_1;
        else 
            cipherkeyStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_read_assign_proc : process(grp_dec_Pipeline_decryption_cbc_loop_fu_223_ciphertextStrm_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ciphertextStrm_read <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_ciphertextStrm_read;
        else 
            ciphertextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_write_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ciphertextStrm_write <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ciphertextStrm_write;
        else 
            ciphertextStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    crypto_buff_address0 <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_crypto_buff_address0;
    crypto_buff_ce0 <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_crypto_buff_ce0;

    endCiphertextStrm_din_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_din, ap_CS_fsm_state3, endCiphertextStrm_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (endCiphertextStrm_full_n = ap_const_logic_1))) then 
            endCiphertextStrm_din <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            endCiphertextStrm_din <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_din;
        else 
            endCiphertextStrm_din <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_din;
        end if; 
    end process;


    endCiphertextStrm_read_assign_proc : process(ap_CS_fsm_state5, grp_dec_Pipeline_decryption_cbc_loop_fu_223_endCiphertextStrm_read, cipherkeyStrm_empty_n, IVStrm_empty_n, endCiphertextStrm_empty_n, ap_CS_fsm_state8)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_empty_n) or (endCiphertextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            endCiphertextStrm_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            endCiphertextStrm_read <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_endCiphertextStrm_read;
        else 
            endCiphertextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endCiphertextStrm_write_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_write, ap_CS_fsm_state3, endCiphertextStrm_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (endCiphertextStrm_full_n = ap_const_logic_1))) then 
            endCiphertextStrm_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            endCiphertextStrm_write <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_endCiphertextStrm_write;
        else 
            endCiphertextStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_din_assign_proc : process(grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_din, ap_CS_fsm_state8, endPlaintextStrm_full_n, ap_CS_fsm_state9)
    begin
        if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            endPlaintextStrm_din <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            endPlaintextStrm_din <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_din;
        else 
            endPlaintextStrm_din <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_din;
        end if; 
    end process;


    endPlaintextStrm_read_assign_proc : process(ap_CS_fsm_state10, grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_endPlaintextStrm_read, ap_CS_fsm_state12, endPlaintextStrm_empty_n)
    begin
        if (((endPlaintextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            endPlaintextStrm_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            endPlaintextStrm_read <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_endPlaintextStrm_read;
        else 
            endPlaintextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_write_assign_proc : process(grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_write, ap_CS_fsm_state8, endPlaintextStrm_full_n, ap_CS_fsm_state9)
    begin
        if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            endPlaintextStrm_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            endPlaintextStrm_write <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_endPlaintextStrm_write;
        else 
            endPlaintextStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start <= grp_dec_Pipeline_VITIS_LOOP_118_3_fu_194_ap_start_reg;
    grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_ap_start_reg;
    grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_ap_start_reg;
    grp_updateKey_1_fu_202_ap_start <= grp_updateKey_1_fu_202_ap_start_reg;

    plaintextStrm_read_assign_proc : process(grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_plaintextStrm_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            plaintextStrm_read <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_plaintextStrm_read;
        else 
            plaintextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    plaintextStrm_write_assign_proc : process(grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            plaintextStrm_write <= grp_dec_Pipeline_decryption_cbc_loop_fu_223_plaintextStrm_write;
        else 
            plaintextStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    pt_address0 <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_address0;
    pt_ce0 <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_ce0;
    pt_d0 <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_d0;
    pt_we0 <= grp_dec_Pipeline_VITIS_LOOP_129_4_fu_248_pt_we0;
end behav;
