-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    crypto_buff_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    crypto_buff_ce0 : OUT STD_LOGIC;
    crypto_buff_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    ct_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    ct_ce0 : OUT STD_LOGIC;
    ct_we0 : OUT STD_LOGIC;
    ct_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of example_enc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "01110000011011110110111001101101011011000110101101101010011010010110100001100111011001100110010101100100011000110110001001100001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cipher_0_ssbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_ce0 : STD_LOGIC;
    signal cipher_0_ssbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_ce1 : STD_LOGIC;
    signal cipher_0_ssbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_ce2 : STD_LOGIC;
    signal cipher_0_ssbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_ce3 : STD_LOGIC;
    signal cipher_0_ssbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q4 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q5 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q6 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q7 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q8 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q9 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q10 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q11 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q12 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q13 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q14 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q15 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q16 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q17 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q18 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q19 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q20 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q21 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q22 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q23 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q24 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q25 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q26 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q27 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q28 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q29 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q30 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q31 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q32 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q33 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q34 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q35 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q36 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q37 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q38 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q39 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q40 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q41 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q42 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q43 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q44 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q45 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q46 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q47 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q48 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q49 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q50 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q51 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q52 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q53 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q54 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q55 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q56 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q57 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q58 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q59 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q60 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q61 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q62 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q63 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q64 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q65 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q66 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q67 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q68 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q69 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q70 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q71 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q72 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q73 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q74 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q75 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q76 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q77 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q78 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q79 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q80 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q81 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q82 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q83 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q84 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q85 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q86 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q87 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q88 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q89 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q90 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q91 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q92 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q93 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q94 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q95 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q96 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q97 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q98 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q99 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q100 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q101 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q102 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q103 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q104 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q105 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q106 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q107 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q108 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q109 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q110 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q111 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q112 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q113 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q114 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q115 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q116 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q117 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q118 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q119 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q120 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q121 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q122 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q123 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q124 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q125 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q126 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q127 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q128 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q129 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q130 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q131 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q132 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q133 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q134 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q135 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q136 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q137 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q138 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q139 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q140 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q141 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q142 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q143 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q144 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q145 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q146 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q147 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q148 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q149 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q150 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q151 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q152 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q153 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q154 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q155 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q156 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q157 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q158 : STD_LOGIC_VECTOR (7 downto 0);
    signal cipher_0_ssbox_q159 : STD_LOGIC_VECTOR (7 downto 0);
    signal key_r_reg_405 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal IV_V_reg_410 : STD_LOGIC_VECTOR (127 downto 0);
    signal e_reg_415 : STD_LOGIC_VECTOR (0 downto 0);
    signal end_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_done : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_idle : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_ready : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_write : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_write : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_crypto_buff_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_crypto_buff_ce0 : STD_LOGIC;
    signal grp_updateKey_fu_200_ap_start : STD_LOGIC;
    signal grp_updateKey_fu_200_ap_done : STD_LOGIC;
    signal grp_updateKey_fu_200_ap_idle : STD_LOGIC;
    signal grp_updateKey_fu_200_ap_ready : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_0_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_1_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_2_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_3 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_3_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_4 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_4_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_5 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_5_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_6 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_6_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_7 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_7_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_8 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_8_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_9 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_9_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_this_1_10 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_updateKey_fu_200_this_1_10_ap_vld : STD_LOGIC;
    signal grp_updateKey_fu_200_cipher_0_ssbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_updateKey_fu_200_cipher_0_ssbox_ce0 : STD_LOGIC;
    signal grp_updateKey_fu_200_cipher_0_ssbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_updateKey_fu_200_cipher_0_ssbox_ce1 : STD_LOGIC;
    signal grp_updateKey_fu_200_cipher_0_ssbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_updateKey_fu_200_cipher_0_ssbox_ce2 : STD_LOGIC;
    signal grp_updateKey_fu_200_cipher_0_ssbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_updateKey_fu_200_cipher_0_ssbox_ce3 : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_done : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_idle : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_ready : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_plaintextStrm_read : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_endPlaintextStrm_read : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_write : STD_LOGIC;
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_write : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_idle : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_ready : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_endCiphertextStrm_read : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ciphertextStrm_read : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_ce0 : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_we0 : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal plaintextStrm_full_n : STD_LOGIC;
    signal plaintextStrm_write : STD_LOGIC;
    signal endPlaintextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_full_n : STD_LOGIC;
    signal endPlaintextStrm_write : STD_LOGIC;
    signal grp_updateKey_fu_200_ap_start_reg : STD_LOGIC := '0';
    signal cipherkeyStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal cipherkeyStrm_empty_n : STD_LOGIC;
    signal cipherkeyStrm_read : STD_LOGIC;
    signal IVStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal IVStrm_empty_n : STD_LOGIC;
    signal IVStrm_read : STD_LOGIC;
    signal endPlaintextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_empty_n : STD_LOGIC;
    signal endPlaintextStrm_read : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state5_ignore_call39 : BOOLEAN;
    signal cipher_key_list_V_fu_100 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal cipher_key_list_V_1_fu_104 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_2_fu_108 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_3_fu_112 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_4_fu_116 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_5_fu_120 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_6_fu_124 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_7_fu_128 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_8_fu_132 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_9_fu_136 : STD_LOGIC_VECTOR (127 downto 0);
    signal cipher_key_list_V_10_fu_140 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal plaintextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal plaintextStrm_empty_n : STD_LOGIC;
    signal plaintextStrm_read : STD_LOGIC;
    signal ciphertextStrm_full_n : STD_LOGIC;
    signal ciphertextStrm_write : STD_LOGIC;
    signal endCiphertextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_full_n : STD_LOGIC;
    signal endCiphertextStrm_write : STD_LOGIC;
    signal grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ciphertextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal ciphertextStrm_empty_n : STD_LOGIC;
    signal ciphertextStrm_read : STD_LOGIC;
    signal endCiphertextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_empty_n : STD_LOGIC;
    signal endCiphertextStrm_read : STD_LOGIC;
    signal cipherkeyStrm_full_n : STD_LOGIC;
    signal cipherkeyStrm_write : STD_LOGIC;
    signal IVStrm_full_n : STD_LOGIC;
    signal IVStrm_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component example_enc_Pipeline_VITIS_LOOP_64_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintextStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        plaintextStrm_full_n : IN STD_LOGIC;
        plaintextStrm_write : OUT STD_LOGIC;
        endPlaintextStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endPlaintextStrm_full_n : IN STD_LOGIC;
        endPlaintextStrm_write : OUT STD_LOGIC;
        crypto_buff_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        crypto_buff_ce0 : OUT STD_LOGIC;
        crypto_buff_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_updateKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_1_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_0_ap_vld : OUT STD_LOGIC;
        this_1_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_1_ap_vld : OUT STD_LOGIC;
        this_1_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_2_ap_vld : OUT STD_LOGIC;
        this_1_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_3_ap_vld : OUT STD_LOGIC;
        this_1_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_4_ap_vld : OUT STD_LOGIC;
        this_1_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_5_ap_vld : OUT STD_LOGIC;
        this_1_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_6_ap_vld : OUT STD_LOGIC;
        this_1_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_7_ap_vld : OUT STD_LOGIC;
        this_1_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_8_ap_vld : OUT STD_LOGIC;
        this_1_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_9_ap_vld : OUT STD_LOGIC;
        this_1_10 : OUT STD_LOGIC_VECTOR (127 downto 0);
        this_1_10_ap_vld : OUT STD_LOGIC;
        cipherkey : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_0_ssbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_ce0 : OUT STD_LOGIC;
        cipher_0_ssbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_ce1 : OUT STD_LOGIC;
        cipher_0_ssbox_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_ce2 : OUT STD_LOGIC;
        cipher_0_ssbox_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        cipher_0_ssbox_ce3 : OUT STD_LOGIC;
        cipher_0_ssbox_q3 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component example_enc_Pipeline_encryption_cbc_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintextStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        plaintextStrm_empty_n : IN STD_LOGIC;
        plaintextStrm_read : OUT STD_LOGIC;
        endPlaintextStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endPlaintextStrm_empty_n : IN STD_LOGIC;
        endPlaintextStrm_read : OUT STD_LOGIC;
        ciphertextStrm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        ciphertextStrm_full_n : IN STD_LOGIC;
        ciphertextStrm_write : OUT STD_LOGIC;
        endCiphertextStrm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        endCiphertextStrm_full_n : IN STD_LOGIC;
        endCiphertextStrm_write : OUT STD_LOGIC;
        e : IN STD_LOGIC_VECTOR (0 downto 0);
        IV_V : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_1_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_2_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_3_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_4_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_5_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_6_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_7_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_8_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_9_load : IN STD_LOGIC_VECTOR (127 downto 0);
        cipher_key_list_V_10_load : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_enc_Pipeline_VITIS_LOOP_75_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        endCiphertextStrm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        endCiphertextStrm_empty_n : IN STD_LOGIC;
        endCiphertextStrm_read : OUT STD_LOGIC;
        ciphertextStrm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        ciphertextStrm_empty_n : IN STD_LOGIC;
        ciphertextStrm_read : OUT STD_LOGIC;
        end_r : IN STD_LOGIC_VECTOR (0 downto 0);
        ct_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        ct_ce0 : OUT STD_LOGIC;
        ct_we0 : OUT STD_LOGIC;
        ct_d0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component example_process_r_cipher_0_ssbox_ROM_NP_LUTRAM_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address16 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce16 : IN STD_LOGIC;
        q16 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address17 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce17 : IN STD_LOGIC;
        q17 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address18 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce18 : IN STD_LOGIC;
        q18 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address19 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce19 : IN STD_LOGIC;
        q19 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address20 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce20 : IN STD_LOGIC;
        q20 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address21 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce21 : IN STD_LOGIC;
        q21 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address22 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce22 : IN STD_LOGIC;
        q22 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address23 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce23 : IN STD_LOGIC;
        q23 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address24 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce24 : IN STD_LOGIC;
        q24 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address25 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce25 : IN STD_LOGIC;
        q25 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address26 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce26 : IN STD_LOGIC;
        q26 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address27 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce27 : IN STD_LOGIC;
        q27 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address28 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce28 : IN STD_LOGIC;
        q28 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address29 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce29 : IN STD_LOGIC;
        q29 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address30 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce30 : IN STD_LOGIC;
        q30 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address31 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce31 : IN STD_LOGIC;
        q31 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address32 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce32 : IN STD_LOGIC;
        q32 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address33 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce33 : IN STD_LOGIC;
        q33 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address34 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce34 : IN STD_LOGIC;
        q34 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address35 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce35 : IN STD_LOGIC;
        q35 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address36 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce36 : IN STD_LOGIC;
        q36 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address37 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce37 : IN STD_LOGIC;
        q37 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address38 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce38 : IN STD_LOGIC;
        q38 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address39 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce39 : IN STD_LOGIC;
        q39 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address40 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce40 : IN STD_LOGIC;
        q40 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address41 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce41 : IN STD_LOGIC;
        q41 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address42 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce42 : IN STD_LOGIC;
        q42 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address43 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce43 : IN STD_LOGIC;
        q43 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address44 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce44 : IN STD_LOGIC;
        q44 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address45 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce45 : IN STD_LOGIC;
        q45 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address46 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce46 : IN STD_LOGIC;
        q46 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address47 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce47 : IN STD_LOGIC;
        q47 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address48 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce48 : IN STD_LOGIC;
        q48 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address49 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce49 : IN STD_LOGIC;
        q49 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address50 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce50 : IN STD_LOGIC;
        q50 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address51 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce51 : IN STD_LOGIC;
        q51 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address52 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce52 : IN STD_LOGIC;
        q52 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address53 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce53 : IN STD_LOGIC;
        q53 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address54 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce54 : IN STD_LOGIC;
        q54 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address55 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce55 : IN STD_LOGIC;
        q55 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address56 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce56 : IN STD_LOGIC;
        q56 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address57 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce57 : IN STD_LOGIC;
        q57 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address58 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce58 : IN STD_LOGIC;
        q58 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address59 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce59 : IN STD_LOGIC;
        q59 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address60 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce60 : IN STD_LOGIC;
        q60 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address61 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce61 : IN STD_LOGIC;
        q61 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address62 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce62 : IN STD_LOGIC;
        q62 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address63 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce63 : IN STD_LOGIC;
        q63 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address64 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce64 : IN STD_LOGIC;
        q64 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address65 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce65 : IN STD_LOGIC;
        q65 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address66 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce66 : IN STD_LOGIC;
        q66 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address67 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce67 : IN STD_LOGIC;
        q67 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address68 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce68 : IN STD_LOGIC;
        q68 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address69 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce69 : IN STD_LOGIC;
        q69 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address70 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce70 : IN STD_LOGIC;
        q70 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address71 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce71 : IN STD_LOGIC;
        q71 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address72 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce72 : IN STD_LOGIC;
        q72 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address73 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce73 : IN STD_LOGIC;
        q73 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address74 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce74 : IN STD_LOGIC;
        q74 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address75 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce75 : IN STD_LOGIC;
        q75 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address76 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce76 : IN STD_LOGIC;
        q76 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address77 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce77 : IN STD_LOGIC;
        q77 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address78 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce78 : IN STD_LOGIC;
        q78 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address79 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce79 : IN STD_LOGIC;
        q79 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address80 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce80 : IN STD_LOGIC;
        q80 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address81 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce81 : IN STD_LOGIC;
        q81 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address82 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce82 : IN STD_LOGIC;
        q82 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address83 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce83 : IN STD_LOGIC;
        q83 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address84 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce84 : IN STD_LOGIC;
        q84 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address85 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce85 : IN STD_LOGIC;
        q85 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address86 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce86 : IN STD_LOGIC;
        q86 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address87 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce87 : IN STD_LOGIC;
        q87 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address88 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce88 : IN STD_LOGIC;
        q88 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address89 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce89 : IN STD_LOGIC;
        q89 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address90 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce90 : IN STD_LOGIC;
        q90 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address91 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce91 : IN STD_LOGIC;
        q91 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address92 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce92 : IN STD_LOGIC;
        q92 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address93 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce93 : IN STD_LOGIC;
        q93 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address94 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce94 : IN STD_LOGIC;
        q94 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address95 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce95 : IN STD_LOGIC;
        q95 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address96 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce96 : IN STD_LOGIC;
        q96 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address97 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce97 : IN STD_LOGIC;
        q97 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address98 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce98 : IN STD_LOGIC;
        q98 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address99 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce99 : IN STD_LOGIC;
        q99 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address100 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce100 : IN STD_LOGIC;
        q100 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address101 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce101 : IN STD_LOGIC;
        q101 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address102 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce102 : IN STD_LOGIC;
        q102 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address103 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce103 : IN STD_LOGIC;
        q103 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address104 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce104 : IN STD_LOGIC;
        q104 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address105 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce105 : IN STD_LOGIC;
        q105 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address106 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce106 : IN STD_LOGIC;
        q106 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address107 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce107 : IN STD_LOGIC;
        q107 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address108 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce108 : IN STD_LOGIC;
        q108 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address109 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce109 : IN STD_LOGIC;
        q109 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address110 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce110 : IN STD_LOGIC;
        q110 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address111 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce111 : IN STD_LOGIC;
        q111 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address112 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce112 : IN STD_LOGIC;
        q112 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address113 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce113 : IN STD_LOGIC;
        q113 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address114 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce114 : IN STD_LOGIC;
        q114 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address115 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce115 : IN STD_LOGIC;
        q115 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address116 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce116 : IN STD_LOGIC;
        q116 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address117 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce117 : IN STD_LOGIC;
        q117 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address118 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce118 : IN STD_LOGIC;
        q118 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address119 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce119 : IN STD_LOGIC;
        q119 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address120 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce120 : IN STD_LOGIC;
        q120 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address121 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce121 : IN STD_LOGIC;
        q121 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address122 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce122 : IN STD_LOGIC;
        q122 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address123 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce123 : IN STD_LOGIC;
        q123 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address124 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce124 : IN STD_LOGIC;
        q124 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address125 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce125 : IN STD_LOGIC;
        q125 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address126 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce126 : IN STD_LOGIC;
        q126 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address127 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce127 : IN STD_LOGIC;
        q127 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address128 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce128 : IN STD_LOGIC;
        q128 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address129 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce129 : IN STD_LOGIC;
        q129 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address130 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce130 : IN STD_LOGIC;
        q130 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address131 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce131 : IN STD_LOGIC;
        q131 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address132 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce132 : IN STD_LOGIC;
        q132 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address133 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce133 : IN STD_LOGIC;
        q133 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address134 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce134 : IN STD_LOGIC;
        q134 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address135 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce135 : IN STD_LOGIC;
        q135 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address136 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce136 : IN STD_LOGIC;
        q136 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address137 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce137 : IN STD_LOGIC;
        q137 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address138 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce138 : IN STD_LOGIC;
        q138 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address139 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce139 : IN STD_LOGIC;
        q139 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address140 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce140 : IN STD_LOGIC;
        q140 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address141 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce141 : IN STD_LOGIC;
        q141 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address142 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce142 : IN STD_LOGIC;
        q142 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address143 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce143 : IN STD_LOGIC;
        q143 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address144 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce144 : IN STD_LOGIC;
        q144 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address145 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce145 : IN STD_LOGIC;
        q145 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address146 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce146 : IN STD_LOGIC;
        q146 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address147 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce147 : IN STD_LOGIC;
        q147 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address148 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce148 : IN STD_LOGIC;
        q148 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address149 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce149 : IN STD_LOGIC;
        q149 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address150 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce150 : IN STD_LOGIC;
        q150 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address151 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce151 : IN STD_LOGIC;
        q151 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address152 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce152 : IN STD_LOGIC;
        q152 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address153 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce153 : IN STD_LOGIC;
        q153 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address154 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce154 : IN STD_LOGIC;
        q154 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address155 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce155 : IN STD_LOGIC;
        q155 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address156 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce156 : IN STD_LOGIC;
        q156 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address157 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce157 : IN STD_LOGIC;
        q157 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address158 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce158 : IN STD_LOGIC;
        q158 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address159 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce159 : IN STD_LOGIC;
        q159 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component example_fifo_w128_d256_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component example_fifo_w1_d256_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component example_fifo_w128_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    cipher_0_ssbox_U : component example_process_r_cipher_0_ssbox_ROM_NP_LUTRAM_1R
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cipher_0_ssbox_address0,
        ce0 => cipher_0_ssbox_ce0,
        q0 => cipher_0_ssbox_q0,
        address1 => cipher_0_ssbox_address1,
        ce1 => cipher_0_ssbox_ce1,
        q1 => cipher_0_ssbox_q1,
        address2 => cipher_0_ssbox_address2,
        ce2 => cipher_0_ssbox_ce2,
        q2 => cipher_0_ssbox_q2,
        address3 => cipher_0_ssbox_address3,
        ce3 => cipher_0_ssbox_ce3,
        q3 => cipher_0_ssbox_q3,
        address4 => ap_const_lv8_0,
        ce4 => ap_const_logic_0,
        q4 => cipher_0_ssbox_q4,
        address5 => ap_const_lv8_0,
        ce5 => ap_const_logic_0,
        q5 => cipher_0_ssbox_q5,
        address6 => ap_const_lv8_0,
        ce6 => ap_const_logic_0,
        q6 => cipher_0_ssbox_q6,
        address7 => ap_const_lv8_0,
        ce7 => ap_const_logic_0,
        q7 => cipher_0_ssbox_q7,
        address8 => ap_const_lv8_0,
        ce8 => ap_const_logic_0,
        q8 => cipher_0_ssbox_q8,
        address9 => ap_const_lv8_0,
        ce9 => ap_const_logic_0,
        q9 => cipher_0_ssbox_q9,
        address10 => ap_const_lv8_0,
        ce10 => ap_const_logic_0,
        q10 => cipher_0_ssbox_q10,
        address11 => ap_const_lv8_0,
        ce11 => ap_const_logic_0,
        q11 => cipher_0_ssbox_q11,
        address12 => ap_const_lv8_0,
        ce12 => ap_const_logic_0,
        q12 => cipher_0_ssbox_q12,
        address13 => ap_const_lv8_0,
        ce13 => ap_const_logic_0,
        q13 => cipher_0_ssbox_q13,
        address14 => ap_const_lv8_0,
        ce14 => ap_const_logic_0,
        q14 => cipher_0_ssbox_q14,
        address15 => ap_const_lv8_0,
        ce15 => ap_const_logic_0,
        q15 => cipher_0_ssbox_q15,
        address16 => ap_const_lv8_0,
        ce16 => ap_const_logic_0,
        q16 => cipher_0_ssbox_q16,
        address17 => ap_const_lv8_0,
        ce17 => ap_const_logic_0,
        q17 => cipher_0_ssbox_q17,
        address18 => ap_const_lv8_0,
        ce18 => ap_const_logic_0,
        q18 => cipher_0_ssbox_q18,
        address19 => ap_const_lv8_0,
        ce19 => ap_const_logic_0,
        q19 => cipher_0_ssbox_q19,
        address20 => ap_const_lv8_0,
        ce20 => ap_const_logic_0,
        q20 => cipher_0_ssbox_q20,
        address21 => ap_const_lv8_0,
        ce21 => ap_const_logic_0,
        q21 => cipher_0_ssbox_q21,
        address22 => ap_const_lv8_0,
        ce22 => ap_const_logic_0,
        q22 => cipher_0_ssbox_q22,
        address23 => ap_const_lv8_0,
        ce23 => ap_const_logic_0,
        q23 => cipher_0_ssbox_q23,
        address24 => ap_const_lv8_0,
        ce24 => ap_const_logic_0,
        q24 => cipher_0_ssbox_q24,
        address25 => ap_const_lv8_0,
        ce25 => ap_const_logic_0,
        q25 => cipher_0_ssbox_q25,
        address26 => ap_const_lv8_0,
        ce26 => ap_const_logic_0,
        q26 => cipher_0_ssbox_q26,
        address27 => ap_const_lv8_0,
        ce27 => ap_const_logic_0,
        q27 => cipher_0_ssbox_q27,
        address28 => ap_const_lv8_0,
        ce28 => ap_const_logic_0,
        q28 => cipher_0_ssbox_q28,
        address29 => ap_const_lv8_0,
        ce29 => ap_const_logic_0,
        q29 => cipher_0_ssbox_q29,
        address30 => ap_const_lv8_0,
        ce30 => ap_const_logic_0,
        q30 => cipher_0_ssbox_q30,
        address31 => ap_const_lv8_0,
        ce31 => ap_const_logic_0,
        q31 => cipher_0_ssbox_q31,
        address32 => ap_const_lv8_0,
        ce32 => ap_const_logic_0,
        q32 => cipher_0_ssbox_q32,
        address33 => ap_const_lv8_0,
        ce33 => ap_const_logic_0,
        q33 => cipher_0_ssbox_q33,
        address34 => ap_const_lv8_0,
        ce34 => ap_const_logic_0,
        q34 => cipher_0_ssbox_q34,
        address35 => ap_const_lv8_0,
        ce35 => ap_const_logic_0,
        q35 => cipher_0_ssbox_q35,
        address36 => ap_const_lv8_0,
        ce36 => ap_const_logic_0,
        q36 => cipher_0_ssbox_q36,
        address37 => ap_const_lv8_0,
        ce37 => ap_const_logic_0,
        q37 => cipher_0_ssbox_q37,
        address38 => ap_const_lv8_0,
        ce38 => ap_const_logic_0,
        q38 => cipher_0_ssbox_q38,
        address39 => ap_const_lv8_0,
        ce39 => ap_const_logic_0,
        q39 => cipher_0_ssbox_q39,
        address40 => ap_const_lv8_0,
        ce40 => ap_const_logic_0,
        q40 => cipher_0_ssbox_q40,
        address41 => ap_const_lv8_0,
        ce41 => ap_const_logic_0,
        q41 => cipher_0_ssbox_q41,
        address42 => ap_const_lv8_0,
        ce42 => ap_const_logic_0,
        q42 => cipher_0_ssbox_q42,
        address43 => ap_const_lv8_0,
        ce43 => ap_const_logic_0,
        q43 => cipher_0_ssbox_q43,
        address44 => ap_const_lv8_0,
        ce44 => ap_const_logic_0,
        q44 => cipher_0_ssbox_q44,
        address45 => ap_const_lv8_0,
        ce45 => ap_const_logic_0,
        q45 => cipher_0_ssbox_q45,
        address46 => ap_const_lv8_0,
        ce46 => ap_const_logic_0,
        q46 => cipher_0_ssbox_q46,
        address47 => ap_const_lv8_0,
        ce47 => ap_const_logic_0,
        q47 => cipher_0_ssbox_q47,
        address48 => ap_const_lv8_0,
        ce48 => ap_const_logic_0,
        q48 => cipher_0_ssbox_q48,
        address49 => ap_const_lv8_0,
        ce49 => ap_const_logic_0,
        q49 => cipher_0_ssbox_q49,
        address50 => ap_const_lv8_0,
        ce50 => ap_const_logic_0,
        q50 => cipher_0_ssbox_q50,
        address51 => ap_const_lv8_0,
        ce51 => ap_const_logic_0,
        q51 => cipher_0_ssbox_q51,
        address52 => ap_const_lv8_0,
        ce52 => ap_const_logic_0,
        q52 => cipher_0_ssbox_q52,
        address53 => ap_const_lv8_0,
        ce53 => ap_const_logic_0,
        q53 => cipher_0_ssbox_q53,
        address54 => ap_const_lv8_0,
        ce54 => ap_const_logic_0,
        q54 => cipher_0_ssbox_q54,
        address55 => ap_const_lv8_0,
        ce55 => ap_const_logic_0,
        q55 => cipher_0_ssbox_q55,
        address56 => ap_const_lv8_0,
        ce56 => ap_const_logic_0,
        q56 => cipher_0_ssbox_q56,
        address57 => ap_const_lv8_0,
        ce57 => ap_const_logic_0,
        q57 => cipher_0_ssbox_q57,
        address58 => ap_const_lv8_0,
        ce58 => ap_const_logic_0,
        q58 => cipher_0_ssbox_q58,
        address59 => ap_const_lv8_0,
        ce59 => ap_const_logic_0,
        q59 => cipher_0_ssbox_q59,
        address60 => ap_const_lv8_0,
        ce60 => ap_const_logic_0,
        q60 => cipher_0_ssbox_q60,
        address61 => ap_const_lv8_0,
        ce61 => ap_const_logic_0,
        q61 => cipher_0_ssbox_q61,
        address62 => ap_const_lv8_0,
        ce62 => ap_const_logic_0,
        q62 => cipher_0_ssbox_q62,
        address63 => ap_const_lv8_0,
        ce63 => ap_const_logic_0,
        q63 => cipher_0_ssbox_q63,
        address64 => ap_const_lv8_0,
        ce64 => ap_const_logic_0,
        q64 => cipher_0_ssbox_q64,
        address65 => ap_const_lv8_0,
        ce65 => ap_const_logic_0,
        q65 => cipher_0_ssbox_q65,
        address66 => ap_const_lv8_0,
        ce66 => ap_const_logic_0,
        q66 => cipher_0_ssbox_q66,
        address67 => ap_const_lv8_0,
        ce67 => ap_const_logic_0,
        q67 => cipher_0_ssbox_q67,
        address68 => ap_const_lv8_0,
        ce68 => ap_const_logic_0,
        q68 => cipher_0_ssbox_q68,
        address69 => ap_const_lv8_0,
        ce69 => ap_const_logic_0,
        q69 => cipher_0_ssbox_q69,
        address70 => ap_const_lv8_0,
        ce70 => ap_const_logic_0,
        q70 => cipher_0_ssbox_q70,
        address71 => ap_const_lv8_0,
        ce71 => ap_const_logic_0,
        q71 => cipher_0_ssbox_q71,
        address72 => ap_const_lv8_0,
        ce72 => ap_const_logic_0,
        q72 => cipher_0_ssbox_q72,
        address73 => ap_const_lv8_0,
        ce73 => ap_const_logic_0,
        q73 => cipher_0_ssbox_q73,
        address74 => ap_const_lv8_0,
        ce74 => ap_const_logic_0,
        q74 => cipher_0_ssbox_q74,
        address75 => ap_const_lv8_0,
        ce75 => ap_const_logic_0,
        q75 => cipher_0_ssbox_q75,
        address76 => ap_const_lv8_0,
        ce76 => ap_const_logic_0,
        q76 => cipher_0_ssbox_q76,
        address77 => ap_const_lv8_0,
        ce77 => ap_const_logic_0,
        q77 => cipher_0_ssbox_q77,
        address78 => ap_const_lv8_0,
        ce78 => ap_const_logic_0,
        q78 => cipher_0_ssbox_q78,
        address79 => ap_const_lv8_0,
        ce79 => ap_const_logic_0,
        q79 => cipher_0_ssbox_q79,
        address80 => ap_const_lv8_0,
        ce80 => ap_const_logic_0,
        q80 => cipher_0_ssbox_q80,
        address81 => ap_const_lv8_0,
        ce81 => ap_const_logic_0,
        q81 => cipher_0_ssbox_q81,
        address82 => ap_const_lv8_0,
        ce82 => ap_const_logic_0,
        q82 => cipher_0_ssbox_q82,
        address83 => ap_const_lv8_0,
        ce83 => ap_const_logic_0,
        q83 => cipher_0_ssbox_q83,
        address84 => ap_const_lv8_0,
        ce84 => ap_const_logic_0,
        q84 => cipher_0_ssbox_q84,
        address85 => ap_const_lv8_0,
        ce85 => ap_const_logic_0,
        q85 => cipher_0_ssbox_q85,
        address86 => ap_const_lv8_0,
        ce86 => ap_const_logic_0,
        q86 => cipher_0_ssbox_q86,
        address87 => ap_const_lv8_0,
        ce87 => ap_const_logic_0,
        q87 => cipher_0_ssbox_q87,
        address88 => ap_const_lv8_0,
        ce88 => ap_const_logic_0,
        q88 => cipher_0_ssbox_q88,
        address89 => ap_const_lv8_0,
        ce89 => ap_const_logic_0,
        q89 => cipher_0_ssbox_q89,
        address90 => ap_const_lv8_0,
        ce90 => ap_const_logic_0,
        q90 => cipher_0_ssbox_q90,
        address91 => ap_const_lv8_0,
        ce91 => ap_const_logic_0,
        q91 => cipher_0_ssbox_q91,
        address92 => ap_const_lv8_0,
        ce92 => ap_const_logic_0,
        q92 => cipher_0_ssbox_q92,
        address93 => ap_const_lv8_0,
        ce93 => ap_const_logic_0,
        q93 => cipher_0_ssbox_q93,
        address94 => ap_const_lv8_0,
        ce94 => ap_const_logic_0,
        q94 => cipher_0_ssbox_q94,
        address95 => ap_const_lv8_0,
        ce95 => ap_const_logic_0,
        q95 => cipher_0_ssbox_q95,
        address96 => ap_const_lv8_0,
        ce96 => ap_const_logic_0,
        q96 => cipher_0_ssbox_q96,
        address97 => ap_const_lv8_0,
        ce97 => ap_const_logic_0,
        q97 => cipher_0_ssbox_q97,
        address98 => ap_const_lv8_0,
        ce98 => ap_const_logic_0,
        q98 => cipher_0_ssbox_q98,
        address99 => ap_const_lv8_0,
        ce99 => ap_const_logic_0,
        q99 => cipher_0_ssbox_q99,
        address100 => ap_const_lv8_0,
        ce100 => ap_const_logic_0,
        q100 => cipher_0_ssbox_q100,
        address101 => ap_const_lv8_0,
        ce101 => ap_const_logic_0,
        q101 => cipher_0_ssbox_q101,
        address102 => ap_const_lv8_0,
        ce102 => ap_const_logic_0,
        q102 => cipher_0_ssbox_q102,
        address103 => ap_const_lv8_0,
        ce103 => ap_const_logic_0,
        q103 => cipher_0_ssbox_q103,
        address104 => ap_const_lv8_0,
        ce104 => ap_const_logic_0,
        q104 => cipher_0_ssbox_q104,
        address105 => ap_const_lv8_0,
        ce105 => ap_const_logic_0,
        q105 => cipher_0_ssbox_q105,
        address106 => ap_const_lv8_0,
        ce106 => ap_const_logic_0,
        q106 => cipher_0_ssbox_q106,
        address107 => ap_const_lv8_0,
        ce107 => ap_const_logic_0,
        q107 => cipher_0_ssbox_q107,
        address108 => ap_const_lv8_0,
        ce108 => ap_const_logic_0,
        q108 => cipher_0_ssbox_q108,
        address109 => ap_const_lv8_0,
        ce109 => ap_const_logic_0,
        q109 => cipher_0_ssbox_q109,
        address110 => ap_const_lv8_0,
        ce110 => ap_const_logic_0,
        q110 => cipher_0_ssbox_q110,
        address111 => ap_const_lv8_0,
        ce111 => ap_const_logic_0,
        q111 => cipher_0_ssbox_q111,
        address112 => ap_const_lv8_0,
        ce112 => ap_const_logic_0,
        q112 => cipher_0_ssbox_q112,
        address113 => ap_const_lv8_0,
        ce113 => ap_const_logic_0,
        q113 => cipher_0_ssbox_q113,
        address114 => ap_const_lv8_0,
        ce114 => ap_const_logic_0,
        q114 => cipher_0_ssbox_q114,
        address115 => ap_const_lv8_0,
        ce115 => ap_const_logic_0,
        q115 => cipher_0_ssbox_q115,
        address116 => ap_const_lv8_0,
        ce116 => ap_const_logic_0,
        q116 => cipher_0_ssbox_q116,
        address117 => ap_const_lv8_0,
        ce117 => ap_const_logic_0,
        q117 => cipher_0_ssbox_q117,
        address118 => ap_const_lv8_0,
        ce118 => ap_const_logic_0,
        q118 => cipher_0_ssbox_q118,
        address119 => ap_const_lv8_0,
        ce119 => ap_const_logic_0,
        q119 => cipher_0_ssbox_q119,
        address120 => ap_const_lv8_0,
        ce120 => ap_const_logic_0,
        q120 => cipher_0_ssbox_q120,
        address121 => ap_const_lv8_0,
        ce121 => ap_const_logic_0,
        q121 => cipher_0_ssbox_q121,
        address122 => ap_const_lv8_0,
        ce122 => ap_const_logic_0,
        q122 => cipher_0_ssbox_q122,
        address123 => ap_const_lv8_0,
        ce123 => ap_const_logic_0,
        q123 => cipher_0_ssbox_q123,
        address124 => ap_const_lv8_0,
        ce124 => ap_const_logic_0,
        q124 => cipher_0_ssbox_q124,
        address125 => ap_const_lv8_0,
        ce125 => ap_const_logic_0,
        q125 => cipher_0_ssbox_q125,
        address126 => ap_const_lv8_0,
        ce126 => ap_const_logic_0,
        q126 => cipher_0_ssbox_q126,
        address127 => ap_const_lv8_0,
        ce127 => ap_const_logic_0,
        q127 => cipher_0_ssbox_q127,
        address128 => ap_const_lv8_0,
        ce128 => ap_const_logic_0,
        q128 => cipher_0_ssbox_q128,
        address129 => ap_const_lv8_0,
        ce129 => ap_const_logic_0,
        q129 => cipher_0_ssbox_q129,
        address130 => ap_const_lv8_0,
        ce130 => ap_const_logic_0,
        q130 => cipher_0_ssbox_q130,
        address131 => ap_const_lv8_0,
        ce131 => ap_const_logic_0,
        q131 => cipher_0_ssbox_q131,
        address132 => ap_const_lv8_0,
        ce132 => ap_const_logic_0,
        q132 => cipher_0_ssbox_q132,
        address133 => ap_const_lv8_0,
        ce133 => ap_const_logic_0,
        q133 => cipher_0_ssbox_q133,
        address134 => ap_const_lv8_0,
        ce134 => ap_const_logic_0,
        q134 => cipher_0_ssbox_q134,
        address135 => ap_const_lv8_0,
        ce135 => ap_const_logic_0,
        q135 => cipher_0_ssbox_q135,
        address136 => ap_const_lv8_0,
        ce136 => ap_const_logic_0,
        q136 => cipher_0_ssbox_q136,
        address137 => ap_const_lv8_0,
        ce137 => ap_const_logic_0,
        q137 => cipher_0_ssbox_q137,
        address138 => ap_const_lv8_0,
        ce138 => ap_const_logic_0,
        q138 => cipher_0_ssbox_q138,
        address139 => ap_const_lv8_0,
        ce139 => ap_const_logic_0,
        q139 => cipher_0_ssbox_q139,
        address140 => ap_const_lv8_0,
        ce140 => ap_const_logic_0,
        q140 => cipher_0_ssbox_q140,
        address141 => ap_const_lv8_0,
        ce141 => ap_const_logic_0,
        q141 => cipher_0_ssbox_q141,
        address142 => ap_const_lv8_0,
        ce142 => ap_const_logic_0,
        q142 => cipher_0_ssbox_q142,
        address143 => ap_const_lv8_0,
        ce143 => ap_const_logic_0,
        q143 => cipher_0_ssbox_q143,
        address144 => ap_const_lv8_0,
        ce144 => ap_const_logic_0,
        q144 => cipher_0_ssbox_q144,
        address145 => ap_const_lv8_0,
        ce145 => ap_const_logic_0,
        q145 => cipher_0_ssbox_q145,
        address146 => ap_const_lv8_0,
        ce146 => ap_const_logic_0,
        q146 => cipher_0_ssbox_q146,
        address147 => ap_const_lv8_0,
        ce147 => ap_const_logic_0,
        q147 => cipher_0_ssbox_q147,
        address148 => ap_const_lv8_0,
        ce148 => ap_const_logic_0,
        q148 => cipher_0_ssbox_q148,
        address149 => ap_const_lv8_0,
        ce149 => ap_const_logic_0,
        q149 => cipher_0_ssbox_q149,
        address150 => ap_const_lv8_0,
        ce150 => ap_const_logic_0,
        q150 => cipher_0_ssbox_q150,
        address151 => ap_const_lv8_0,
        ce151 => ap_const_logic_0,
        q151 => cipher_0_ssbox_q151,
        address152 => ap_const_lv8_0,
        ce152 => ap_const_logic_0,
        q152 => cipher_0_ssbox_q152,
        address153 => ap_const_lv8_0,
        ce153 => ap_const_logic_0,
        q153 => cipher_0_ssbox_q153,
        address154 => ap_const_lv8_0,
        ce154 => ap_const_logic_0,
        q154 => cipher_0_ssbox_q154,
        address155 => ap_const_lv8_0,
        ce155 => ap_const_logic_0,
        q155 => cipher_0_ssbox_q155,
        address156 => ap_const_lv8_0,
        ce156 => ap_const_logic_0,
        q156 => cipher_0_ssbox_q156,
        address157 => ap_const_lv8_0,
        ce157 => ap_const_logic_0,
        q157 => cipher_0_ssbox_q157,
        address158 => ap_const_lv8_0,
        ce158 => ap_const_logic_0,
        q158 => cipher_0_ssbox_q158,
        address159 => ap_const_lv8_0,
        ce159 => ap_const_logic_0,
        q159 => cipher_0_ssbox_q159);

    grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192 : component example_enc_Pipeline_VITIS_LOOP_64_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start,
        ap_done => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_done,
        ap_idle => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_idle,
        ap_ready => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_ready,
        plaintextStrm_din => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_din,
        plaintextStrm_full_n => plaintextStrm_full_n,
        plaintextStrm_write => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_write,
        endPlaintextStrm_din => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_din,
        endPlaintextStrm_full_n => endPlaintextStrm_full_n,
        endPlaintextStrm_write => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_write,
        crypto_buff_address0 => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_crypto_buff_address0,
        crypto_buff_ce0 => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_crypto_buff_ce0,
        crypto_buff_q0 => crypto_buff_q0);

    grp_updateKey_fu_200 : component example_updateKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_updateKey_fu_200_ap_start,
        ap_done => grp_updateKey_fu_200_ap_done,
        ap_idle => grp_updateKey_fu_200_ap_idle,
        ap_ready => grp_updateKey_fu_200_ap_ready,
        this_1_0 => grp_updateKey_fu_200_this_1_0,
        this_1_0_ap_vld => grp_updateKey_fu_200_this_1_0_ap_vld,
        this_1_1 => grp_updateKey_fu_200_this_1_1,
        this_1_1_ap_vld => grp_updateKey_fu_200_this_1_1_ap_vld,
        this_1_2 => grp_updateKey_fu_200_this_1_2,
        this_1_2_ap_vld => grp_updateKey_fu_200_this_1_2_ap_vld,
        this_1_3 => grp_updateKey_fu_200_this_1_3,
        this_1_3_ap_vld => grp_updateKey_fu_200_this_1_3_ap_vld,
        this_1_4 => grp_updateKey_fu_200_this_1_4,
        this_1_4_ap_vld => grp_updateKey_fu_200_this_1_4_ap_vld,
        this_1_5 => grp_updateKey_fu_200_this_1_5,
        this_1_5_ap_vld => grp_updateKey_fu_200_this_1_5_ap_vld,
        this_1_6 => grp_updateKey_fu_200_this_1_6,
        this_1_6_ap_vld => grp_updateKey_fu_200_this_1_6_ap_vld,
        this_1_7 => grp_updateKey_fu_200_this_1_7,
        this_1_7_ap_vld => grp_updateKey_fu_200_this_1_7_ap_vld,
        this_1_8 => grp_updateKey_fu_200_this_1_8,
        this_1_8_ap_vld => grp_updateKey_fu_200_this_1_8_ap_vld,
        this_1_9 => grp_updateKey_fu_200_this_1_9,
        this_1_9_ap_vld => grp_updateKey_fu_200_this_1_9_ap_vld,
        this_1_10 => grp_updateKey_fu_200_this_1_10,
        this_1_10_ap_vld => grp_updateKey_fu_200_this_1_10_ap_vld,
        cipherkey => key_r_reg_405,
        cipher_0_ssbox_address0 => grp_updateKey_fu_200_cipher_0_ssbox_address0,
        cipher_0_ssbox_ce0 => grp_updateKey_fu_200_cipher_0_ssbox_ce0,
        cipher_0_ssbox_q0 => cipher_0_ssbox_q0,
        cipher_0_ssbox_address1 => grp_updateKey_fu_200_cipher_0_ssbox_address1,
        cipher_0_ssbox_ce1 => grp_updateKey_fu_200_cipher_0_ssbox_ce1,
        cipher_0_ssbox_q1 => cipher_0_ssbox_q1,
        cipher_0_ssbox_address2 => grp_updateKey_fu_200_cipher_0_ssbox_address2,
        cipher_0_ssbox_ce2 => grp_updateKey_fu_200_cipher_0_ssbox_ce2,
        cipher_0_ssbox_q2 => cipher_0_ssbox_q2,
        cipher_0_ssbox_address3 => grp_updateKey_fu_200_cipher_0_ssbox_address3,
        cipher_0_ssbox_ce3 => grp_updateKey_fu_200_cipher_0_ssbox_ce3,
        cipher_0_ssbox_q3 => cipher_0_ssbox_q3);

    grp_enc_Pipeline_encryption_cbc_loop_fu_221 : component example_enc_Pipeline_encryption_cbc_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start,
        ap_done => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_done,
        ap_idle => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_idle,
        ap_ready => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_ready,
        plaintextStrm_dout => plaintextStrm_dout,
        plaintextStrm_empty_n => plaintextStrm_empty_n,
        plaintextStrm_read => grp_enc_Pipeline_encryption_cbc_loop_fu_221_plaintextStrm_read,
        endPlaintextStrm_dout => endPlaintextStrm_dout,
        endPlaintextStrm_empty_n => endPlaintextStrm_empty_n,
        endPlaintextStrm_read => grp_enc_Pipeline_encryption_cbc_loop_fu_221_endPlaintextStrm_read,
        ciphertextStrm_din => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_din,
        ciphertextStrm_full_n => ciphertextStrm_full_n,
        ciphertextStrm_write => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_write,
        endCiphertextStrm_din => grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_din,
        endCiphertextStrm_full_n => endCiphertextStrm_full_n,
        endCiphertextStrm_write => grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_write,
        e => e_reg_415,
        IV_V => IV_V_reg_410,
        cipher_key_list_V_load => cipher_key_list_V_fu_100,
        cipher_key_list_V_1_load => cipher_key_list_V_1_fu_104,
        cipher_key_list_V_2_load => cipher_key_list_V_2_fu_108,
        cipher_key_list_V_3_load => cipher_key_list_V_3_fu_112,
        cipher_key_list_V_4_load => cipher_key_list_V_4_fu_116,
        cipher_key_list_V_5_load => cipher_key_list_V_5_fu_120,
        cipher_key_list_V_6_load => cipher_key_list_V_6_fu_124,
        cipher_key_list_V_7_load => cipher_key_list_V_7_fu_128,
        cipher_key_list_V_8_load => cipher_key_list_V_8_fu_132,
        cipher_key_list_V_9_load => cipher_key_list_V_9_fu_136,
        cipher_key_list_V_10_load => cipher_key_list_V_10_fu_140);

    grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246 : component example_enc_Pipeline_VITIS_LOOP_75_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start,
        ap_done => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done,
        ap_idle => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_idle,
        ap_ready => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_ready,
        endCiphertextStrm_dout => endCiphertextStrm_dout,
        endCiphertextStrm_empty_n => endCiphertextStrm_empty_n,
        endCiphertextStrm_read => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_endCiphertextStrm_read,
        ciphertextStrm_dout => ciphertextStrm_dout,
        ciphertextStrm_empty_n => ciphertextStrm_empty_n,
        ciphertextStrm_read => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ciphertextStrm_read,
        end_r => end_reg_453,
        ct_address0 => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_address0,
        ct_ce0 => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_ce0,
        ct_we0 => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_we0,
        ct_d0 => grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_d0);

    ciphertextStrm_fifo_U : component example_fifo_w128_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_din,
        if_full_n => ciphertextStrm_full_n,
        if_write => ciphertextStrm_write,
        if_dout => ciphertextStrm_dout,
        if_empty_n => ciphertextStrm_empty_n,
        if_read => ciphertextStrm_read);

    endCiphertextStrm_fifo_U : component example_fifo_w1_d256_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endCiphertextStrm_din,
        if_full_n => endCiphertextStrm_full_n,
        if_write => endCiphertextStrm_write,
        if_dout => endCiphertextStrm_dout,
        if_empty_n => endCiphertextStrm_empty_n,
        if_read => endCiphertextStrm_read);

    cipherkeyStrm_fifo_U : component example_fifo_w128_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => cipherkeyStrm_full_n,
        if_write => cipherkeyStrm_write,
        if_dout => cipherkeyStrm_dout,
        if_empty_n => cipherkeyStrm_empty_n,
        if_read => cipherkeyStrm_read);

    IVStrm_fifo_U : component example_fifo_w128_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => IVStrm_full_n,
        if_write => IVStrm_write,
        if_dout => IVStrm_dout,
        if_empty_n => IVStrm_empty_n,
        if_read => IVStrm_read);

    plaintextStrm_fifo_U : component example_fifo_w128_d256_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_din,
        if_full_n => plaintextStrm_full_n,
        if_write => plaintextStrm_write,
        if_dout => plaintextStrm_dout,
        if_empty_n => plaintextStrm_empty_n,
        if_read => plaintextStrm_read);

    endPlaintextStrm_fifo_U : component example_fifo_w1_d256_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endPlaintextStrm_din,
        if_full_n => endPlaintextStrm_full_n,
        if_write => endPlaintextStrm_write,
        if_dout => endPlaintextStrm_dout,
        if_empty_n => endPlaintextStrm_empty_n,
        if_read => endPlaintextStrm_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_ready = ap_const_logic_1)) then 
                    grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_logic_1 = ap_NS_fsm_state11))) then 
                    grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_ready = ap_const_logic_1)) then 
                    grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_ready = ap_const_logic_1)) then 
                    grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_updateKey_fu_200_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_updateKey_fu_200_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_updateKey_fu_200_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_updateKey_fu_200_ap_ready = ap_const_logic_1)) then 
                    grp_updateKey_fu_200_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                IV_V_reg_410 <= IVStrm_dout;
                e_reg_415 <= endPlaintextStrm_dout;
                key_r_reg_405 <= cipherkeyStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_10_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_10_fu_140 <= grp_updateKey_fu_200_this_1_10;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_1_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_1_fu_104 <= grp_updateKey_fu_200_this_1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_2_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_2_fu_108 <= grp_updateKey_fu_200_this_1_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_3_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_3_fu_112 <= grp_updateKey_fu_200_this_1_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_4_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_4_fu_116 <= grp_updateKey_fu_200_this_1_4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_5_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_5_fu_120 <= grp_updateKey_fu_200_this_1_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_6_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_6_fu_124 <= grp_updateKey_fu_200_this_1_6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_7_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_7_fu_128 <= grp_updateKey_fu_200_this_1_7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_8_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_8_fu_132 <= grp_updateKey_fu_200_this_1_8;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_9_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_9_fu_136 <= grp_updateKey_fu_200_this_1_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_updateKey_fu_200_this_1_0_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                cipher_key_list_V_fu_100 <= grp_updateKey_fu_200_this_1_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                end_reg_453 <= endCiphertextStrm_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state10, grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_done, grp_updateKey_fu_200_ap_done, grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_done, grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done, ap_CS_fsm_state3, endPlaintextStrm_full_n, cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n, ap_CS_fsm_state6, ap_CS_fsm_state8, endCiphertextStrm_full_n, ap_CS_fsm_state12, endCiphertextStrm_empty_n, cipherkeyStrm_full_n, IVStrm_full_n, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((grp_updateKey_fu_200_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((endCiphertextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;

    IVStrm_read_assign_proc : process(ap_CS_fsm_state5, cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n)
    begin
        if ((not(((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            IVStrm_read <= ap_const_logic_1;
        else 
            IVStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_write_assign_proc : process(ap_start, ap_CS_fsm_state1, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            IVStrm_write <= ap_const_logic_1;
        else 
            IVStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state11 <= ap_NS_fsm(10);

    ap_ST_fsm_state10_blk_assign_proc : process(endCiphertextStrm_empty_n)
    begin
        if ((endCiphertextStrm_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done)
    begin
        if ((grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if (((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_done)
    begin
        if ((grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(endPlaintextStrm_full_n)
    begin
        if ((endPlaintextStrm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n)
    begin
        if (((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(grp_updateKey_fu_200_ap_done)
    begin
        if ((grp_updateKey_fu_200_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_done)
    begin
        if ((grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(endCiphertextStrm_full_n)
    begin
        if ((endCiphertextStrm_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n)
    begin
                ap_block_state5 <= ((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n));
    end process;


    ap_block_state5_ignore_call39_assign_proc : process(cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n)
    begin
                ap_block_state5_ignore_call39 <= ((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done, ap_CS_fsm_state12)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)) or ((grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done, ap_CS_fsm_state12)
    begin
        if (((grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    cipher_0_ssbox_address0_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_address0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_address0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_address0 <= grp_updateKey_fu_200_cipher_0_ssbox_address0;
        else 
            cipher_0_ssbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    cipher_0_ssbox_address1_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_address1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_address1 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_address1 <= grp_updateKey_fu_200_cipher_0_ssbox_address1;
        else 
            cipher_0_ssbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    cipher_0_ssbox_address2_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_address2, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_address2 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_address2 <= grp_updateKey_fu_200_cipher_0_ssbox_address2;
        else 
            cipher_0_ssbox_address2 <= "XXXXXXXX";
        end if; 
    end process;


    cipher_0_ssbox_address3_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_address3, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_address3 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_address3 <= grp_updateKey_fu_200_cipher_0_ssbox_address3;
        else 
            cipher_0_ssbox_address3 <= "XXXXXXXX";
        end if; 
    end process;


    cipher_0_ssbox_ce0_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_ce0, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_ce0 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_ce0 <= grp_updateKey_fu_200_cipher_0_ssbox_ce0;
        else 
            cipher_0_ssbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_0_ssbox_ce1_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_ce1, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_ce1 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_ce1 <= grp_updateKey_fu_200_cipher_0_ssbox_ce1;
        else 
            cipher_0_ssbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_0_ssbox_ce2_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_ce2, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_ce2 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_ce2 <= grp_updateKey_fu_200_cipher_0_ssbox_ce2;
        else 
            cipher_0_ssbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    cipher_0_ssbox_ce3_assign_proc : process(grp_updateKey_fu_200_cipher_0_ssbox_ce3, ap_CS_fsm_state6, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            cipher_0_ssbox_ce3 <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cipher_0_ssbox_ce3 <= grp_updateKey_fu_200_cipher_0_ssbox_ce3;
        else 
            cipher_0_ssbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_read_assign_proc : process(ap_CS_fsm_state5, cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n)
    begin
        if ((not(((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cipherkeyStrm_read <= ap_const_logic_1;
        else 
            cipherkeyStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_write_assign_proc : process(ap_start, ap_CS_fsm_state1, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if ((not(((ap_const_logic_0 = IVStrm_full_n) or (cipherkeyStrm_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cipherkeyStrm_write <= ap_const_logic_1;
        else 
            cipherkeyStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_read_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ciphertextStrm_read, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ciphertextStrm_read <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ciphertextStrm_read;
        else 
            ciphertextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_write_assign_proc : process(grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ciphertextStrm_write <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_ciphertextStrm_write;
        else 
            ciphertextStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    crypto_buff_address0 <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_crypto_buff_address0;
    crypto_buff_ce0 <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_crypto_buff_ce0;
    ct_address0 <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_address0;
    ct_ce0 <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_ce0;
    ct_d0 <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_d0;
    ct_we0 <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ct_we0;

    endCiphertextStrm_din_assign_proc : process(grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_din, ap_CS_fsm_state8, endCiphertextStrm_full_n, ap_CS_fsm_state9)
    begin
        if (((endCiphertextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            endCiphertextStrm_din <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            endCiphertextStrm_din <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_din;
        else 
            endCiphertextStrm_din <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_din;
        end if; 
    end process;


    endCiphertextStrm_read_assign_proc : process(ap_CS_fsm_state10, grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_endCiphertextStrm_read, ap_CS_fsm_state12, endCiphertextStrm_empty_n)
    begin
        if (((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            endCiphertextStrm_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            endCiphertextStrm_read <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_endCiphertextStrm_read;
        else 
            endCiphertextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endCiphertextStrm_write_assign_proc : process(grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_write, ap_CS_fsm_state8, endCiphertextStrm_full_n, ap_CS_fsm_state9)
    begin
        if (((endCiphertextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            endCiphertextStrm_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            endCiphertextStrm_write <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_endCiphertextStrm_write;
        else 
            endCiphertextStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_din_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_din, ap_CS_fsm_state3, endPlaintextStrm_full_n, ap_CS_fsm_state4)
    begin
        if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            endPlaintextStrm_din <= ap_const_lv1_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            endPlaintextStrm_din <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_din;
        else 
            endPlaintextStrm_din <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_din;
        end if; 
    end process;


    endPlaintextStrm_read_assign_proc : process(ap_CS_fsm_state5, grp_enc_Pipeline_encryption_cbc_loop_fu_221_endPlaintextStrm_read, cipherkeyStrm_empty_n, IVStrm_empty_n, endPlaintextStrm_empty_n, ap_CS_fsm_state8)
    begin
        if ((not(((endPlaintextStrm_empty_n = ap_const_logic_0) or (cipherkeyStrm_empty_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_empty_n))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            endPlaintextStrm_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            endPlaintextStrm_read <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_endPlaintextStrm_read;
        else 
            endPlaintextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_write_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_write, ap_CS_fsm_state3, endPlaintextStrm_full_n, ap_CS_fsm_state4)
    begin
        if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            endPlaintextStrm_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            endPlaintextStrm_write <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_endPlaintextStrm_write;
        else 
            endPlaintextStrm_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_ap_start_reg;
    grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start <= grp_enc_Pipeline_VITIS_LOOP_75_4_fu_246_ap_start_reg;
    grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_ap_start_reg;
    grp_updateKey_fu_200_ap_start <= grp_updateKey_fu_200_ap_start_reg;

    plaintextStrm_read_assign_proc : process(grp_enc_Pipeline_encryption_cbc_loop_fu_221_plaintextStrm_read, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            plaintextStrm_read <= grp_enc_Pipeline_encryption_cbc_loop_fu_221_plaintextStrm_read;
        else 
            plaintextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    plaintextStrm_write_assign_proc : process(grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            plaintextStrm_write <= grp_enc_Pipeline_VITIS_LOOP_64_3_fu_192_plaintextStrm_write;
        else 
            plaintextStrm_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
