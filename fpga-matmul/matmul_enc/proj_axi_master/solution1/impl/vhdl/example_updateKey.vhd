-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example_updateKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_0_ssbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce0 : OUT STD_LOGIC;
    this_0_ssbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce1 : OUT STD_LOGIC;
    this_0_ssbox_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce2 : OUT STD_LOGIC;
    this_0_ssbox_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce3 : OUT STD_LOGIC;
    this_0_ssbox_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_1_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_0_ap_vld : OUT STD_LOGIC;
    this_1_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_1_ap_vld : OUT STD_LOGIC;
    this_1_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_2_ap_vld : OUT STD_LOGIC;
    this_1_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_3_ap_vld : OUT STD_LOGIC;
    this_1_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_4_ap_vld : OUT STD_LOGIC;
    this_1_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_5_ap_vld : OUT STD_LOGIC;
    this_1_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_6_ap_vld : OUT STD_LOGIC;
    this_1_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_7_ap_vld : OUT STD_LOGIC;
    this_1_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_8_ap_vld : OUT STD_LOGIC;
    this_1_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_9_ap_vld : OUT STD_LOGIC;
    this_1_10 : OUT STD_LOGIC_VECTOR (127 downto 0);
    this_1_10_ap_vld : OUT STD_LOGIC;
    cipherkey : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of example_updateKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1027_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Rcon_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal iter_V_reg_483 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_load_reg_490 : STD_LOGIC_VECTOR (127 downto 0);
    signal round_tmp_V_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_530 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln668_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln541_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln668_1_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln668_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln668_3_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_112 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_1_fu_442_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_sig_allocacmp_p_Val2_load : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal lhs_fu_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln840_fu_389_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_308_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_349_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_298_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_1_fu_400_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln628_fu_418_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_406_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1499_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1499_1_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1499_2_fu_432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1499_3_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component example_updateKey_Rcon_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component example_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    Rcon_U : component example_updateKey_Rcon_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);

    flow_control_loop_pipe_sequential_init_U : component example_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    lhs_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    lhs_fu_116 <= ap_const_lv4_1;
                elsif (((icmp_ln1027_fu_279_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    lhs_fu_116 <= add_ln840_fu_389_p2;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    p_Val2_s_fu_112 <= cipherkey;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    p_Val2_s_fu_112 <= p_Result_1_fu_442_p5;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                iter_V_reg_483 <= lhs_fu_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1027_fu_279_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_load_reg_490 <= ap_sig_allocacmp_p_Val2_load;
                round_tmp_V_reg_495 <= ap_sig_allocacmp_p_Val2_load(127 downto 96);
                tmp_3_reg_530 <= ap_sig_allocacmp_p_Val2_load(95 downto 64);
                tmp_s_reg_525 <= ap_sig_allocacmp_p_Val2_load(63 downto 32);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Rcon_address0 <= zext_ln541_fu_329_p1(4 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln840_fu_389_p2 <= std_logic_vector(unsigned(lhs_fu_116) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln1027_fu_279_p2)
    begin
        if (((icmp_ln1027_fu_279_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_Val2_load_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, p_Val2_s_fu_112, p_Result_1_fu_442_p5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_sig_allocacmp_p_Val2_load <= p_Result_1_fu_442_p5;
        else 
            ap_sig_allocacmp_p_Val2_load <= p_Val2_s_fu_112;
        end if; 
    end process;

    icmp_ln1027_fu_279_p2 <= "1" when (lhs_fu_116 = ap_const_lv4_B) else "0";
    p_Result_1_fu_442_p5 <= (((xor_ln1499_3_fu_437_p2 & xor_ln1499_2_fu_432_p2) & xor_ln1499_1_fu_427_p2) & xor_ln1499_fu_421_p2);
    p_Result_s_fu_406_p5 <= (((this_0_ssbox_q0 & this_0_ssbox_q1) & this_0_ssbox_q2) & ret_V_1_fu_400_p2);
    ret_V_1_fu_400_p2 <= (this_0_ssbox_q3 xor Rcon_q0);
    ret_V_fu_323_p2 <= std_logic_vector(unsigned(lhs_fu_116) + unsigned(ap_const_lv4_F));
    this_0_ssbox_address0 <= zext_ln668_3_fu_364_p1(8 - 1 downto 0);
    this_0_ssbox_address1 <= zext_ln668_2_fu_359_p1(8 - 1 downto 0);
    this_0_ssbox_address2 <= zext_ln668_1_fu_344_p1(8 - 1 downto 0);
    this_0_ssbox_address3 <= zext_ln668_fu_318_p1(8 - 1 downto 0);

    this_0_ssbox_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce0 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_0_ssbox_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce1 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_0_ssbox_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce2 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    this_0_ssbox_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce3 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    this_1_0 <= cipherkey;

    this_1_0_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            this_1_0_ap_vld <= ap_const_logic_1;
        else 
            this_1_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_1 <= p_Result_1_fu_442_p5;
    this_1_10 <= p_Result_1_fu_442_p5;

    this_1_10_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((iter_V_reg_483 = ap_const_lv4_0) or ((iter_V_reg_483 = ap_const_lv4_A) or ((iter_V_reg_483 = ap_const_lv4_B) or ((iter_V_reg_483 = ap_const_lv4_C) or ((iter_V_reg_483 = ap_const_lv4_D) or ((iter_V_reg_483 = ap_const_lv4_E) or (iter_V_reg_483 = ap_const_lv4_F))))))))) then 
            this_1_10_ap_vld <= ap_const_logic_1;
        else 
            this_1_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    this_1_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_1))) then 
            this_1_1_ap_vld <= ap_const_logic_1;
        else 
            this_1_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_2 <= p_Result_1_fu_442_p5;

    this_1_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_2))) then 
            this_1_2_ap_vld <= ap_const_logic_1;
        else 
            this_1_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_3 <= p_Result_1_fu_442_p5;

    this_1_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_3))) then 
            this_1_3_ap_vld <= ap_const_logic_1;
        else 
            this_1_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_4 <= p_Result_1_fu_442_p5;

    this_1_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_4))) then 
            this_1_4_ap_vld <= ap_const_logic_1;
        else 
            this_1_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_5 <= p_Result_1_fu_442_p5;

    this_1_5_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_5))) then 
            this_1_5_ap_vld <= ap_const_logic_1;
        else 
            this_1_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_6 <= p_Result_1_fu_442_p5;

    this_1_6_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_6))) then 
            this_1_6_ap_vld <= ap_const_logic_1;
        else 
            this_1_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_7 <= p_Result_1_fu_442_p5;

    this_1_7_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_7))) then 
            this_1_7_ap_vld <= ap_const_logic_1;
        else 
            this_1_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_8 <= p_Result_1_fu_442_p5;

    this_1_8_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_8))) then 
            this_1_8_ap_vld <= ap_const_logic_1;
        else 
            this_1_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    this_1_9 <= p_Result_1_fu_442_p5;

    this_1_9_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, iter_V_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (iter_V_reg_483 = ap_const_lv4_9))) then 
            this_1_9_ap_vld <= ap_const_logic_1;
        else 
            this_1_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_298_p4 <= ap_sig_allocacmp_p_Val2_load(103 downto 96);
    tmp_2_fu_334_p4 <= ap_sig_allocacmp_p_Val2_load(119 downto 112);
    tmp_4_fu_349_p4 <= ap_sig_allocacmp_p_Val2_load(127 downto 120);
    tmp_fu_308_p4 <= ap_sig_allocacmp_p_Val2_load(111 downto 104);
    trunc_ln628_fu_418_p1 <= p_Val2_load_reg_490(32 - 1 downto 0);
    xor_ln1499_1_fu_427_p2 <= (xor_ln1499_fu_421_p2 xor tmp_s_reg_525);
    xor_ln1499_2_fu_432_p2 <= (xor_ln1499_1_fu_427_p2 xor tmp_3_reg_530);
    xor_ln1499_3_fu_437_p2 <= (xor_ln1499_2_fu_432_p2 xor round_tmp_V_reg_495);
    xor_ln1499_fu_421_p2 <= (trunc_ln628_fu_418_p1 xor p_Result_s_fu_406_p5);
    zext_ln541_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_fu_323_p2),64));
    zext_ln668_1_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_334_p4),64));
    zext_ln668_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_349_p4),64));
    zext_ln668_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_298_p4),64));
    zext_ln668_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_308_p4),64));
end behav;
