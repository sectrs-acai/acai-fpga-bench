-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svd_top1 is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of svd_top1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "svd_top1_svd_top1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.410400,HLS_SYN_LAT=318304,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=27712,HLS_SYN_LUT=43286,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal S : STD_LOGIC_VECTOR (63 downto 0);
    signal U : STD_LOGIC_VECTOR (63 downto 0);
    signal V : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln58_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln69_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln69_reg_860_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln75_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_895_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln81_reg_930 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_930_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_272 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_reg_283 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_reg_294 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten7_reg_305 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_1_reg_316 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_1_reg_327 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten15_reg_338 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_2_reg_349 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_2_reg_360 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten23_reg_371 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_3_reg_382 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_3_reg_393 : STD_LOGIC_VECTOR (5 downto 0);
    signal V_read_reg_799 : STD_LOGIC_VECTOR (63 downto 0);
    signal U_read_reg_804 : STD_LOGIC_VECTOR (63 downto 0);
    signal S_read_reg_809 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_814 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln58_1_fu_432_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln58_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_825_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_1_fu_464_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln58_1_reg_829 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_fu_488_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_reg_834 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln61_reg_834_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln60_fu_494_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln69_1_fu_528_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln69_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_1_fu_560_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln69_1_reg_864 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln71_fu_595_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_load_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln75_1_fu_625_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state22_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln75_fu_631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_1_fu_657_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln75_1_reg_899 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln77_fu_692_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal u_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_i_load_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_1_fu_722_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal ap_block_state30_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state31_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state32_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln81_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln81_1_fu_754_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln81_1_reg_934 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln83_fu_789_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal v_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_i_load_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_ready : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state22 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state30 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal a_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_i_ce0 : STD_LOGIC;
    signal a_i_we0 : STD_LOGIC;
    signal a_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_i_ce1 : STD_LOGIC;
    signal a_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_i_ce0 : STD_LOGIC;
    signal s_i_we0 : STD_LOGIC;
    signal s_i_ce1 : STD_LOGIC;
    signal s_i_we1 : STD_LOGIC;
    signal u_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_i_ce0 : STD_LOGIC;
    signal u_i_we0 : STD_LOGIC;
    signal u_i_ce1 : STD_LOGIC;
    signal u_i_we1 : STD_LOGIC;
    signal v_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal v_i_ce0 : STD_LOGIC;
    signal v_i_we0 : STD_LOGIC;
    signal v_i_ce1 : STD_LOGIC;
    signal v_i_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_idle : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_r_phi_fu_287_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_1_phi_fu_320_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_2_phi_fu_353_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_3_phi_fu_386_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln61_1_fu_500_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_1_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln78_1_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_1_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln58_fu_422_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln69_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_614_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln81_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln72_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal bitcast_ln78_fu_698_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal bitcast_ln84_fu_795_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_412_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln60_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln61_fu_472_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln58_fu_456_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_476_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln61_fu_484_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln1_fu_508_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln71_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_fu_540_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln72_fu_568_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln69_fu_552_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_cast_fu_572_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln72_fu_580_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_fu_584_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln2_fu_605_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln77_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_637_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln78_fu_665_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln75_fu_649_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_fu_669_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln78_fu_677_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln78_fu_681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln3_fu_702_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln83_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln81_fu_734_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln84_fu_762_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln81_fu_746_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_cast_fu_766_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln84_fu_774_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln84_fu_778_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component svd_top1_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_we1 : OUT STD_LOGIC;
        S_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        U_ce0 : OUT STD_LOGIC;
        U_we0 : OUT STD_LOGIC;
        U_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        U_ce1 : OUT STD_LOGIC;
        U_we1 : OUT STD_LOGIC;
        U_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_we1 : OUT STD_LOGIC;
        V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_a_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_s_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        S : OUT STD_LOGIC_VECTOR (63 downto 0);
        U : OUT STD_LOGIC_VECTOR (63 downto 0);
        V : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svd_top1_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component svd_top1_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        A => A,
        S => S,
        U => U,
        V => V);

    gmem_m_axi_U : component svd_top1_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_addr_reg_814,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_400,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_400,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    a_i_U : component svd_top1_a_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_i_address0,
        ce0 => a_i_ce0,
        we0 => a_i_we0,
        d0 => a_i_d0,
        q0 => a_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address1,
        ce1 => a_i_ce1,
        q1 => a_i_q1);

    s_i_U : component svd_top1_s_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s_i_address0,
        ce0 => s_i_ce0,
        we0 => s_i_we0,
        d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_d0,
        q0 => s_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address1,
        ce1 => s_i_ce1,
        we1 => s_i_we1,
        d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_d1);

    u_i_U : component svd_top1_s_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => u_i_address0,
        ce0 => u_i_ce0,
        we0 => u_i_we0,
        d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_d0,
        q0 => u_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address1,
        ce1 => u_i_ce1,
        we1 => u_i_we1,
        d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_d1);

    v_i_U : component svd_top1_s_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v_i_address0,
        ce0 => v_i_ce0,
        we0 => v_i_we0,
        d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_d0,
        q0 => v_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address1,
        ce1 => v_i_ce1,
        we1 => v_i_we1,
        d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_d1);

    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404 : component svd_top1_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start,
        ap_done => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done,
        ap_idle => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_idle,
        ap_ready => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_ready,
        A_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address0,
        A_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce0,
        A_q0 => a_i_q0,
        A_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address1,
        A_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce1,
        A_q1 => a_i_q1,
        S_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address0,
        S_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce0,
        S_we0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we0,
        S_d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_d0,
        S_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address1,
        S_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce1,
        S_we1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we1,
        S_d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_d1,
        U_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address0,
        U_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce0,
        U_we0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we0,
        U_d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_d0,
        U_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address1,
        U_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce1,
        U_we1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we1,
        U_d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_d1,
        V_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address0,
        V_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce0,
        V_we0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we0,
        V_d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_d0,
        V_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address1,
        V_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce1,
        V_we1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we1,
        V_d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif (((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state22) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state22)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state22);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state30);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_1_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_534_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                c_1_reg_327 <= add_ln71_fu_595_p2;
            elsif (((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                c_1_reg_327 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c_2_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_631_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                c_2_reg_360 <= add_ln77_fu_692_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                c_2_reg_360 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c_3_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_728_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                c_3_reg_393 <= add_ln83_fu_789_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                c_3_reg_393 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_438_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_reg_294 <= add_ln60_fu_494_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_reg_294 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten15_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_631_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                indvar_flatten15_reg_338 <= add_ln75_1_fu_625_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                indvar_flatten15_reg_338 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_728_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                indvar_flatten23_reg_371 <= add_ln81_1_fu_722_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                indvar_flatten23_reg_371 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_534_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                indvar_flatten7_reg_305 <= add_ln69_1_fu_528_p2;
            elsif (((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvar_flatten7_reg_305 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_438_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_272 <= add_ln58_1_fu_432_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_272 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_1_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln69_reg_860 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                r_1_reg_316 <= select_ln69_1_reg_864;
            elsif (((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                r_1_reg_316 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_2_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln75_reg_895 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                r_2_reg_349 <= select_ln75_1_reg_899;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                r_2_reg_349 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_3_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln81_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                r_3_reg_382 <= select_ln81_1_reg_934;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                r_3_reg_382 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_reg_283 <= select_ln58_1_reg_829;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                r_reg_283 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                S_read_reg_809 <= S;
                U_read_reg_804 <= U;
                V_read_reg_799 <= V;
                gmem_addr_reg_814 <= sext_ln58_fu_422_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln61_reg_834 <= add_ln61_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln61_reg_834_pp0_iter1_reg <= add_ln61_reg_834;
                icmp_ln58_reg_825 <= icmp_ln58_fu_438_p2;
                icmp_ln58_reg_825_pp0_iter1_reg <= icmp_ln58_reg_825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_844 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln69_reg_860 <= icmp_ln69_fu_534_p2;
                icmp_ln69_reg_860_pp1_iter1_reg <= icmp_ln69_reg_860;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln75_reg_895 <= icmp_ln75_fu_631_p2;
                icmp_ln75_reg_895_pp2_iter1_reg <= icmp_ln75_reg_895;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln81_reg_930 <= icmp_ln81_fu_728_p2;
                icmp_ln81_reg_930_pp3_iter1_reg <= icmp_ln81_reg_930;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln69_reg_860 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                s_i_load_reg_879 <= s_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_438_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln58_1_reg_829 <= select_ln58_1_fu_464_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln69_fu_534_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                select_ln69_1_reg_864 <= select_ln69_1_fu_560_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_631_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln75_1_reg_899 <= select_ln75_1_fu_657_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_728_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                select_ln81_1_reg_934 <= select_ln81_1_fu_754_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln75_reg_895 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                u_i_load_reg_914 <= u_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln81_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                v_i_load_reg_949 <= v_i_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_enable_reg_pp1_iter2, ap_CS_fsm_state21, ap_CS_fsm_state17, ap_enable_reg_pp2_iter2, ap_CS_fsm_state29, ap_CS_fsm_state25, ap_enable_reg_pp3_iter2, ap_CS_fsm_state37, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp0_iter0, icmp_ln58_fu_438_p2, ap_enable_reg_pp1_iter0, icmp_ln69_fu_534_p2, ap_enable_reg_pp2_iter0, icmp_ln75_fu_631_p2, ap_enable_reg_pp3_iter0, icmp_ln81_fu_728_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln58_fu_438_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((icmp_ln58_fu_438_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln69_fu_534_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln69_fu_534_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln75_fu_631_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (icmp_ln75_fu_631_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln81_fu_728_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (icmp_ln81_fu_728_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    a_i_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address0, zext_ln61_1_fu_500_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            a_i_address0 <= zext_ln61_1_fu_500_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_address0;
        else 
            a_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_i_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce0;
        else 
            a_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_i_ce1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            a_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_A_ce1;
        else 
            a_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_i_d0 <= gmem_addr_read_reg_844;

    a_i_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_825_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln58_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_i_we0 <= ap_const_logic_1;
        else 
            a_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln58_1_fu_432_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_272) + unsigned(ap_const_lv11_1));
    add_ln58_fu_444_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_phi_fu_287_p4) + unsigned(ap_const_lv6_1));
    add_ln60_fu_494_p2 <= std_logic_vector(unsigned(select_ln58_fu_456_p3) + unsigned(ap_const_lv6_1));
    add_ln61_fu_488_p2 <= std_logic_vector(unsigned(tmp_cast_fu_476_p3) + unsigned(zext_ln61_fu_484_p1));
    add_ln69_1_fu_528_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_305) + unsigned(ap_const_lv11_1));
    add_ln69_fu_540_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_1_phi_fu_320_p4) + unsigned(ap_const_lv6_1));
    add_ln71_fu_595_p2 <= std_logic_vector(unsigned(select_ln69_fu_552_p3) + unsigned(ap_const_lv6_1));
    add_ln72_fu_584_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_572_p3) + unsigned(zext_ln72_fu_580_p1));
    add_ln75_1_fu_625_p2 <= std_logic_vector(unsigned(indvar_flatten15_reg_338) + unsigned(ap_const_lv11_1));
    add_ln75_fu_637_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_2_phi_fu_353_p4) + unsigned(ap_const_lv6_1));
    add_ln77_fu_692_p2 <= std_logic_vector(unsigned(select_ln75_fu_649_p3) + unsigned(ap_const_lv6_1));
    add_ln78_fu_681_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_669_p3) + unsigned(zext_ln78_fu_677_p1));
    add_ln81_1_fu_722_p2 <= std_logic_vector(unsigned(indvar_flatten23_reg_371) + unsigned(ap_const_lv11_1));
    add_ln81_fu_734_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_3_phi_fu_386_p4) + unsigned(ap_const_lv6_1));
    add_ln83_fu_789_p2 <= std_logic_vector(unsigned(select_ln81_fu_746_p3) + unsigned(ap_const_lv6_1));
    add_ln84_fu_778_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_766_p3) + unsigned(zext_ln84_fu_774_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state17 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(16);
    ap_CS_fsm_state25 <= ap_CS_fsm(18);
    ap_CS_fsm_state29 <= ap_CS_fsm(22);
    ap_CS_fsm_state37 <= ap_CS_fsm(28);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln58_reg_825, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln58_reg_825, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state16_io)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter2, ap_block_state16_io)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state24_io)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state24_io)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state32_io)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter2, ap_block_state32_io)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln58_reg_825, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln58_reg_825 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(icmp_ln69_reg_860_pp1_iter1_reg, gmem_WREADY)
    begin
                ap_block_state16_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln69_reg_860_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state16_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(icmp_ln75_reg_895_pp2_iter1_reg, gmem_WREADY)
    begin
                ap_block_state24_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln75_reg_895_pp2_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state24_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(icmp_ln81_reg_930_pp3_iter1_reg, gmem_WREADY)
    begin
                ap_block_state32_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln81_reg_930_pp3_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state32_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln58_fu_438_p2)
    begin
        if ((icmp_ln58_fu_438_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(icmp_ln69_fu_534_p2)
    begin
        if ((icmp_ln69_fu_534_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state22_assign_proc : process(icmp_ln75_fu_631_p2)
    begin
        if ((icmp_ln75_fu_631_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state22 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state30_assign_proc : process(icmp_ln81_fu_728_p2)
    begin
        if ((icmp_ln81_fu_728_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state37, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_r_1_phi_fu_320_p4_assign_proc : process(ap_block_pp1_stage0, icmp_ln69_reg_860, r_1_reg_316, ap_CS_fsm_pp1_stage0, select_ln69_1_reg_864, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln69_reg_860 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_r_1_phi_fu_320_p4 <= select_ln69_1_reg_864;
        else 
            ap_phi_mux_r_1_phi_fu_320_p4 <= r_1_reg_316;
        end if; 
    end process;


    ap_phi_mux_r_2_phi_fu_353_p4_assign_proc : process(ap_block_pp2_stage0, icmp_ln75_reg_895, r_2_reg_349, ap_CS_fsm_pp2_stage0, select_ln75_1_reg_899, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln75_reg_895 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_r_2_phi_fu_353_p4 <= select_ln75_1_reg_899;
        else 
            ap_phi_mux_r_2_phi_fu_353_p4 <= r_2_reg_349;
        end if; 
    end process;


    ap_phi_mux_r_3_phi_fu_386_p4_assign_proc : process(ap_block_pp3_stage0, icmp_ln81_reg_930, r_3_reg_382, ap_CS_fsm_pp3_stage0, select_ln81_1_reg_934, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln81_reg_930 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_r_3_phi_fu_386_p4 <= select_ln81_1_reg_934;
        else 
            ap_phi_mux_r_3_phi_fu_386_p4 <= r_3_reg_382;
        end if; 
    end process;


    ap_phi_mux_r_phi_fu_287_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln58_reg_825, r_reg_283, select_ln58_1_reg_829)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_r_phi_fu_287_p4 <= select_ln58_1_reg_829;
        else 
            ap_phi_mux_r_phi_fu_287_p4 <= r_reg_283;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln72_fu_601_p1 <= s_i_load_reg_879;
    bitcast_ln78_fu_698_p1 <= u_i_load_reg_914;
    bitcast_ln84_fu_795_p1 <= v_i_load_reg_949;

    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, gmem_ARREADY)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state25, gmem_AWREADY, sext_ln69_fu_517_p1, sext_ln75_fu_614_p1, sext_ln81_fu_711_p1)
    begin
        if ((gmem_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                gmem_AWADDR <= sext_ln81_fu_711_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                gmem_AWADDR <= sext_ln75_fu_614_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_AWADDR <= sext_ln69_fu_517_p1;
            else 
                gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state25, gmem_AWREADY)
    begin
        if ((((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state37, gmem_BVALID)
    begin
        if ((((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln58_reg_825, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln69_reg_860_pp1_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln75_reg_895_pp2_iter1_reg, ap_enable_reg_pp3_iter2, icmp_ln81_reg_930_pp3_iter1_reg, bitcast_ln72_fu_601_p1, ap_block_pp1_stage0_01001, bitcast_ln78_fu_698_p1, ap_block_pp2_stage0_01001, bitcast_ln84_fu_795_p1, ap_block_pp3_stage0_01001)
    begin
        if (((icmp_ln81_reg_930_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001))) then 
            gmem_WDATA <= bitcast_ln84_fu_795_p1;
        elsif (((icmp_ln75_reg_895_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
            gmem_WDATA <= bitcast_ln78_fu_698_p1;
        elsif (((icmp_ln69_reg_860_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_01001))) then 
            gmem_WDATA <= bitcast_ln72_fu_601_p1;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp1_iter2, icmp_ln69_reg_860_pp1_iter1_reg, ap_enable_reg_pp2_iter2, icmp_ln75_reg_895_pp2_iter1_reg, ap_enable_reg_pp3_iter2, icmp_ln81_reg_930_pp3_iter1_reg, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001)
    begin
        if ((((icmp_ln81_reg_930_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((icmp_ln75_reg_895_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((icmp_ln69_reg_860_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state12, ap_CS_fsm_state17, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state21, ap_CS_fsm_state29, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln58_reg_825)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, icmp_ln69_reg_860_pp1_iter1_reg, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0, icmp_ln75_reg_895_pp2_iter1_reg, ap_enable_reg_pp3_iter2, ap_block_pp3_stage0, icmp_ln81_reg_930_pp3_iter1_reg)
    begin
        if ((((icmp_ln81_reg_930_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((icmp_ln75_reg_895_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((icmp_ln69_reg_860_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_ap_start_reg;
    icmp_ln58_fu_438_p2 <= "1" when (indvar_flatten_reg_272 = ap_const_lv11_400) else "0";
    icmp_ln60_fu_450_p2 <= "1" when (c_reg_294 = ap_const_lv6_20) else "0";
    icmp_ln69_fu_534_p2 <= "1" when (indvar_flatten7_reg_305 = ap_const_lv11_400) else "0";
    icmp_ln71_fu_546_p2 <= "1" when (c_1_reg_327 = ap_const_lv6_20) else "0";
    icmp_ln75_fu_631_p2 <= "1" when (indvar_flatten15_reg_338 = ap_const_lv11_400) else "0";
    icmp_ln77_fu_643_p2 <= "1" when (c_2_reg_360 = ap_const_lv6_20) else "0";
    icmp_ln81_fu_728_p2 <= "1" when (indvar_flatten23_reg_371 = ap_const_lv11_400) else "0";
    icmp_ln83_fu_740_p2 <= "1" when (c_3_reg_393 = ap_const_lv6_20) else "0";

    s_i_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address0, zext_ln72_1_fu_590_p1)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            s_i_address0 <= zext_ln72_1_fu_590_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_address0;
        else 
            s_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s_i_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            s_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce0;
        else 
            s_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_i_ce1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_ce1;
        else 
            s_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_i_we0_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_i_we0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we0;
        else 
            s_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_i_we1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_i_we1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_S_we1;
        else 
            s_i_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln58_1_fu_464_p3 <= 
        add_ln58_fu_444_p2 when (icmp_ln60_fu_450_p2(0) = '1') else 
        ap_phi_mux_r_phi_fu_287_p4;
    select_ln58_fu_456_p3 <= 
        ap_const_lv6_0 when (icmp_ln60_fu_450_p2(0) = '1') else 
        c_reg_294;
    select_ln69_1_fu_560_p3 <= 
        add_ln69_fu_540_p2 when (icmp_ln71_fu_546_p2(0) = '1') else 
        ap_phi_mux_r_1_phi_fu_320_p4;
    select_ln69_fu_552_p3 <= 
        ap_const_lv6_0 when (icmp_ln71_fu_546_p2(0) = '1') else 
        c_1_reg_327;
    select_ln75_1_fu_657_p3 <= 
        add_ln75_fu_637_p2 when (icmp_ln77_fu_643_p2(0) = '1') else 
        ap_phi_mux_r_2_phi_fu_353_p4;
    select_ln75_fu_649_p3 <= 
        ap_const_lv6_0 when (icmp_ln77_fu_643_p2(0) = '1') else 
        c_2_reg_360;
    select_ln81_1_fu_754_p3 <= 
        add_ln81_fu_734_p2 when (icmp_ln83_fu_740_p2(0) = '1') else 
        ap_phi_mux_r_3_phi_fu_386_p4;
    select_ln81_fu_746_p3 <= 
        ap_const_lv6_0 when (icmp_ln83_fu_740_p2(0) = '1') else 
        c_3_reg_393;
        sext_ln58_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_412_p4),64));

        sext_ln69_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_508_p4),64));

        sext_ln75_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_605_p4),64));

        sext_ln81_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_702_p4),64));

    tmp_1_cast_fu_572_p3 <= (trunc_ln72_fu_568_p1 & ap_const_lv5_0);
    tmp_2_cast_fu_669_p3 <= (trunc_ln78_fu_665_p1 & ap_const_lv5_0);
    tmp_3_cast_fu_766_p3 <= (trunc_ln84_fu_762_p1 & ap_const_lv5_0);
    tmp_cast_fu_476_p3 <= (trunc_ln61_fu_472_p1 & ap_const_lv5_0);
    trunc_ln1_fu_508_p4 <= S_read_reg_809(63 downto 2);
    trunc_ln2_fu_605_p4 <= U_read_reg_804(63 downto 2);
    trunc_ln3_fu_702_p4 <= V_read_reg_799(63 downto 2);
    trunc_ln61_fu_472_p1 <= select_ln58_1_fu_464_p3(5 - 1 downto 0);
    trunc_ln72_fu_568_p1 <= select_ln69_1_fu_560_p3(5 - 1 downto 0);
    trunc_ln78_fu_665_p1 <= select_ln75_1_fu_657_p3(5 - 1 downto 0);
    trunc_ln84_fu_762_p1 <= select_ln81_1_fu_754_p3(5 - 1 downto 0);
    trunc_ln_fu_412_p4 <= A(63 downto 2);

    u_i_address0_assign_proc : process(ap_block_pp2_stage0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address0, zext_ln78_1_fu_687_p1)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            u_i_address0 <= zext_ln78_1_fu_687_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            u_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_address0;
        else 
            u_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    u_i_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_11001, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            u_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            u_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce0;
        else 
            u_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    u_i_ce1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            u_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_ce1;
        else 
            u_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    u_i_we0_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            u_i_we0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we0;
        else 
            u_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    u_i_we1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            u_i_we1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_U_we1;
        else 
            u_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_address0_assign_proc : process(ap_block_pp3_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address0, zext_ln84_1_fu_784_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            v_i_address0 <= zext_ln84_1_fu_784_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_address0;
        else 
            v_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v_i_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, ap_block_pp3_stage0_11001, ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            v_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce0;
        else 
            v_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_ce1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_ce1;
        else 
            v_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_we0_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v_i_we0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we0;
        else 
            v_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_we1_assign_proc : process(ap_CS_fsm_state13, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            v_i_we1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_404_V_we1;
        else 
            v_i_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln61_1_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_reg_834_pp0_iter1_reg),64));
    zext_ln61_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_fu_456_p3),10));
    zext_ln72_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_fu_584_p2),64));
    zext_ln72_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln69_fu_552_p3),10));
    zext_ln78_1_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln78_fu_681_p2),64));
    zext_ln78_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_649_p3),10));
    zext_ln84_1_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln84_fu_778_p2),64));
    zext_ln84_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln81_fu_746_p3),10));
end behav;
