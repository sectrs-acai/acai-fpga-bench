// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="svd_top1_svd_top1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.410400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=43892,HLS_SYN_LUT=60977,HLS_VERSION=2020_2}" *)

module svd_top1 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 57'd1;
parameter    ap_ST_fsm_state2 = 57'd2;
parameter    ap_ST_fsm_state3 = 57'd4;
parameter    ap_ST_fsm_state4 = 57'd8;
parameter    ap_ST_fsm_state5 = 57'd16;
parameter    ap_ST_fsm_state6 = 57'd32;
parameter    ap_ST_fsm_state7 = 57'd64;
parameter    ap_ST_fsm_state8 = 57'd128;
parameter    ap_ST_fsm_pp0_stage0 = 57'd256;
parameter    ap_ST_fsm_state12 = 57'd512;
parameter    ap_ST_fsm_state13 = 57'd1024;
parameter    ap_ST_fsm_state14 = 57'd2048;
parameter    ap_ST_fsm_state15 = 57'd4096;
parameter    ap_ST_fsm_state16 = 57'd8192;
parameter    ap_ST_fsm_state17 = 57'd16384;
parameter    ap_ST_fsm_state18 = 57'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 57'd65536;
parameter    ap_ST_fsm_state22 = 57'd131072;
parameter    ap_ST_fsm_state23 = 57'd262144;
parameter    ap_ST_fsm_pp2_stage0 = 57'd524288;
parameter    ap_ST_fsm_state26 = 57'd1048576;
parameter    ap_ST_fsm_state27 = 57'd2097152;
parameter    ap_ST_fsm_state28 = 57'd4194304;
parameter    ap_ST_fsm_state29 = 57'd8388608;
parameter    ap_ST_fsm_pp3_stage0 = 57'd16777216;
parameter    ap_ST_fsm_state32 = 57'd33554432;
parameter    ap_ST_fsm_pp4_stage0 = 57'd67108864;
parameter    ap_ST_fsm_state35 = 57'd134217728;
parameter    ap_ST_fsm_state36 = 57'd268435456;
parameter    ap_ST_fsm_state37 = 57'd536870912;
parameter    ap_ST_fsm_state38 = 57'd1073741824;
parameter    ap_ST_fsm_pp5_stage0 = 57'd2147483648;
parameter    ap_ST_fsm_state41 = 57'd4294967296;
parameter    ap_ST_fsm_pp6_stage0 = 57'd8589934592;
parameter    ap_ST_fsm_state45 = 57'd17179869184;
parameter    ap_ST_fsm_state46 = 57'd34359738368;
parameter    ap_ST_fsm_state47 = 57'd68719476736;
parameter    ap_ST_fsm_state48 = 57'd137438953472;
parameter    ap_ST_fsm_state49 = 57'd274877906944;
parameter    ap_ST_fsm_pp7_stage0 = 57'd549755813888;
parameter    ap_ST_fsm_state53 = 57'd1099511627776;
parameter    ap_ST_fsm_state54 = 57'd2199023255552;
parameter    ap_ST_fsm_state55 = 57'd4398046511104;
parameter    ap_ST_fsm_state56 = 57'd8796093022208;
parameter    ap_ST_fsm_state57 = 57'd17592186044416;
parameter    ap_ST_fsm_pp8_stage0 = 57'd35184372088832;
parameter    ap_ST_fsm_state61 = 57'd70368744177664;
parameter    ap_ST_fsm_state62 = 57'd140737488355328;
parameter    ap_ST_fsm_state63 = 57'd281474976710656;
parameter    ap_ST_fsm_state64 = 57'd562949953421312;
parameter    ap_ST_fsm_state65 = 57'd1125899906842624;
parameter    ap_ST_fsm_pp9_stage0 = 57'd2251799813685248;
parameter    ap_ST_fsm_state69 = 57'd4503599627370496;
parameter    ap_ST_fsm_state70 = 57'd9007199254740992;
parameter    ap_ST_fsm_state71 = 57'd18014398509481984;
parameter    ap_ST_fsm_state72 = 57'd36028797018963968;
parameter    ap_ST_fsm_state73 = 57'd72057594037927936;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 64;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 64;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (64 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [56:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] A;
wire   [63:0] S;
wire   [63:0] U;
wire   [63:0] V;
wire   [63:0] crypto;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln192_reg_1394;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln200_reg_1430;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state41;
reg    gmem_blk_n_W;
reg    ap_enable_reg_pp6_iter2;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln207_reg_1498;
reg   [0:0] icmp_ln207_reg_1498_pp6_iter1_reg;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state45;
reg    ap_enable_reg_pp7_iter2;
wire    ap_block_pp7_stage0;
reg   [0:0] icmp_ln216_reg_1523;
reg   [0:0] icmp_ln216_reg_1523_pp7_iter1_reg;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state53;
reg    ap_enable_reg_pp8_iter2;
wire    ap_block_pp8_stage0;
reg   [0:0] icmp_ln222_reg_1558;
reg   [0:0] icmp_ln222_reg_1558_pp8_iter1_reg;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state61;
reg    ap_enable_reg_pp9_iter2;
wire    ap_block_pp9_stage0;
reg   [0:0] icmp_ln228_reg_1593;
reg   [0:0] icmp_ln228_reg_1593_pp9_iter1_reg;
wire    ap_CS_fsm_state73;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg   [31:0] gmem_AWLEN;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [31:0] gmem_WDATA;
reg    gmem_ARVALID;
wire    gmem_ARREADY;
reg   [63:0] gmem_ARADDR;
reg   [31:0] gmem_ARLEN;
wire    gmem_RVALID;
reg    gmem_RREADY;
wire   [31:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [10:0] indvar_flatten_reg_568;
reg   [5:0] r_reg_579;
reg   [5:0] c_reg_590;
reg   [7:0] i_reg_601;
reg   [7:0] i_reg_601_pp1_iter1_reg;
wire    ap_block_state19_pp1_stage0_iter0;
reg    ap_block_state20_pp1_stage0_iter1;
wire    ap_block_state21_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [10:0] i_1_reg_613;
reg   [0:0] end_1_reg_624;
reg   [10:0] i_3_reg_634;
reg   [31:0] p_01_0_0_i9495_reg_645;
reg   [0:0] end_4_reg_658;
reg   [7:0] i_5_reg_668;
reg   [10:0] indvar_flatten8_reg_679;
reg   [5:0] r_1_reg_690;
reg   [5:0] c_1_reg_701;
reg   [10:0] indvar_flatten16_reg_712;
reg   [5:0] r_2_reg_723;
reg   [5:0] c_2_reg_734;
reg   [10:0] indvar_flatten24_reg_745;
reg   [5:0] r_3_reg_756;
reg   [5:0] c_3_reg_767;
reg   [63:0] crypto_read_reg_1291;
reg   [63:0] V_read_reg_1296;
reg   [63:0] U_read_reg_1301;
reg   [63:0] S_read_reg_1306;
reg   [63:0] gmem_addr_reg_1383;
wire   [10:0] add_ln192_1_fu_838_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln192_fu_844_p2;
reg   [0:0] icmp_ln192_reg_1394_pp0_iter1_reg;
wire   [5:0] select_ln192_1_fu_870_p3;
reg   [5:0] select_ln192_1_reg_1398;
wire   [9:0] add_ln195_fu_894_p2;
reg   [9:0] add_ln195_reg_1403;
reg   [9:0] add_ln195_reg_1403_pp0_iter1_reg;
wire   [5:0] add_ln194_fu_900_p2;
reg   [31:0] gmem_addr_read_reg_1413;
reg   [63:0] gmem_addr_1_reg_1418;
wire   [7:0] add_ln200_fu_934_p2;
reg   [7:0] add_ln200_reg_1425;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln200_fu_940_p2;
reg   [0:0] icmp_ln200_reg_1430_pp1_iter1_reg;
reg   [31:0] gmem_addr_1_read_reg_1434;
wire    ap_CS_fsm_state22;
wire  signed [127:0] sext_ln127_fu_951_p1;
reg   [127:0] sext_ln127_reg_1444;
wire    ap_CS_fsm_state23;
wire   [10:0] i_2_fu_955_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state24_pp2_stage0_iter0;
wire    ciphertextStrm_1_full_n;
reg    ciphertextStrm_1_write;
reg   [0:0] icmp_ln127_reg_1455;
reg   [0:0] endCiphertextStrm_1_din;
wire    endCiphertextStrm_1_full_n;
reg    endCiphertextStrm_1_write;
reg    ap_block_state25_pp2_stage0_iter1;
reg    ap_enable_reg_pp2_iter1;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln127_fu_961_p2;
wire    ap_CS_fsm_state29;
reg   [0:0] tmp_3_reg_1464;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] endPlaintextStrm_1_dout;
wire    endPlaintextStrm_1_empty_n;
reg    endPlaintextStrm_1_read;
reg   [0:0] ap_phi_mux_end_1_phi_fu_627_p4;
reg    ap_block_state30_pp3_stage0_iter0;
wire   [127:0] plaintextStrm_1_dout;
wire    plaintextStrm_1_empty_n;
reg    plaintextStrm_1_read;
reg    ap_block_state31_pp3_stage0_iter1;
reg    ap_enable_reg_pp3_iter1;
reg    ap_block_pp3_stage0_11001;
wire   [10:0] i_4_fu_967_p2;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter0;
wire    ap_block_state33_pp4_stage0_iter0;
wire    plaintextStrm_full_n;
reg    plaintextStrm_write;
reg   [0:0] icmp_ln73_reg_1474;
reg   [0:0] endPlaintextStrm_din;
wire    endPlaintextStrm_full_n;
reg    endPlaintextStrm_write;
reg    ap_block_state34_pp4_stage0_iter1;
reg    ap_enable_reg_pp4_iter1;
reg    ap_block_pp4_stage0_11001;
wire   [0:0] icmp_ln73_fu_973_p2;
wire    ap_CS_fsm_state38;
reg   [0:0] tmp_5_reg_1483;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter0;
wire   [0:0] endCiphertextStrm_dout;
wire    endCiphertextStrm_empty_n;
reg    endCiphertextStrm_read;
reg   [0:0] ap_phi_mux_end_4_phi_fu_661_p4;
reg    ap_block_state39_pp5_stage0_iter0;
wire   [127:0] ciphertextStrm_dout;
wire    ciphertextStrm_empty_n;
reg    ciphertextStrm_read;
reg    ap_block_state40_pp5_stage0_iter1;
reg    ap_enable_reg_pp5_iter1;
reg    ap_block_pp5_stage0_11001;
wire   [31:0] trunc_ln155_fu_979_p1;
wire   [7:0] add_ln207_fu_983_p2;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter0;
wire    ap_block_state42_pp6_stage0_iter0;
wire    ap_block_state43_pp6_stage0_iter1;
wire    ap_block_state44_pp6_stage0_iter2;
reg    ap_block_state44_io;
reg    ap_block_pp6_stage0_11001;
wire   [0:0] icmp_ln207_fu_989_p2;
wire   [31:0] ct_V_q0;
reg   [31:0] ct_V_load_reg_1507;
reg    ap_enable_reg_pp6_iter1;
wire   [10:0] add_ln216_1_fu_1020_p2;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter0;
wire    ap_block_state50_pp7_stage0_iter0;
wire    ap_block_state51_pp7_stage0_iter1;
wire    ap_block_state52_pp7_stage0_iter2;
reg    ap_block_state52_io;
reg    ap_block_pp7_stage0_11001;
wire   [0:0] icmp_ln216_fu_1026_p2;
wire   [5:0] select_ln216_1_fu_1052_p3;
reg   [5:0] select_ln216_1_reg_1527;
wire   [5:0] add_ln218_fu_1087_p2;
wire   [31:0] s_i_q0;
reg   [31:0] s_i_load_reg_1542;
wire   [10:0] add_ln222_1_fu_1117_p2;
wire    ap_CS_fsm_pp8_stage0;
reg    ap_enable_reg_pp8_iter0;
wire    ap_block_state58_pp8_stage0_iter0;
wire    ap_block_state59_pp8_stage0_iter1;
wire    ap_block_state60_pp8_stage0_iter2;
reg    ap_block_state60_io;
reg    ap_block_pp8_stage0_11001;
wire   [0:0] icmp_ln222_fu_1123_p2;
wire   [5:0] select_ln222_1_fu_1149_p3;
reg   [5:0] select_ln222_1_reg_1562;
wire   [5:0] add_ln224_fu_1184_p2;
wire   [31:0] u_i_q0;
reg   [31:0] u_i_load_reg_1577;
wire   [10:0] add_ln228_1_fu_1214_p2;
wire    ap_CS_fsm_pp9_stage0;
reg    ap_enable_reg_pp9_iter0;
wire    ap_block_state66_pp9_stage0_iter0;
wire    ap_block_state67_pp9_stage0_iter1;
wire    ap_block_state68_pp9_stage0_iter2;
reg    ap_block_state68_io;
reg    ap_block_pp9_stage0_11001;
wire   [0:0] icmp_ln228_fu_1220_p2;
wire   [5:0] select_ln228_1_fu_1246_p3;
reg   [5:0] select_ln228_1_reg_1597;
wire   [5:0] add_ln230_fu_1281_p2;
wire   [31:0] v_i_q0;
reg   [31:0] v_i_load_reg_1612;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state18;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state19;
reg    ap_enable_reg_pp1_iter2;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state24;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state30;
wire    ap_CS_fsm_state32;
wire    cipherkeyStrm_full_n;
reg    cipherkeyStrm_write;
wire    IVStrm_full_n;
reg    IVStrm_write;
reg    ap_block_state32;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state33;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state39;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state42;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_ready;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state50;
reg    ap_enable_reg_pp7_iter1;
reg    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state58;
reg    ap_enable_reg_pp8_iter1;
reg    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_exit_iter0_state66;
reg    ap_enable_reg_pp9_iter1;
reg   [9:0] a_i_address0;
reg    a_i_ce0;
reg    a_i_we0;
wire   [31:0] a_i_d0;
wire   [31:0] a_i_q0;
reg    a_i_ce1;
wire   [31:0] a_i_q1;
reg   [9:0] s_i_address0;
reg    s_i_ce0;
reg    s_i_we0;
reg    s_i_ce1;
reg    s_i_we1;
reg   [9:0] u_i_address0;
reg    u_i_ce0;
reg    u_i_we0;
reg    u_i_ce1;
reg    u_i_we1;
reg   [9:0] v_i_address0;
reg    v_i_ce0;
reg    v_i_we0;
reg    v_i_ce1;
reg    v_i_we1;
reg   [6:0] crypto_buff_V_address0;
reg    crypto_buff_V_ce0;
reg    crypto_buff_V_we0;
wire   [31:0] crypto_buff_V_q0;
reg   [6:0] ct_V_address0;
reg    ct_V_ce0;
reg    ct_V_we0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_idle;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0;
wire   [31:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d0;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1;
wire   [31:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d1;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0;
wire   [31:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d0;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1;
wire   [31:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d1;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0;
wire   [31:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d0;
wire   [9:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1;
wire    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1;
wire   [31:0] grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d1;
wire    grp_aesCtrDecrypt_128u_s_fu_786_ap_start;
wire    grp_aesCtrDecrypt_128u_s_fu_786_ap_done;
wire    grp_aesCtrDecrypt_128u_s_fu_786_ap_idle;
wire    grp_aesCtrDecrypt_128u_s_fu_786_ap_ready;
wire    grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read;
wire    grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read;
wire    grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read;
wire    grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read;
wire   [127:0] grp_aesCtrDecrypt_128u_s_fu_786_plaintext_din;
wire    grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write;
wire   [0:0] grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_din;
wire    grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write;
wire    grp_aesCtrEncrypt_128u_s_fu_802_ap_start;
wire    grp_aesCtrEncrypt_128u_s_fu_802_ap_done;
wire    grp_aesCtrEncrypt_128u_s_fu_802_ap_idle;
wire    grp_aesCtrEncrypt_128u_s_fu_802_ap_ready;
wire    grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read;
wire    grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read;
wire    grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read;
wire    grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read;
wire   [127:0] grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_din;
wire    grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write;
wire   [0:0] grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_din;
wire    grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write;
reg   [5:0] ap_phi_mux_r_phi_fu_583_p4;
reg   [7:0] ap_phi_mux_i_phi_fu_605_p4;
wire    ap_block_pp3_stage0;
wire    ap_block_pp5_stage0;
reg   [5:0] ap_phi_mux_r_1_phi_fu_694_p4;
reg   [5:0] ap_phi_mux_r_2_phi_fu_727_p4;
reg   [5:0] ap_phi_mux_r_3_phi_fu_760_p4;
reg    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg;
wire    ap_CS_fsm_state48;
reg    grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg;
wire    ap_CS_fsm_state27;
wire   [127:0] ciphertextStrm_1_dout;
wire    ciphertextStrm_1_empty_n;
reg    ciphertextStrm_1_read;
wire    ap_CS_fsm_state28;
wire   [0:0] endCiphertextStrm_1_dout;
wire    endCiphertextStrm_1_empty_n;
reg    endCiphertextStrm_1_read;
wire   [127:0] cipherkeyStrm_1_dout;
wire    cipherkeyStrm_1_empty_n;
reg    cipherkeyStrm_1_read;
wire   [127:0] IVStrm_1_dout;
wire    IVStrm_1_empty_n;
reg    IVStrm_1_read;
wire    plaintextStrm_1_full_n;
reg    plaintextStrm_1_write;
wire    endPlaintextStrm_1_full_n;
reg    endPlaintextStrm_1_write;
reg    grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg;
wire    ap_CS_fsm_state36;
wire   [127:0] plaintextStrm_dout;
wire    plaintextStrm_empty_n;
reg    plaintextStrm_read;
wire    ap_CS_fsm_state37;
wire   [0:0] endPlaintextStrm_dout;
wire    endPlaintextStrm_empty_n;
reg    endPlaintextStrm_read;
wire   [127:0] cipherkeyStrm_dout;
wire    cipherkeyStrm_empty_n;
reg    cipherkeyStrm_read;
wire   [127:0] IVStrm_dout;
wire    IVStrm_empty_n;
reg    IVStrm_read;
wire    ciphertextStrm_full_n;
reg    ciphertextStrm_write;
wire    endCiphertextStrm_full_n;
reg    endCiphertextStrm_write;
wire   [63:0] zext_ln195_1_fu_906_p1;
wire   [63:0] i_cast1_fu_946_p1;
wire   [63:0] i_5_cast2_fu_995_p1;
wire   [63:0] zext_ln219_1_fu_1082_p1;
wire   [63:0] zext_ln225_1_fu_1179_p1;
wire   [63:0] zext_ln231_1_fu_1276_p1;
wire  signed [63:0] sext_ln192_fu_828_p1;
wire  signed [63:0] sext_ln201_fu_923_p1;
wire  signed [63:0] sext_ln216_fu_1009_p1;
wire  signed [63:0] sext_ln222_fu_1106_p1;
wire  signed [63:0] sext_ln228_fu_1203_p1;
wire    ap_block_pp6_stage0_01001;
wire   [31:0] bitcast_ln219_fu_1093_p1;
wire    ap_block_pp7_stage0_01001;
wire   [31:0] bitcast_ln225_fu_1190_p1;
wire    ap_block_pp8_stage0_01001;
wire   [31:0] bitcast_ln231_fu_1287_p1;
wire    ap_block_pp9_stage0_01001;
reg    ap_block_state1;
wire    cipherkeyStrm_1_full_n;
reg    cipherkeyStrm_1_write;
wire    IVStrm_1_full_n;
reg    IVStrm_1_write;
reg    ap_block_state22;
reg    ap_block_pp2_stage0_01001;
wire    ap_CS_fsm_state26;
reg    ap_block_pp4_stage0_01001;
wire    ap_CS_fsm_state35;
wire   [61:0] trunc_ln_fu_818_p4;
wire   [0:0] icmp_ln194_fu_856_p2;
wire   [5:0] add_ln192_fu_850_p2;
wire   [4:0] trunc_ln195_fu_878_p1;
wire   [5:0] select_ln192_fu_862_p3;
wire   [9:0] tmp_1_cast_fu_882_p3;
wire   [9:0] zext_ln195_fu_890_p1;
wire   [61:0] trunc_ln201_1_fu_914_p4;
wire    ap_block_pp2_stage0;
wire    ap_block_pp4_stage0;
wire   [61:0] trunc_ln3_fu_1000_p4;
wire   [0:0] icmp_ln218_fu_1038_p2;
wire   [5:0] add_ln216_fu_1032_p2;
wire   [4:0] trunc_ln219_fu_1060_p1;
wire   [5:0] select_ln216_fu_1044_p3;
wire   [9:0] tmp_8_cast_fu_1064_p3;
wire   [9:0] zext_ln219_fu_1072_p1;
wire   [9:0] add_ln219_fu_1076_p2;
wire   [61:0] trunc_ln4_fu_1097_p4;
wire   [0:0] icmp_ln224_fu_1135_p2;
wire   [5:0] add_ln222_fu_1129_p2;
wire   [4:0] trunc_ln225_fu_1157_p1;
wire   [5:0] select_ln222_fu_1141_p3;
wire   [9:0] tmp_9_cast_fu_1161_p3;
wire   [9:0] zext_ln225_fu_1169_p1;
wire   [9:0] add_ln225_fu_1173_p2;
wire   [61:0] trunc_ln5_fu_1194_p4;
wire   [0:0] icmp_ln230_fu_1232_p2;
wire   [5:0] add_ln228_fu_1226_p2;
wire   [4:0] trunc_ln231_fu_1254_p1;
wire   [5:0] select_ln228_fu_1238_p3;
wire   [9:0] tmp_10_cast_fu_1258_p3;
wire   [9:0] zext_ln231_fu_1266_p1;
wire   [9:0] add_ln231_fu_1270_p2;
reg   [56:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
wire    ap_ce_reg;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 57'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg = 1'b0;
#0 grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg = 1'b0;
#0 grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg = 1'b0;
end

svd_top1_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle),
    .ap_return(32'd0),
    .A(A),
    .S(S),
    .U(U),
    .V(V),
    .crypto(crypto)
);

svd_top1_gmem_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_ARVALID),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(gmem_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(gmem_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(gmem_RREADY),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(gmem_AWLEN),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

svd_top1_a_i #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
a_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_i_address0),
    .ce0(a_i_ce0),
    .we0(a_i_we0),
    .d0(a_i_d0),
    .q0(a_i_q0),
    .address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address1),
    .ce1(a_i_ce1),
    .q1(a_i_q1)
);

svd_top1_s_i #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
s_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(s_i_address0),
    .ce0(s_i_ce0),
    .we0(s_i_we0),
    .d0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d0),
    .q0(s_i_q0),
    .address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address1),
    .ce1(s_i_ce1),
    .we1(s_i_we1),
    .d1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d1)
);

svd_top1_s_i #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
u_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(u_i_address0),
    .ce0(u_i_ce0),
    .we0(u_i_we0),
    .d0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d0),
    .q0(u_i_q0),
    .address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address1),
    .ce1(u_i_ce1),
    .we1(u_i_we1),
    .d1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d1)
);

svd_top1_s_i #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
v_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(v_i_address0),
    .ce0(v_i_ce0),
    .we0(v_i_we0),
    .d0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d0),
    .q0(v_i_q0),
    .address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address1),
    .ce1(v_i_ce1),
    .we1(v_i_we1),
    .d1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d1)
);

svd_top1_crypto_buff_V #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
crypto_buff_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(crypto_buff_V_address0),
    .ce0(crypto_buff_V_ce0),
    .we0(crypto_buff_V_we0),
    .d0(gmem_addr_1_read_reg_1434),
    .q0(crypto_buff_V_q0)
);

svd_top1_crypto_buff_V #(
    .DataWidth( 32 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
ct_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(ct_V_address0),
    .ce0(ct_V_ce0),
    .we0(ct_V_we0),
    .d0(p_01_0_0_i9495_reg_645),
    .q0(ct_V_q0)
);

svd_top1_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start),
    .ap_done(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done),
    .ap_idle(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_idle),
    .ap_ready(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_ready),
    .A_address0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0),
    .A_ce0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0),
    .A_q0(a_i_q0),
    .A_address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address1),
    .A_ce1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1),
    .A_q1(a_i_q1),
    .S_address0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0),
    .S_ce0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0),
    .S_we0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0),
    .S_d0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d0),
    .S_address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address1),
    .S_ce1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1),
    .S_we1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1),
    .S_d1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d1),
    .U_address0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0),
    .U_ce0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0),
    .U_we0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0),
    .U_d0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d0),
    .U_address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address1),
    .U_ce1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1),
    .U_we1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1),
    .U_d1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d1),
    .V_address0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0),
    .V_ce0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0),
    .V_we0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0),
    .V_d0(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d0),
    .V_address1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address1),
    .V_ce1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1),
    .V_we1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1),
    .V_d1(grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d1)
);

svd_top1_aesCtrDecrypt_128u_s grp_aesCtrDecrypt_128u_s_fu_786(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aesCtrDecrypt_128u_s_fu_786_ap_start),
    .ap_done(grp_aesCtrDecrypt_128u_s_fu_786_ap_done),
    .ap_idle(grp_aesCtrDecrypt_128u_s_fu_786_ap_idle),
    .ap_ready(grp_aesCtrDecrypt_128u_s_fu_786_ap_ready),
    .ciphertext_dout(ciphertextStrm_1_dout),
    .ciphertext_empty_n(ciphertextStrm_1_empty_n),
    .ciphertext_read(grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read),
    .ciphertext_e_dout(endCiphertextStrm_1_dout),
    .ciphertext_e_empty_n(endCiphertextStrm_1_empty_n),
    .ciphertext_e_read(grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read),
    .cipherkey_dout(cipherkeyStrm_1_dout),
    .cipherkey_empty_n(cipherkeyStrm_1_empty_n),
    .cipherkey_read(grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read),
    .IV_strm_dout(IVStrm_1_dout),
    .IV_strm_empty_n(IVStrm_1_empty_n),
    .IV_strm_read(grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read),
    .plaintext_din(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_din),
    .plaintext_full_n(plaintextStrm_1_full_n),
    .plaintext_write(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write),
    .plaintext_e_din(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_din),
    .plaintext_e_full_n(endPlaintextStrm_1_full_n),
    .plaintext_e_write(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write)
);

svd_top1_aesCtrEncrypt_128u_s grp_aesCtrEncrypt_128u_s_fu_802(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aesCtrEncrypt_128u_s_fu_802_ap_start),
    .ap_done(grp_aesCtrEncrypt_128u_s_fu_802_ap_done),
    .ap_idle(grp_aesCtrEncrypt_128u_s_fu_802_ap_idle),
    .ap_ready(grp_aesCtrEncrypt_128u_s_fu_802_ap_ready),
    .plaintext_dout(plaintextStrm_dout),
    .plaintext_empty_n(plaintextStrm_empty_n),
    .plaintext_read(grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read),
    .plaintext_e_dout(endPlaintextStrm_dout),
    .plaintext_e_empty_n(endPlaintextStrm_empty_n),
    .plaintext_e_read(grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read),
    .cipherkey_dout(cipherkeyStrm_dout),
    .cipherkey_empty_n(cipherkeyStrm_empty_n),
    .cipherkey_read(grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read),
    .initialization_vector_dout(IVStrm_dout),
    .initialization_vector_empty_n(IVStrm_empty_n),
    .initialization_vector_read(grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read),
    .ciphertext_din(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_din),
    .ciphertext_full_n(ciphertextStrm_full_n),
    .ciphertext_write(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write),
    .ciphertext_e_din(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_din),
    .ciphertext_e_full_n(endCiphertextStrm_full_n),
    .ciphertext_e_write(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write)
);

svd_top1_fifo_w128_d1034_A ciphertextStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_din),
    .if_full_n(ciphertextStrm_full_n),
    .if_write(ciphertextStrm_write),
    .if_dout(ciphertextStrm_dout),
    .if_empty_n(ciphertextStrm_empty_n),
    .if_read(ciphertextStrm_read)
);

svd_top1_fifo_w1_d1034_A endCiphertextStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_din),
    .if_full_n(endCiphertextStrm_full_n),
    .if_write(endCiphertextStrm_write),
    .if_dout(endCiphertextStrm_dout),
    .if_empty_n(endCiphertextStrm_empty_n),
    .if_read(endCiphertextStrm_read)
);

svd_top1_fifo_w128_d2_S cipherkeyStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(128'd149452120213688298009235146691947225697),
    .if_full_n(cipherkeyStrm_full_n),
    .if_write(cipherkeyStrm_write),
    .if_dout(cipherkeyStrm_dout),
    .if_empty_n(cipherkeyStrm_empty_n),
    .if_read(cipherkeyStrm_read)
);

svd_top1_fifo_w128_d2_S IVStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(128'd149452120213688298009235146691947225697),
    .if_full_n(IVStrm_full_n),
    .if_write(IVStrm_write),
    .if_dout(IVStrm_dout),
    .if_empty_n(IVStrm_empty_n),
    .if_read(IVStrm_read)
);

svd_top1_fifo_w128_d1034_A plaintextStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sext_ln127_reg_1444),
    .if_full_n(plaintextStrm_full_n),
    .if_write(plaintextStrm_write),
    .if_dout(plaintextStrm_dout),
    .if_empty_n(plaintextStrm_empty_n),
    .if_read(plaintextStrm_read)
);

svd_top1_fifo_w1_d1034_A endPlaintextStrm_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(endPlaintextStrm_din),
    .if_full_n(endPlaintextStrm_full_n),
    .if_write(endPlaintextStrm_write),
    .if_dout(endPlaintextStrm_dout),
    .if_empty_n(endPlaintextStrm_empty_n),
    .if_read(endPlaintextStrm_read)
);

svd_top1_fifo_w128_d1034_A ciphertextStrm_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sext_ln127_reg_1444),
    .if_full_n(ciphertextStrm_1_full_n),
    .if_write(ciphertextStrm_1_write),
    .if_dout(ciphertextStrm_1_dout),
    .if_empty_n(ciphertextStrm_1_empty_n),
    .if_read(ciphertextStrm_1_read)
);

svd_top1_fifo_w1_d1034_A endCiphertextStrm_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(endCiphertextStrm_1_din),
    .if_full_n(endCiphertextStrm_1_full_n),
    .if_write(endCiphertextStrm_1_write),
    .if_dout(endCiphertextStrm_1_dout),
    .if_empty_n(endCiphertextStrm_1_empty_n),
    .if_read(endCiphertextStrm_1_read)
);

svd_top1_fifo_w128_d2_S cipherkeyStrm_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(128'd149452120213688298009235146691947225697),
    .if_full_n(cipherkeyStrm_1_full_n),
    .if_write(cipherkeyStrm_1_write),
    .if_dout(cipherkeyStrm_1_dout),
    .if_empty_n(cipherkeyStrm_1_empty_n),
    .if_read(cipherkeyStrm_1_read)
);

svd_top1_fifo_w128_d2_S IVStrm_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(128'd149452120213688298009235146691947225697),
    .if_full_n(IVStrm_1_full_n),
    .if_write(IVStrm_1_write),
    .if_dout(IVStrm_1_dout),
    .if_empty_n(IVStrm_1_empty_n),
    .if_read(IVStrm_1_read)
);

svd_top1_fifo_w128_d1034_A plaintextStrm_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_din),
    .if_full_n(plaintextStrm_1_full_n),
    .if_write(plaintextStrm_1_write),
    .if_dout(plaintextStrm_1_dout),
    .if_empty_n(plaintextStrm_1_empty_n),
    .if_read(plaintextStrm_1_read)
);

svd_top1_fifo_w1_d1034_A endPlaintextStrm_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_din),
    .if_full_n(endPlaintextStrm_1_full_n),
    .if_write(endPlaintextStrm_1_write),
    .if_dout(endPlaintextStrm_1_dout),
    .if_empty_n(endPlaintextStrm_1_empty_n),
    .if_read(endPlaintextStrm_1_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state19)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state24) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state24);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state30) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((endPlaintextStrm_1_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state30) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state30);
        end else if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
        end else if (((endPlaintextStrm_1_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
            ap_enable_reg_pp3_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state33) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((~((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n)) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state33) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state33);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((~((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n)) & (1'b1 == ap_CS_fsm_state32))) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state39) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if (((endCiphertextStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp5_exit_iter0_state39) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state39);
        end else if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
        end else if (((endCiphertextStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
            ap_enable_reg_pp5_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp6_exit_iter0_state42) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state42)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state42);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp7_exit_iter0_state50) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49))) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state50)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state50);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if ((~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49))) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp8_exit_iter0_state58) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state58)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state58);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
            ap_enable_reg_pp8_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp9_exit_iter0_state66) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_subdone))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter0_state66)) begin
                ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state66);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
            ap_enable_reg_pp9_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg <= 1'b1;
        end else if ((grp_aesCtrDecrypt_128u_s_fu_786_ap_ready == 1'b1)) begin
            grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state36)) begin
            grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg <= 1'b1;
        end else if ((grp_aesCtrEncrypt_128u_s_fu_802_ap_ready == 1'b1)) begin
            grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state48)) begin
            grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg <= 1'b1;
        end else if ((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_ready == 1'b1)) begin
            grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_1026_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        c_1_reg_701 <= add_ln218_fu_1087_p2;
    end else if ((~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49))) begin
        c_1_reg_701 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_fu_1123_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        c_2_reg_734 <= add_ln224_fu_1184_p2;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        c_2_reg_734 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_1220_p2 == 1'd0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        c_3_reg_767 <= add_ln230_fu_1281_p2;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        c_3_reg_767 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln192_fu_844_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_reg_590 <= add_ln194_fu_900_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        c_reg_590 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (end_1_reg_624 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        end_1_reg_624 <= tmp_3_reg_1464;
    end else if (((endPlaintextStrm_1_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        end_1_reg_624 <= endPlaintextStrm_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b1) & (end_4_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        end_4_reg_658 <= tmp_5_reg_1483;
    end else if (((endCiphertextStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        end_4_reg_658 <= endCiphertextStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln127_fu_961_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        i_1_reg_613 <= i_2_fu_955_p2;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_1_reg_613 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_973_p2 == 1'd0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_3_reg_634 <= i_4_fu_967_p2;
    end else if ((~((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n)) & (1'b1 == ap_CS_fsm_state32))) begin
        i_3_reg_634 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        i_5_reg_668 <= 8'd0;
    end else if (((icmp_ln207_fu_989_p2 == 1'd0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        i_5_reg_668 <= add_ln207_fu_983_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        i_reg_601 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln200_reg_1430 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_reg_601 <= add_ln200_reg_1425;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_fu_1123_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        indvar_flatten16_reg_712 <= add_ln222_1_fu_1117_p2;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        indvar_flatten16_reg_712 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_1220_p2 == 1'd0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        indvar_flatten24_reg_745 <= add_ln228_1_fu_1214_p2;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        indvar_flatten24_reg_745 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_1026_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        indvar_flatten8_reg_679 <= add_ln216_1_fu_1020_p2;
    end else if ((~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49))) begin
        indvar_flatten8_reg_679 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln192_fu_844_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_568 <= add_ln192_1_fu_838_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_568 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (icmp_ln216_reg_1523 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        r_1_reg_690 <= select_ln216_1_reg_1527;
    end else if ((~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49))) begin
        r_1_reg_690 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (icmp_ln222_reg_1558 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        r_2_reg_723 <= select_ln222_1_reg_1562;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
        r_2_reg_723 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_reg_1593 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001) & (ap_enable_reg_pp9_iter1 == 1'b1))) begin
        r_3_reg_756 <= select_ln228_1_reg_1597;
    end else if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
        r_3_reg_756 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_reg_1394 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_reg_579 <= select_ln192_1_reg_1398;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        r_reg_579 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        S_read_reg_1306 <= S;
        U_read_reg_1301 <= U;
        V_read_reg_1296 <= V;
        crypto_read_reg_1291 <= crypto;
        gmem_addr_reg_1383 <= sext_ln192_fu_828_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln192_fu_844_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln195_reg_1403 <= add_ln195_fu_894_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln195_reg_1403_pp0_iter1_reg <= add_ln195_reg_1403;
        icmp_ln192_reg_1394 <= icmp_ln192_fu_844_p2;
        icmp_ln192_reg_1394_pp0_iter1_reg <= icmp_ln192_reg_1394;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln200_reg_1425 <= add_ln200_fu_934_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (icmp_ln207_reg_1498 == 1'd0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        ct_V_load_reg_1507 <= ct_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln200_reg_1430 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        gmem_addr_1_read_reg_1434 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_addr_1_reg_1418 <= sext_ln201_fu_923_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_reg_1394 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_addr_read_reg_1413 <= gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_reg_601_pp1_iter1_reg <= i_reg_601;
        icmp_ln200_reg_1430 <= icmp_ln200_fu_940_p2;
        icmp_ln200_reg_1430_pp1_iter1_reg <= icmp_ln200_reg_1430;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln127_reg_1455 <= icmp_ln127_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001))) begin
        icmp_ln207_reg_1498 <= icmp_ln207_fu_989_p2;
        icmp_ln207_reg_1498_pp6_iter1_reg <= icmp_ln207_reg_1498;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        icmp_ln216_reg_1523 <= icmp_ln216_fu_1026_p2;
        icmp_ln216_reg_1523_pp7_iter1_reg <= icmp_ln216_reg_1523;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        icmp_ln222_reg_1558 <= icmp_ln222_fu_1123_p2;
        icmp_ln222_reg_1558_pp8_iter1_reg <= icmp_ln222_reg_1558;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        icmp_ln228_reg_1593 <= icmp_ln228_fu_1220_p2;
        icmp_ln228_reg_1593_pp9_iter1_reg <= icmp_ln228_reg_1593;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln73_reg_1474 <= icmp_ln73_fu_973_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b1) & (end_4_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        p_01_0_0_i9495_reg_645 <= trunc_ln155_fu_979_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_reg_1523 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        s_i_load_reg_1542 <= s_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln192_fu_844_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln192_1_reg_1398 <= select_ln192_1_fu_870_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln216_fu_1026_p2 == 1'd0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        select_ln216_1_reg_1527 <= select_ln216_1_fu_1052_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_fu_1123_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        select_ln222_1_reg_1562 <= select_ln222_1_fu_1149_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_fu_1220_p2 == 1'd0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        select_ln228_1_reg_1597 <= select_ln228_1_fu_1246_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        sext_ln127_reg_1444 <= sext_ln127_fu_951_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        tmp_3_reg_1464 <= endPlaintextStrm_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        tmp_5_reg_1483 <= endCiphertextStrm_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln222_reg_1558 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        u_i_load_reg_1577 <= u_i_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln228_reg_1593 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        v_i_load_reg_1612 <= v_i_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        IVStrm_1_read = grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read;
    end else begin
        IVStrm_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((cipherkeyStrm_1_full_n == 1'b0) | (1'b0 == IVStrm_1_full_n)) & (1'b1 == ap_CS_fsm_state22))) begin
        IVStrm_1_write = 1'b1;
    end else begin
        IVStrm_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        IVStrm_read = grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read;
    end else begin
        IVStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n)) & (1'b1 == ap_CS_fsm_state32))) begin
        IVStrm_write = 1'b1;
    end else begin
        IVStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        a_i_address0 = zext_ln195_1_fu_906_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        a_i_address0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0;
    end else begin
        a_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        a_i_ce0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0;
    end else begin
        a_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        a_i_ce1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1;
    end else begin
        a_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln192_reg_1394_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_i_we0 = 1'b1;
    end else begin
        a_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln192_fu_844_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln200_fu_940_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln127_fu_961_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state24 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state24 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state30 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state30 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln73_fu_973_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state33 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state33 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state39 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state39 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln207_fu_989_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state42 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state42 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln216_fu_1026_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state50 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state50 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln222_fu_1123_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state58 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state58 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln228_fu_1220_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state66 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state66 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b0) & (ap_enable_reg_pp9_iter2 == 1'b0) & (ap_enable_reg_pp9_iter1 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (end_1_reg_624 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_end_1_phi_fu_627_p4 = tmp_3_reg_1464;
    end else begin
        ap_phi_mux_end_1_phi_fu_627_p4 = end_1_reg_624;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b1) & (end_4_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0))) begin
        ap_phi_mux_end_4_phi_fu_661_p4 = tmp_5_reg_1483;
    end else begin
        ap_phi_mux_end_4_phi_fu_661_p4 = end_4_reg_658;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln200_reg_1430 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_phi_fu_605_p4 = add_ln200_reg_1425;
    end else begin
        ap_phi_mux_i_phi_fu_605_p4 = i_reg_601;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b1) & (icmp_ln216_reg_1523 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        ap_phi_mux_r_1_phi_fu_694_p4 = select_ln216_1_reg_1527;
    end else begin
        ap_phi_mux_r_1_phi_fu_694_p4 = r_1_reg_690;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (icmp_ln222_reg_1558 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0))) begin
        ap_phi_mux_r_2_phi_fu_727_p4 = select_ln222_1_reg_1562;
    end else begin
        ap_phi_mux_r_2_phi_fu_727_p4 = r_2_reg_723;
    end
end

always @ (*) begin
    if (((icmp_ln228_reg_1593 == 1'd0) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0) & (ap_enable_reg_pp9_iter1 == 1'b1))) begin
        ap_phi_mux_r_3_phi_fu_760_p4 = select_ln228_1_reg_1597;
    end else begin
        ap_phi_mux_r_3_phi_fu_760_p4 = r_3_reg_756;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_reg_1394 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_r_phi_fu_583_p4 = select_ln192_1_reg_1398;
    end else begin
        ap_phi_mux_r_phi_fu_583_p4 = r_reg_579;
    end
end

always @ (*) begin
    if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        cipherkeyStrm_1_read = grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read;
    end else begin
        cipherkeyStrm_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((cipherkeyStrm_1_full_n == 1'b0) | (1'b0 == IVStrm_1_full_n)) & (1'b1 == ap_CS_fsm_state22))) begin
        cipherkeyStrm_1_write = 1'b1;
    end else begin
        cipherkeyStrm_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        cipherkeyStrm_read = grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read;
    end else begin
        cipherkeyStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n)) & (1'b1 == ap_CS_fsm_state32))) begin
        cipherkeyStrm_write = 1'b1;
    end else begin
        cipherkeyStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ciphertextStrm_1_read = grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read;
    end else begin
        ciphertextStrm_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln127_reg_1455 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ciphertextStrm_1_write = 1'b1;
    end else begin
        ciphertextStrm_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b1) & (end_4_reg_658 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001))) begin
        ciphertextStrm_read = 1'b1;
    end else begin
        ciphertextStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        ciphertextStrm_write = grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write;
    end else begin
        ciphertextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        crypto_buff_V_address0 = 64'd0;
    end else if (((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        crypto_buff_V_address0 = i_cast1_fu_946_p1;
    end else begin
        crypto_buff_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((~((cipherkeyStrm_1_full_n == 1'b0) | (1'b0 == IVStrm_1_full_n)) & (1'b1 == ap_CS_fsm_state22)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        crypto_buff_V_ce0 = 1'b1;
    end else begin
        crypto_buff_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln200_reg_1430_pp1_iter1_reg == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        crypto_buff_V_we0 = 1'b1;
    end else begin
        crypto_buff_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0))) begin
        ct_V_address0 = i_5_cast2_fu_995_p1;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        ct_V_address0 = 64'd0;
    end else begin
        ct_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)) | ((ap_enable_reg_pp6_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        ct_V_ce0 = 1'b1;
    end else begin
        ct_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        ct_V_we0 = 1'b1;
    end else begin
        ct_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((endCiphertextStrm_1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        endCiphertextStrm_1_din = 1'd1;
    end else if (((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln127_reg_1455 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_01001))) begin
        endCiphertextStrm_1_din = 1'd0;
    end else begin
        endCiphertextStrm_1_din = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        endCiphertextStrm_1_read = grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read;
    end else begin
        endCiphertextStrm_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((endCiphertextStrm_1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln127_reg_1455 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        endCiphertextStrm_1_write = 1'b1;
    end else begin
        endCiphertextStrm_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((((endCiphertextStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state38)) | ((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b0 == ap_block_pp5_stage0_11001)))) begin
        endCiphertextStrm_read = 1'b1;
    end else begin
        endCiphertextStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        endCiphertextStrm_write = grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write;
    end else begin
        endCiphertextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((((endPlaintextStrm_1_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        endPlaintextStrm_1_read = 1'b1;
    end else begin
        endPlaintextStrm_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        endPlaintextStrm_1_write = grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write;
    end else begin
        endPlaintextStrm_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        endPlaintextStrm_din = 1'd1;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln73_reg_1474 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001))) begin
        endPlaintextStrm_din = 1'd0;
    end else begin
        endPlaintextStrm_din = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        endPlaintextStrm_read = grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read;
    end else begin
        endPlaintextStrm_read = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln73_reg_1474 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35)))) begin
        endPlaintextStrm_write = 1'b1;
    end else begin
        endPlaintextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            gmem_ARADDR = sext_ln201_fu_923_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARADDR = gmem_addr_reg_1383;
        end else begin
            gmem_ARADDR = 'bx;
        end
    end else begin
        gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            gmem_ARLEN = 32'd128;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_ARLEN = 32'd1024;
        end else begin
            gmem_ARLEN = 'bx;
        end
    end else begin
        gmem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_ARVALID = 1'b1;
    end else begin
        gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((gmem_AWREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state61)) begin
            gmem_AWADDR = sext_ln228_fu_1203_p1;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            gmem_AWADDR = sext_ln222_fu_1106_p1;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            gmem_AWADDR = sext_ln216_fu_1009_p1;
        end else if ((1'b1 == ap_CS_fsm_state41)) begin
            gmem_AWADDR = gmem_addr_1_reg_1418;
        end else begin
            gmem_AWADDR = 'bx;
        end
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)))) begin
        gmem_AWLEN = 32'd1024;
    end else if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
        gmem_AWLEN = 32'd128;
    end else begin
        gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state61)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45)) | ((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65)) | ((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57)) | (~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln200_reg_1430 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_reg_1394 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_RREADY = 1'b1;
    end else begin
        gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln228_reg_1593_pp9_iter1_reg == 1'd0) & (ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_01001))) begin
        gmem_WDATA = bitcast_ln231_fu_1287_p1;
    end else if (((icmp_ln222_reg_1558_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_01001))) begin
        gmem_WDATA = bitcast_ln225_fu_1190_p1;
    end else if (((icmp_ln216_reg_1523_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_01001))) begin
        gmem_WDATA = bitcast_ln219_fu_1093_p1;
    end else if (((icmp_ln207_reg_1498_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_01001))) begin
        gmem_WDATA = ct_V_load_reg_1507;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln228_reg_1593_pp9_iter1_reg == 1'd0) & (ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001)) | ((icmp_ln222_reg_1558_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)) | ((icmp_ln216_reg_1523_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_11001)) | ((icmp_ln207_reg_1498_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state2))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state41))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state49))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln200_reg_1430 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln192_reg_1394 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln228_reg_1593_pp9_iter1_reg == 1'd0) & (ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0)) | ((icmp_ln222_reg_1558_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0)) | ((icmp_ln216_reg_1523_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0)) | ((icmp_ln207_reg_1498_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter1 == 1'b1) & (end_1_reg_624 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        plaintextStrm_1_read = 1'b1;
    end else begin
        plaintextStrm_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        plaintextStrm_1_write = grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write;
    end else begin
        plaintextStrm_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        plaintextStrm_read = grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read;
    end else begin
        plaintextStrm_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln73_reg_1474 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        plaintextStrm_write = 1'b1;
    end else begin
        plaintextStrm_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0))) begin
        s_i_address0 = zext_ln219_1_fu_1082_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        s_i_address0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0;
    end else begin
        s_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0) & (1'b0 == ap_block_pp7_stage0_11001))) begin
        s_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        s_i_ce0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0;
    end else begin
        s_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        s_i_ce1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1;
    end else begin
        s_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        s_i_we0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0;
    end else begin
        s_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        s_i_we1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1;
    end else begin
        s_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0))) begin
        u_i_address0 = zext_ln225_1_fu_1179_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        u_i_address0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0;
    end else begin
        u_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        u_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        u_i_ce0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0;
    end else begin
        u_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        u_i_ce1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1;
    end else begin
        u_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        u_i_we0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0;
    end else begin
        u_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        u_i_we1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1;
    end else begin
        u_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0))) begin
        v_i_address0 = zext_ln231_1_fu_1276_p1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        v_i_address0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0;
    end else begin
        v_i_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        v_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        v_i_ce0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0;
    end else begin
        v_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        v_i_ce1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1;
    end else begin
        v_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        v_i_we0 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0;
    end else begin
        v_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        v_i_we1 = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1;
    end else begin
        v_i_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln192_fu_844_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln192_fu_844_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln200_fu_940_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln200_fu_940_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((cipherkeyStrm_1_full_n == 1'b0) | (1'b0 == IVStrm_1_full_n)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((icmp_ln127_fu_961_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((icmp_ln127_fu_961_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((endCiphertextStrm_1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_aesCtrDecrypt_128u_s_fu_786_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((endPlaintextStrm_1_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if (~((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if (((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((icmp_ln73_fu_973_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((icmp_ln73_fu_973_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((endPlaintextStrm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (grp_aesCtrEncrypt_128u_s_fu_802_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((endCiphertextStrm_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_pp5_stage0 : begin
            if (~((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if (((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd1) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln207_fu_989_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (icmp_ln207_fu_989_p2 == 1'd1) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            if ((~((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done == 1'b0) | (gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((ap_enable_reg_pp7_iter1 == 1'b0) & (icmp_ln216_fu_1026_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) & ~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((ap_enable_reg_pp7_iter1 == 1'b0) & (icmp_ln216_fu_1026_p2 == 1'd1) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state57))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state57;
            end
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter1 == 1'b0) & (icmp_ln222_fu_1123_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) & ~((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter1 == 1'b0) & (icmp_ln222_fu_1123_p2 == 1'd1) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state61 : begin
            if (((gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state61))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state61;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state65))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((icmp_ln228_fu_1220_p2 == 1'd1) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)) & ~((ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((icmp_ln228_fu_1220_p2 == 1'd1) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)) | ((ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_i_d0 = gmem_addr_read_reg_1413;

assign add_ln192_1_fu_838_p2 = (indvar_flatten_reg_568 + 11'd1);

assign add_ln192_fu_850_p2 = (ap_phi_mux_r_phi_fu_583_p4 + 6'd1);

assign add_ln194_fu_900_p2 = (select_ln192_fu_862_p3 + 6'd1);

assign add_ln195_fu_894_p2 = (tmp_1_cast_fu_882_p3 + zext_ln195_fu_890_p1);

assign add_ln200_fu_934_p2 = (ap_phi_mux_i_phi_fu_605_p4 + 8'd1);

assign add_ln207_fu_983_p2 = (i_5_reg_668 + 8'd1);

assign add_ln216_1_fu_1020_p2 = (indvar_flatten8_reg_679 + 11'd1);

assign add_ln216_fu_1032_p2 = (ap_phi_mux_r_1_phi_fu_694_p4 + 6'd1);

assign add_ln218_fu_1087_p2 = (select_ln216_fu_1044_p3 + 6'd1);

assign add_ln219_fu_1076_p2 = (tmp_8_cast_fu_1064_p3 + zext_ln219_fu_1072_p1);

assign add_ln222_1_fu_1117_p2 = (indvar_flatten16_reg_712 + 11'd1);

assign add_ln222_fu_1129_p2 = (ap_phi_mux_r_2_phi_fu_727_p4 + 6'd1);

assign add_ln224_fu_1184_p2 = (select_ln222_fu_1141_p3 + 6'd1);

assign add_ln225_fu_1173_p2 = (tmp_9_cast_fu_1161_p3 + zext_ln225_fu_1169_p1);

assign add_ln228_1_fu_1214_p2 = (indvar_flatten24_reg_745 + 11'd1);

assign add_ln228_fu_1226_p2 = (ap_phi_mux_r_3_phi_fu_760_p4 + 6'd1);

assign add_ln230_fu_1281_p2 = (select_ln228_fu_1238_p3 + 6'd1);

assign add_ln231_fu_1270_p2 = (tmp_10_cast_fu_1258_p3 + zext_ln231_fu_1266_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln192_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln192_reg_1394 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((gmem_RVALID == 1'b0) & (icmp_ln200_reg_1430 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((gmem_RVALID == 1'b0) & (icmp_ln200_reg_1430 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((endCiphertextStrm_1_full_n == 1'b0) & (icmp_ln127_reg_1455 == 1'd0)) | ((icmp_ln127_reg_1455 == 1'd0) & (ciphertextStrm_1_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((endCiphertextStrm_1_full_n == 1'b0) & (icmp_ln127_reg_1455 == 1'd0)) | ((icmp_ln127_reg_1455 == 1'd0) & (ciphertextStrm_1_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((ap_enable_reg_pp2_iter1 == 1'b1) & (((endCiphertextStrm_1_full_n == 1'b0) & (icmp_ln127_reg_1455 == 1'd0)) | ((icmp_ln127_reg_1455 == 1'd0) & (ciphertextStrm_1_full_n == 1'b0))));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((ap_enable_reg_pp3_iter1 == 1'b1) & (plaintextStrm_1_empty_n == 1'b0) & (end_1_reg_624 == 1'd0)) | ((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd0) & (endPlaintextStrm_1_empty_n == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((ap_enable_reg_pp3_iter1 == 1'b1) & (plaintextStrm_1_empty_n == 1'b0) & (end_1_reg_624 == 1'd0)) | ((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd0) & (endPlaintextStrm_1_empty_n == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1)));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_01001 = ((ap_enable_reg_pp4_iter1 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (icmp_ln73_reg_1474 == 1'd0)) | ((icmp_ln73_reg_1474 == 1'd0) & (plaintextStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((ap_enable_reg_pp4_iter1 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (icmp_ln73_reg_1474 == 1'd0)) | ((icmp_ln73_reg_1474 == 1'd0) & (plaintextStrm_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((ap_enable_reg_pp4_iter1 == 1'b1) & (((endPlaintextStrm_full_n == 1'b0) & (icmp_ln73_reg_1474 == 1'd0)) | ((icmp_ln73_reg_1474 == 1'd0) & (plaintextStrm_full_n == 1'b0))));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = (((ap_enable_reg_pp5_iter1 == 1'b1) & (ciphertextStrm_empty_n == 1'b0) & (end_4_reg_658 == 1'd0)) | ((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd0) & (endCiphertextStrm_empty_n == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = (((ap_enable_reg_pp5_iter1 == 1'b1) & (ciphertextStrm_empty_n == 1'b0) & (end_4_reg_658 == 1'd0)) | ((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd0) & (endCiphertextStrm_empty_n == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1)));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp6_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((1'b1 == ap_block_state44_io) & (ap_enable_reg_pp6_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((1'b1 == ap_block_state44_io) & (ap_enable_reg_pp6_iter2 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp7_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_11001 = ((1'b1 == ap_block_state52_io) & (ap_enable_reg_pp7_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = ((1'b1 == ap_block_state52_io) & (ap_enable_reg_pp7_iter2 == 1'b1));
end

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp8_stage0_11001 = ((1'b1 == ap_block_state60_io) & (ap_enable_reg_pp8_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp8_stage0_subdone = ((1'b1 == ap_block_state60_io) & (ap_enable_reg_pp8_iter2 == 1'b1));
end

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp9_stage0_11001 = ((1'b1 == ap_block_state68_io) & (ap_enable_reg_pp9_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp9_stage0_subdone = ((1'b1 == ap_block_state68_io) & (ap_enable_reg_pp9_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln192_reg_1394 == 1'd0));
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp1_stage0_iter1 = ((gmem_RVALID == 1'b0) & (icmp_ln200_reg_1430 == 1'd0));
end

assign ap_block_state21_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22 = ((cipherkeyStrm_1_full_n == 1'b0) | (1'b0 == IVStrm_1_full_n));
end

assign ap_block_state24_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_pp2_stage0_iter1 = (((endCiphertextStrm_1_full_n == 1'b0) & (icmp_ln127_reg_1455 == 1'd0)) | ((icmp_ln127_reg_1455 == 1'd0) & (ciphertextStrm_1_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state30_pp3_stage0_iter0 = ((ap_phi_mux_end_1_phi_fu_627_p4 == 1'd0) & (endPlaintextStrm_1_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state31_pp3_stage0_iter1 = ((plaintextStrm_1_empty_n == 1'b0) & (end_1_reg_624 == 1'd0));
end

always @ (*) begin
    ap_block_state32 = ((cipherkeyStrm_full_n == 1'b0) | (1'b0 == IVStrm_full_n));
end

assign ap_block_state33_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state34_pp4_stage0_iter1 = (((endPlaintextStrm_full_n == 1'b0) & (icmp_ln73_reg_1474 == 1'd0)) | ((icmp_ln73_reg_1474 == 1'd0) & (plaintextStrm_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state39_pp5_stage0_iter0 = ((ap_phi_mux_end_4_phi_fu_661_p4 == 1'd0) & (endCiphertextStrm_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state40_pp5_stage0_iter1 = ((ciphertextStrm_empty_n == 1'b0) & (end_4_reg_658 == 1'd0));
end

assign ap_block_state42_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp6_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state44_io = ((gmem_WREADY == 1'b0) & (icmp_ln207_reg_1498_pp6_iter1_reg == 1'd0));
end

assign ap_block_state44_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp7_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state52_io = ((gmem_WREADY == 1'b0) & (icmp_ln216_reg_1523_pp7_iter1_reg == 1'd0));
end

assign ap_block_state52_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60_io = ((gmem_WREADY == 1'b0) & (icmp_ln222_reg_1558_pp8_iter1_reg == 1'd0));
end

assign ap_block_state60_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp9_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state68_io = ((gmem_WREADY == 1'b0) & (icmp_ln228_reg_1593_pp9_iter1_reg == 1'd0));
end

assign ap_block_state68_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln219_fu_1093_p1 = s_i_load_reg_1542;

assign bitcast_ln225_fu_1190_p1 = u_i_load_reg_1577;

assign bitcast_ln231_fu_1287_p1 = v_i_load_reg_1612;

assign grp_aesCtrDecrypt_128u_s_fu_786_ap_start = grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg;

assign grp_aesCtrEncrypt_128u_s_fu_802_ap_start = grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg;

assign grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start = grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg;

assign i_2_fu_955_p2 = (i_1_reg_613 + 11'd1);

assign i_4_fu_967_p2 = (i_3_reg_634 + 11'd1);

assign i_5_cast2_fu_995_p1 = i_5_reg_668;

assign i_cast1_fu_946_p1 = i_reg_601_pp1_iter1_reg;

assign icmp_ln127_fu_961_p2 = ((i_1_reg_613 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln192_fu_844_p2 = ((indvar_flatten_reg_568 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln194_fu_856_p2 = ((c_reg_590 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_940_p2 = ((ap_phi_mux_i_phi_fu_605_p4 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln207_fu_989_p2 = ((i_5_reg_668 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln216_fu_1026_p2 = ((indvar_flatten8_reg_679 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln218_fu_1038_p2 = ((c_1_reg_701 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln222_fu_1123_p2 = ((indvar_flatten16_reg_712 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln224_fu_1135_p2 = ((c_2_reg_734 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln228_fu_1220_p2 = ((indvar_flatten24_reg_745 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln230_fu_1232_p2 = ((c_3_reg_767 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_973_p2 = ((i_3_reg_634 == 11'd1024) ? 1'b1 : 1'b0);

assign select_ln192_1_fu_870_p3 = ((icmp_ln194_fu_856_p2[0:0] == 1'b1) ? add_ln192_fu_850_p2 : ap_phi_mux_r_phi_fu_583_p4);

assign select_ln192_fu_862_p3 = ((icmp_ln194_fu_856_p2[0:0] == 1'b1) ? 6'd0 : c_reg_590);

assign select_ln216_1_fu_1052_p3 = ((icmp_ln218_fu_1038_p2[0:0] == 1'b1) ? add_ln216_fu_1032_p2 : ap_phi_mux_r_1_phi_fu_694_p4);

assign select_ln216_fu_1044_p3 = ((icmp_ln218_fu_1038_p2[0:0] == 1'b1) ? 6'd0 : c_1_reg_701);

assign select_ln222_1_fu_1149_p3 = ((icmp_ln224_fu_1135_p2[0:0] == 1'b1) ? add_ln222_fu_1129_p2 : ap_phi_mux_r_2_phi_fu_727_p4);

assign select_ln222_fu_1141_p3 = ((icmp_ln224_fu_1135_p2[0:0] == 1'b1) ? 6'd0 : c_2_reg_734);

assign select_ln228_1_fu_1246_p3 = ((icmp_ln230_fu_1232_p2[0:0] == 1'b1) ? add_ln228_fu_1226_p2 : ap_phi_mux_r_3_phi_fu_760_p4);

assign select_ln228_fu_1238_p3 = ((icmp_ln230_fu_1232_p2[0:0] == 1'b1) ? 6'd0 : c_3_reg_767);

assign sext_ln127_fu_951_p1 = $signed(crypto_buff_V_q0);

assign sext_ln192_fu_828_p1 = $signed(trunc_ln_fu_818_p4);

assign sext_ln201_fu_923_p1 = $signed(trunc_ln201_1_fu_914_p4);

assign sext_ln216_fu_1009_p1 = $signed(trunc_ln3_fu_1000_p4);

assign sext_ln222_fu_1106_p1 = $signed(trunc_ln4_fu_1097_p4);

assign sext_ln228_fu_1203_p1 = $signed(trunc_ln5_fu_1194_p4);

assign tmp_10_cast_fu_1258_p3 = {{trunc_ln231_fu_1254_p1}, {5'd0}};

assign tmp_1_cast_fu_882_p3 = {{trunc_ln195_fu_878_p1}, {5'd0}};

assign tmp_8_cast_fu_1064_p3 = {{trunc_ln219_fu_1060_p1}, {5'd0}};

assign tmp_9_cast_fu_1161_p3 = {{trunc_ln225_fu_1157_p1}, {5'd0}};

assign trunc_ln155_fu_979_p1 = ciphertextStrm_dout[31:0];

assign trunc_ln195_fu_878_p1 = select_ln192_1_fu_870_p3[4:0];

assign trunc_ln201_1_fu_914_p4 = {{crypto_read_reg_1291[63:2]}};

assign trunc_ln219_fu_1060_p1 = select_ln216_1_fu_1052_p3[4:0];

assign trunc_ln225_fu_1157_p1 = select_ln222_1_fu_1149_p3[4:0];

assign trunc_ln231_fu_1254_p1 = select_ln228_1_fu_1246_p3[4:0];

assign trunc_ln3_fu_1000_p4 = {{S_read_reg_1306[63:2]}};

assign trunc_ln4_fu_1097_p4 = {{U_read_reg_1301[63:2]}};

assign trunc_ln5_fu_1194_p4 = {{V_read_reg_1296[63:2]}};

assign trunc_ln_fu_818_p4 = {{A[63:2]}};

assign zext_ln195_1_fu_906_p1 = add_ln195_reg_1403_pp0_iter1_reg;

assign zext_ln195_fu_890_p1 = select_ln192_fu_862_p3;

assign zext_ln219_1_fu_1082_p1 = add_ln219_fu_1076_p2;

assign zext_ln219_fu_1072_p1 = select_ln216_fu_1044_p3;

assign zext_ln225_1_fu_1179_p1 = add_ln225_fu_1173_p2;

assign zext_ln225_fu_1169_p1 = select_ln222_fu_1141_p3;

assign zext_ln231_1_fu_1276_p1 = add_ln231_fu_1270_p2;

assign zext_ln231_fu_1266_p1 = select_ln228_fu_1238_p3;

endmodule //svd_top1
