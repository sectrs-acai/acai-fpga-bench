-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svd_top1_updateKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    this_0_ssbox_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce0 : OUT STD_LOGIC;
    this_0_ssbox_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce1 : OUT STD_LOGIC;
    this_0_ssbox_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_address2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce2 : OUT STD_LOGIC;
    this_0_ssbox_q2 : IN STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_address3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    this_0_ssbox_ce3 : OUT STD_LOGIC;
    this_0_ssbox_q3 : IN STD_LOGIC_VECTOR (7 downto 0);
    cipherkey : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (127 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of svd_top1_updateKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Rcon_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal iter_V_reg_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_210 : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_ln878_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln691_fu_297_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln691_reg_631 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Result_7_fu_379_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_iter_V_phi_fu_202_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_Val2_s_phi_fu_213_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln708_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln534_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_1_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_2_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_3_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lastRound_V_fu_90 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal lastRound_V_1_fu_94 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_2_fu_98 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_3_fu_102 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_4_fu_106 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_5_fu_110 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_6_fu_114 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_7_fu_118 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_8_fu_122 : STD_LOGIC_VECTOR (127 downto 0);
    signal lastRound_V_9_fu_126 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Result_s_fu_236_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_fu_251_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_51_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_277_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_226_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_1_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln674_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_6_fu_319_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1350_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_4_fu_341_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1350_1_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_357_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1350_2_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal round_tmp_V_fu_303_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln1350_3_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component svd_top1_updateKey_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Rcon_U : component svd_top1_updateKey_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    iter_V_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln878_reg_602 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                iter_V_reg_198 <= add_ln691_reg_631;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                iter_V_reg_198 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln878_reg_602 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_Val2_s_reg_210 <= p_Result_7_fu_379_p5;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_210 <= cipherkey;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln878_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln691_reg_631 <= add_ln691_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln878_reg_602 <= icmp_ln878_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_1_fu_94 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_2_fu_98 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_3_fu_102 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_4_fu_106 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_5_fu_110 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_6_fu_114 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_7_fu_118 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_8_fu_122 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (iter_V_reg_198 = ap_const_lv4_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                lastRound_V_9_fu_126 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((iter_V_reg_198 = ap_const_lv4_0) or ((iter_V_reg_198 = ap_const_lv4_A) or ((iter_V_reg_198 = ap_const_lv4_B) or ((iter_V_reg_198 = ap_const_lv4_C) or ((iter_V_reg_198 = ap_const_lv4_D) or ((iter_V_reg_198 = ap_const_lv4_E) or (iter_V_reg_198 = ap_const_lv4_F))))))))) then
                lastRound_V_fu_90 <= p_Result_7_fu_379_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln878_fu_220_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln878_fu_220_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln878_fu_220_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Rcon_address0 <= zext_ln534_fu_257_p1(4 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln691_fu_297_p2 <= std_logic_vector(unsigned(ap_phi_mux_iter_V_phi_fu_202_p4) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln878_fu_220_p2)
    begin
        if ((icmp_ln878_fu_220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_iter_V_phi_fu_202_p4_assign_proc : process(iter_V_reg_198, icmp_ln878_reg_602, ap_CS_fsm_pp0_stage0, add_ln691_reg_631, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln878_reg_602 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_iter_V_phi_fu_202_p4 <= add_ln691_reg_631;
        else 
            ap_phi_mux_iter_V_phi_fu_202_p4 <= iter_V_reg_198;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_213_p4_assign_proc : process(p_Val2_s_reg_210, icmp_ln878_reg_602, ap_CS_fsm_pp0_stage0, p_Result_7_fu_379_p5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln878_reg_602 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_p_Val2_s_phi_fu_213_p4 <= p_Result_7_fu_379_p5;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_213_p4 <= p_Val2_s_reg_210;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= cipherkey;
    ap_return_1 <= lastRound_V_3_fu_102;
    ap_return_10 <= lastRound_V_fu_90;
    ap_return_2 <= lastRound_V_6_fu_114;
    ap_return_3 <= lastRound_V_9_fu_126;
    ap_return_4 <= lastRound_V_8_fu_122;
    ap_return_5 <= lastRound_V_7_fu_118;
    ap_return_6 <= lastRound_V_5_fu_110;
    ap_return_7 <= lastRound_V_4_fu_106;
    ap_return_8 <= lastRound_V_2_fu_98;
    ap_return_9 <= lastRound_V_1_fu_94;
    icmp_ln878_fu_220_p2 <= "1" when (ap_phi_mux_iter_V_phi_fu_202_p4 = ap_const_lv4_B) else "0";
    p_Result_1_fu_277_p4 <= ap_phi_mux_p_Val2_s_phi_fu_213_p4(127 downto 120);
    p_Result_4_fu_341_p4 <= p_Val2_s_reg_210(63 downto 32);
    p_Result_5_fu_357_p4 <= p_Val2_s_reg_210(95 downto 64);
    p_Result_6_fu_319_p5 <= (((this_0_ssbox_q0 & this_0_ssbox_q1) & this_0_ssbox_q2) & ret_1_fu_313_p2);
    p_Result_7_fu_379_p5 <= (((xor_ln1350_3_fu_373_p2 & xor_ln1350_2_fu_367_p2) & xor_ln1350_1_fu_351_p2) & xor_ln1350_fu_335_p2);
    p_Result_s_51_fu_262_p4 <= ap_phi_mux_p_Val2_s_phi_fu_213_p4(119 downto 112);
    p_Result_s_fu_236_p4 <= ap_phi_mux_p_Val2_s_phi_fu_213_p4(111 downto 104);
    ret_1_fu_313_p2 <= (this_0_ssbox_q3 xor Rcon_q0);
    ret_fu_251_p2 <= std_logic_vector(unsigned(ap_phi_mux_iter_V_phi_fu_202_p4) + unsigned(ap_const_lv4_F));
    round_tmp_V_fu_303_p4 <= p_Val2_s_reg_210(127 downto 96);
    this_0_ssbox_address0 <= zext_ln708_3_fu_292_p1(8 - 1 downto 0);
    this_0_ssbox_address1 <= zext_ln708_2_fu_287_p1(8 - 1 downto 0);
    this_0_ssbox_address2 <= zext_ln708_1_fu_272_p1(8 - 1 downto 0);
    this_0_ssbox_address3 <= zext_ln708_fu_246_p1(8 - 1 downto 0);

    this_0_ssbox_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce0 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    this_0_ssbox_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce1 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    this_0_ssbox_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce2 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    this_0_ssbox_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            this_0_ssbox_ce3 <= ap_const_logic_1;
        else 
            this_0_ssbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_226_p4 <= ap_phi_mux_p_Val2_s_phi_fu_213_p4(103 downto 96);
    trunc_ln674_fu_331_p1 <= p_Val2_s_reg_210(32 - 1 downto 0);
    xor_ln1350_1_fu_351_p2 <= (xor_ln1350_fu_335_p2 xor p_Result_4_fu_341_p4);
    xor_ln1350_2_fu_367_p2 <= (xor_ln1350_1_fu_351_p2 xor p_Result_5_fu_357_p4);
    xor_ln1350_3_fu_373_p2 <= (xor_ln1350_2_fu_367_p2 xor round_tmp_V_fu_303_p4);
    xor_ln1350_fu_335_p2 <= (trunc_ln674_fu_331_p1 xor p_Result_6_fu_319_p5);
    zext_ln534_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_fu_251_p2),64));
    zext_ln708_1_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_51_fu_262_p4),64));
    zext_ln708_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_277_p4),64));
    zext_ln708_3_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_226_p4),64));
    zext_ln708_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_236_p4),64));
end behav;
