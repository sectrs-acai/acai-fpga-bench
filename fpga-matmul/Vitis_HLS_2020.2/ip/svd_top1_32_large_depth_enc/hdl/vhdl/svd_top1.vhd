-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity svd_top1 is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of svd_top1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "svd_top1_svd_top1,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flga2104-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.410400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=0,HLS_SYN_FF=43892,HLS_SYN_LUT=60977,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (56 downto 0) := "000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (56 downto 0) := "000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (56 downto 0) := "000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (56 downto 0) := "000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (56 downto 0) := "000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (56 downto 0) := "000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (56 downto 0) := "000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (56 downto 0) := "000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (56 downto 0) := "000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (56 downto 0) := "001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (56 downto 0) := "010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (56 downto 0) := "100000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "01110000011011110110111001101101011011000110101101101010011010010110100001100111011001100110010101100100011000110110001001100001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (56 downto 0) := "000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal S : STD_LOGIC_VECTOR (63 downto 0);
    signal U : STD_LOGIC_VECTOR (63 downto 0);
    signal V : STD_LOGIC_VECTOR (63 downto 0);
    signal crypto : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln192_reg_1394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln200_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln207_reg_1498 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln207_reg_1498_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal icmp_ln216_reg_1523 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_reg_1523_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal icmp_ln222_reg_1558 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln222_reg_1558_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal icmp_ln228_reg_1593 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln228_reg_1593_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_568 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_reg_579 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_reg_590 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_601 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_601_pp1_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state19_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_1_reg_613 : STD_LOGIC_VECTOR (10 downto 0);
    signal end_1_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_634 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_01_0_0_i9495_reg_645 : STD_LOGIC_VECTOR (31 downto 0);
    signal end_4_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_5_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten8_reg_679 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_1_reg_690 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_1_reg_701 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten16_reg_712 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_2_reg_723 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_2_reg_734 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten24_reg_745 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_3_reg_756 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_3_reg_767 : STD_LOGIC_VECTOR (5 downto 0);
    signal crypto_read_reg_1291 : STD_LOGIC_VECTOR (63 downto 0);
    signal V_read_reg_1296 : STD_LOGIC_VECTOR (63 downto 0);
    signal U_read_reg_1301 : STD_LOGIC_VECTOR (63 downto 0);
    signal S_read_reg_1306 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_1383 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln192_1_fu_838_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln192_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln192_reg_1394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln192_1_fu_870_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln192_1_reg_1398 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln195_fu_894_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln195_reg_1403 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln195_reg_1403_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln194_fu_900_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal gmem_addr_read_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_1_reg_1418 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln200_fu_934_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln200_reg_1425 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln200_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1430_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_1_read_reg_1434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal sext_ln127_fu_951_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sext_ln127_reg_1444 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_2_fu_955_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state24_pp2_stage0_iter0 : BOOLEAN;
    signal ciphertextStrm_1_full_n : STD_LOGIC;
    signal ciphertextStrm_1_write : STD_LOGIC;
    signal icmp_ln127_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_1_full_n : STD_LOGIC;
    signal endCiphertextStrm_1_write : STD_LOGIC;
    signal ap_block_state25_pp2_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln127_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_3_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal endPlaintextStrm_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_1_empty_n : STD_LOGIC;
    signal endPlaintextStrm_1_read : STD_LOGIC;
    signal ap_phi_mux_end_1_phi_fu_627_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state30_pp3_stage0_iter0 : BOOLEAN;
    signal plaintextStrm_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal plaintextStrm_1_empty_n : STD_LOGIC;
    signal plaintextStrm_1_read : STD_LOGIC;
    signal ap_block_state31_pp3_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_4_fu_967_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal ap_block_state33_pp4_stage0_iter0 : BOOLEAN;
    signal plaintextStrm_full_n : STD_LOGIC;
    signal plaintextStrm_write : STD_LOGIC;
    signal icmp_ln73_reg_1474 : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_full_n : STD_LOGIC;
    signal endPlaintextStrm_write : STD_LOGIC;
    signal ap_block_state34_pp4_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal icmp_ln73_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_5_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal endCiphertextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_empty_n : STD_LOGIC;
    signal endCiphertextStrm_read : STD_LOGIC;
    signal ap_phi_mux_end_4_phi_fu_661_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state39_pp5_stage0_iter0 : BOOLEAN;
    signal ciphertextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal ciphertextStrm_empty_n : STD_LOGIC;
    signal ciphertextStrm_read : STD_LOGIC;
    signal ap_block_state40_pp5_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal trunc_ln155_fu_979_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln207_fu_983_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal ap_block_state42_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state44_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_state44_io : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal icmp_ln207_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ct_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ct_V_load_reg_1507 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal add_ln216_1_fu_1020_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal ap_block_state50_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state51_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state52_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_state52_io : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln216_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln216_1_fu_1052_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln216_1_reg_1527 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln218_fu_1087_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_load_reg_1542 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln222_1_fu_1117_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal ap_block_state58_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state59_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state60_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state60_io : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal icmp_ln222_fu_1123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln222_1_fu_1149_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln222_1_reg_1562 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln224_fu_1184_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal u_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_i_load_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln228_1_fu_1214_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal ap_block_state66_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state67_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state68_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_state68_io : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal icmp_ln228_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln228_1_fu_1246_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln228_1_reg_1597 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln230_fu_1281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal v_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_i_load_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state24 : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state30 : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal cipherkeyStrm_full_n : STD_LOGIC;
    signal cipherkeyStrm_write : STD_LOGIC;
    signal IVStrm_full_n : STD_LOGIC;
    signal IVStrm_write : STD_LOGIC;
    signal ap_block_state32 : BOOLEAN;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state33 : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state39 : STD_LOGIC;
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state42 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_ready : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state50 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state58 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state66 : STD_LOGIC;
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal a_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_i_ce0 : STD_LOGIC;
    signal a_i_we0 : STD_LOGIC;
    signal a_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_i_ce1 : STD_LOGIC;
    signal a_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_i_ce0 : STD_LOGIC;
    signal s_i_we0 : STD_LOGIC;
    signal s_i_ce1 : STD_LOGIC;
    signal s_i_we1 : STD_LOGIC;
    signal u_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_i_ce0 : STD_LOGIC;
    signal u_i_we0 : STD_LOGIC;
    signal u_i_ce1 : STD_LOGIC;
    signal u_i_we1 : STD_LOGIC;
    signal v_i_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal v_i_ce0 : STD_LOGIC;
    signal v_i_we0 : STD_LOGIC;
    signal v_i_ce1 : STD_LOGIC;
    signal v_i_we1 : STD_LOGIC;
    signal crypto_buff_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal crypto_buff_V_ce0 : STD_LOGIC;
    signal crypto_buff_V_we0 : STD_LOGIC;
    signal crypto_buff_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ct_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ct_V_ce0 : STD_LOGIC;
    signal ct_V_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_idle : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1 : STD_LOGIC;
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesCtrDecrypt_128u_s_fu_786_ap_start : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_ap_done : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_ap_idle : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_ap_ready : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_plaintext_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write : STD_LOGIC;
    signal grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ap_start : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ap_done : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ap_idle : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ap_ready : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write : STD_LOGIC;
    signal ap_phi_mux_r_phi_fu_583_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_i_phi_fu_605_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal ap_phi_mux_r_1_phi_fu_694_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_2_phi_fu_727_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_3_phi_fu_760_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ciphertextStrm_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal ciphertextStrm_1_empty_n : STD_LOGIC;
    signal ciphertextStrm_1_read : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal endCiphertextStrm_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endCiphertextStrm_1_empty_n : STD_LOGIC;
    signal endCiphertextStrm_1_read : STD_LOGIC;
    signal cipherkeyStrm_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal cipherkeyStrm_1_empty_n : STD_LOGIC;
    signal cipherkeyStrm_1_read : STD_LOGIC;
    signal IVStrm_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal IVStrm_1_empty_n : STD_LOGIC;
    signal IVStrm_1_read : STD_LOGIC;
    signal plaintextStrm_1_full_n : STD_LOGIC;
    signal plaintextStrm_1_write : STD_LOGIC;
    signal endPlaintextStrm_1_full_n : STD_LOGIC;
    signal endPlaintextStrm_1_write : STD_LOGIC;
    signal grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal plaintextStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal plaintextStrm_empty_n : STD_LOGIC;
    signal plaintextStrm_read : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal endPlaintextStrm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal endPlaintextStrm_empty_n : STD_LOGIC;
    signal endPlaintextStrm_read : STD_LOGIC;
    signal cipherkeyStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal cipherkeyStrm_empty_n : STD_LOGIC;
    signal cipherkeyStrm_read : STD_LOGIC;
    signal IVStrm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal IVStrm_empty_n : STD_LOGIC;
    signal IVStrm_read : STD_LOGIC;
    signal ciphertextStrm_full_n : STD_LOGIC;
    signal ciphertextStrm_write : STD_LOGIC;
    signal endCiphertextStrm_full_n : STD_LOGIC;
    signal endCiphertextStrm_write : STD_LOGIC;
    signal zext_ln195_1_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast1_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast2_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln219_1_fu_1082_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_1_fu_1179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln231_1_fu_1276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln192_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln201_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln216_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln222_fu_1106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln228_fu_1203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0_01001 : BOOLEAN;
    signal bitcast_ln219_fu_1093_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp7_stage0_01001 : BOOLEAN;
    signal bitcast_ln225_fu_1190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp8_stage0_01001 : BOOLEAN;
    signal bitcast_ln231_fu_1287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp9_stage0_01001 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal cipherkeyStrm_1_full_n : STD_LOGIC;
    signal cipherkeyStrm_1_write : STD_LOGIC;
    signal IVStrm_1_full_n : STD_LOGIC;
    signal IVStrm_1_write : STD_LOGIC;
    signal ap_block_state22 : BOOLEAN;
    signal ap_block_pp2_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal trunc_ln_fu_818_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln194_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln192_fu_850_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln195_fu_878_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln192_fu_862_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_cast_fu_882_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln195_fu_890_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln201_1_fu_914_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal trunc_ln3_fu_1000_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln218_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln216_fu_1032_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln219_fu_1060_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln216_fu_1044_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast_fu_1064_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln219_fu_1072_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln219_fu_1076_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln4_fu_1097_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln224_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln222_fu_1129_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln225_fu_1157_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln222_fu_1141_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_cast_fu_1161_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln225_fu_1169_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln225_fu_1173_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln5_fu_1194_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln230_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln228_fu_1226_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln231_fu_1254_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln228_fu_1238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_cast_fu_1258_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln231_fu_1266_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln231_fu_1270_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (56 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component svd_top1_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        S_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce1 : OUT STD_LOGIC;
        S_we1 : OUT STD_LOGIC;
        S_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        U_ce0 : OUT STD_LOGIC;
        U_we0 : OUT STD_LOGIC;
        U_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        U_ce1 : OUT STD_LOGIC;
        U_we1 : OUT STD_LOGIC;
        U_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        V_ce0 : OUT STD_LOGIC;
        V_we0 : OUT STD_LOGIC;
        V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        V_ce1 : OUT STD_LOGIC;
        V_we1 : OUT STD_LOGIC;
        V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_aesCtrDecrypt_128u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ciphertext_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        ciphertext_empty_n : IN STD_LOGIC;
        ciphertext_read : OUT STD_LOGIC;
        ciphertext_e_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_e_empty_n : IN STD_LOGIC;
        ciphertext_e_read : OUT STD_LOGIC;
        cipherkey_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        cipherkey_empty_n : IN STD_LOGIC;
        cipherkey_read : OUT STD_LOGIC;
        IV_strm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        IV_strm_empty_n : IN STD_LOGIC;
        IV_strm_read : OUT STD_LOGIC;
        plaintext_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        plaintext_full_n : IN STD_LOGIC;
        plaintext_write : OUT STD_LOGIC;
        plaintext_e_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        plaintext_e_full_n : IN STD_LOGIC;
        plaintext_e_write : OUT STD_LOGIC );
    end component;


    component svd_top1_aesCtrEncrypt_128u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plaintext_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        plaintext_empty_n : IN STD_LOGIC;
        plaintext_read : OUT STD_LOGIC;
        plaintext_e_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        plaintext_e_empty_n : IN STD_LOGIC;
        plaintext_e_read : OUT STD_LOGIC;
        cipherkey_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        cipherkey_empty_n : IN STD_LOGIC;
        cipherkey_read : OUT STD_LOGIC;
        initialization_vector_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        initialization_vector_empty_n : IN STD_LOGIC;
        initialization_vector_read : OUT STD_LOGIC;
        ciphertext_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        ciphertext_full_n : IN STD_LOGIC;
        ciphertext_write : OUT STD_LOGIC;
        ciphertext_e_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ciphertext_e_full_n : IN STD_LOGIC;
        ciphertext_e_write : OUT STD_LOGIC );
    end component;


    component svd_top1_a_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_s_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_crypto_buff_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component svd_top1_fifo_w128_d1034_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component svd_top1_fifo_w1_d1034_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component svd_top1_fifo_w128_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component svd_top1_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        S : OUT STD_LOGIC_VECTOR (63 downto 0);
        U : OUT STD_LOGIC_VECTOR (63 downto 0);
        V : OUT STD_LOGIC_VECTOR (63 downto 0);
        crypto : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component svd_top1_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component svd_top1_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        A => A,
        S => S,
        U => U,
        V => V,
        crypto => crypto);

    gmem_m_axi_U : component svd_top1_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    a_i_U : component svd_top1_a_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => a_i_address0,
        ce0 => a_i_ce0,
        we0 => a_i_we0,
        d0 => a_i_d0,
        q0 => a_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address1,
        ce1 => a_i_ce1,
        q1 => a_i_q1);

    s_i_U : component svd_top1_s_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => s_i_address0,
        ce0 => s_i_ce0,
        we0 => s_i_we0,
        d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d0,
        q0 => s_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address1,
        ce1 => s_i_ce1,
        we1 => s_i_we1,
        d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d1);

    u_i_U : component svd_top1_s_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => u_i_address0,
        ce0 => u_i_ce0,
        we0 => u_i_we0,
        d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d0,
        q0 => u_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address1,
        ce1 => u_i_ce1,
        we1 => u_i_we1,
        d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d1);

    v_i_U : component svd_top1_s_i
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => v_i_address0,
        ce0 => v_i_ce0,
        we0 => v_i_we0,
        d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d0,
        q0 => v_i_q0,
        address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address1,
        ce1 => v_i_ce1,
        we1 => v_i_we1,
        d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d1);

    crypto_buff_V_U : component svd_top1_crypto_buff_V
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => crypto_buff_V_address0,
        ce0 => crypto_buff_V_ce0,
        we0 => crypto_buff_V_we0,
        d0 => gmem_addr_1_read_reg_1434,
        q0 => crypto_buff_V_q0);

    ct_V_U : component svd_top1_crypto_buff_V
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => ct_V_address0,
        ce0 => ct_V_ce0,
        we0 => ct_V_we0,
        d0 => p_01_0_0_i9495_reg_645,
        q0 => ct_V_q0);

    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778 : component svd_top1_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start,
        ap_done => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done,
        ap_idle => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_idle,
        ap_ready => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_ready,
        A_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0,
        A_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0,
        A_q0 => a_i_q0,
        A_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address1,
        A_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1,
        A_q1 => a_i_q1,
        S_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0,
        S_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0,
        S_we0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0,
        S_d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d0,
        S_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address1,
        S_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1,
        S_we1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1,
        S_d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_d1,
        U_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0,
        U_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0,
        U_we0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0,
        U_d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d0,
        U_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address1,
        U_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1,
        U_we1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1,
        U_d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_d1,
        V_address0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0,
        V_ce0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0,
        V_we0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0,
        V_d0 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d0,
        V_address1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address1,
        V_ce1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1,
        V_we1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1,
        V_d1 => grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_d1);

    grp_aesCtrDecrypt_128u_s_fu_786 : component svd_top1_aesCtrDecrypt_128u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aesCtrDecrypt_128u_s_fu_786_ap_start,
        ap_done => grp_aesCtrDecrypt_128u_s_fu_786_ap_done,
        ap_idle => grp_aesCtrDecrypt_128u_s_fu_786_ap_idle,
        ap_ready => grp_aesCtrDecrypt_128u_s_fu_786_ap_ready,
        ciphertext_dout => ciphertextStrm_1_dout,
        ciphertext_empty_n => ciphertextStrm_1_empty_n,
        ciphertext_read => grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read,
        ciphertext_e_dout => endCiphertextStrm_1_dout,
        ciphertext_e_empty_n => endCiphertextStrm_1_empty_n,
        ciphertext_e_read => grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read,
        cipherkey_dout => cipherkeyStrm_1_dout,
        cipherkey_empty_n => cipherkeyStrm_1_empty_n,
        cipherkey_read => grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read,
        IV_strm_dout => IVStrm_1_dout,
        IV_strm_empty_n => IVStrm_1_empty_n,
        IV_strm_read => grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read,
        plaintext_din => grp_aesCtrDecrypt_128u_s_fu_786_plaintext_din,
        plaintext_full_n => plaintextStrm_1_full_n,
        plaintext_write => grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write,
        plaintext_e_din => grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_din,
        plaintext_e_full_n => endPlaintextStrm_1_full_n,
        plaintext_e_write => grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write);

    grp_aesCtrEncrypt_128u_s_fu_802 : component svd_top1_aesCtrEncrypt_128u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aesCtrEncrypt_128u_s_fu_802_ap_start,
        ap_done => grp_aesCtrEncrypt_128u_s_fu_802_ap_done,
        ap_idle => grp_aesCtrEncrypt_128u_s_fu_802_ap_idle,
        ap_ready => grp_aesCtrEncrypt_128u_s_fu_802_ap_ready,
        plaintext_dout => plaintextStrm_dout,
        plaintext_empty_n => plaintextStrm_empty_n,
        plaintext_read => grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read,
        plaintext_e_dout => endPlaintextStrm_dout,
        plaintext_e_empty_n => endPlaintextStrm_empty_n,
        plaintext_e_read => grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read,
        cipherkey_dout => cipherkeyStrm_dout,
        cipherkey_empty_n => cipherkeyStrm_empty_n,
        cipherkey_read => grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read,
        initialization_vector_dout => IVStrm_dout,
        initialization_vector_empty_n => IVStrm_empty_n,
        initialization_vector_read => grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read,
        ciphertext_din => grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_din,
        ciphertext_full_n => ciphertextStrm_full_n,
        ciphertext_write => grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write,
        ciphertext_e_din => grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_din,
        ciphertext_e_full_n => endCiphertextStrm_full_n,
        ciphertext_e_write => grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write);

    ciphertextStrm_fifo_U : component svd_top1_fifo_w128_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_din,
        if_full_n => ciphertextStrm_full_n,
        if_write => ciphertextStrm_write,
        if_dout => ciphertextStrm_dout,
        if_empty_n => ciphertextStrm_empty_n,
        if_read => ciphertextStrm_read);

    endCiphertextStrm_fifo_U : component svd_top1_fifo_w1_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_din,
        if_full_n => endCiphertextStrm_full_n,
        if_write => endCiphertextStrm_write,
        if_dout => endCiphertextStrm_dout,
        if_empty_n => endCiphertextStrm_empty_n,
        if_read => endCiphertextStrm_read);

    cipherkeyStrm_fifo_U : component svd_top1_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => cipherkeyStrm_full_n,
        if_write => cipherkeyStrm_write,
        if_dout => cipherkeyStrm_dout,
        if_empty_n => cipherkeyStrm_empty_n,
        if_read => cipherkeyStrm_read);

    IVStrm_fifo_U : component svd_top1_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => IVStrm_full_n,
        if_write => IVStrm_write,
        if_dout => IVStrm_dout,
        if_empty_n => IVStrm_empty_n,
        if_read => IVStrm_read);

    plaintextStrm_fifo_U : component svd_top1_fifo_w128_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sext_ln127_reg_1444,
        if_full_n => plaintextStrm_full_n,
        if_write => plaintextStrm_write,
        if_dout => plaintextStrm_dout,
        if_empty_n => plaintextStrm_empty_n,
        if_read => plaintextStrm_read);

    endPlaintextStrm_fifo_U : component svd_top1_fifo_w1_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endPlaintextStrm_din,
        if_full_n => endPlaintextStrm_full_n,
        if_write => endPlaintextStrm_write,
        if_dout => endPlaintextStrm_dout,
        if_empty_n => endPlaintextStrm_empty_n,
        if_read => endPlaintextStrm_read);

    ciphertextStrm_1_fifo_U : component svd_top1_fifo_w128_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sext_ln127_reg_1444,
        if_full_n => ciphertextStrm_1_full_n,
        if_write => ciphertextStrm_1_write,
        if_dout => ciphertextStrm_1_dout,
        if_empty_n => ciphertextStrm_1_empty_n,
        if_read => ciphertextStrm_1_read);

    endCiphertextStrm_1_fifo_U : component svd_top1_fifo_w1_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => endCiphertextStrm_1_din,
        if_full_n => endCiphertextStrm_1_full_n,
        if_write => endCiphertextStrm_1_write,
        if_dout => endCiphertextStrm_1_dout,
        if_empty_n => endCiphertextStrm_1_empty_n,
        if_read => endCiphertextStrm_1_read);

    cipherkeyStrm_1_fifo_U : component svd_top1_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => cipherkeyStrm_1_full_n,
        if_write => cipherkeyStrm_1_write,
        if_dout => cipherkeyStrm_1_dout,
        if_empty_n => cipherkeyStrm_1_empty_n,
        if_read => cipherkeyStrm_1_read);

    IVStrm_1_fifo_U : component svd_top1_fifo_w128_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ap_const_lv128_lc_3,
        if_full_n => IVStrm_1_full_n,
        if_write => IVStrm_1_write,
        if_dout => IVStrm_1_dout,
        if_empty_n => IVStrm_1_empty_n,
        if_read => IVStrm_1_read);

    plaintextStrm_1_fifo_U : component svd_top1_fifo_w128_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_aesCtrDecrypt_128u_s_fu_786_plaintext_din,
        if_full_n => plaintextStrm_1_full_n,
        if_write => plaintextStrm_1_write,
        if_dout => plaintextStrm_1_dout,
        if_empty_n => plaintextStrm_1_empty_n,
        if_read => plaintextStrm_1_read);

    endPlaintextStrm_1_fifo_U : component svd_top1_fifo_w1_d1034_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_din,
        if_full_n => endPlaintextStrm_1_full_n,
        if_write => endPlaintextStrm_1_write,
        if_dout => endPlaintextStrm_1_dout,
        if_empty_n => endPlaintextStrm_1_empty_n,
        if_read => endPlaintextStrm_1_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state19)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state19);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state24) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state24);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((endPlaintextStrm_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state30) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state30);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((endPlaintextStrm_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state33) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((not(((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state33) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state33);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((not(((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state39) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state39) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state39);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state42) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state42)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state42);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state50) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state50)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state50);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state58) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state58)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state58);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                    ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state66) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state66)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state66);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                    ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aesCtrDecrypt_128u_s_fu_786_ap_ready = ap_const_logic_1)) then 
                    grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aesCtrEncrypt_128u_s_fu_802_ap_ready = ap_const_logic_1)) then 
                    grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_ready = ap_const_logic_1)) then 
                    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_1_reg_701_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_1026_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                c_1_reg_701 <= add_ln218_fu_1087_p2;
            elsif ((not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                c_1_reg_701 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c_2_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_1123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                c_2_reg_734 <= add_ln224_fu_1184_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                c_2_reg_734 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c_3_reg_767_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_1220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                c_3_reg_767 <= add_ln230_fu_1281_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                c_3_reg_767 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    c_reg_590_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_844_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_reg_590 <= add_ln194_fu_900_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                c_reg_590 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    end_1_reg_624_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (end_1_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                end_1_reg_624 <= tmp_3_reg_1464;
            elsif (((endPlaintextStrm_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                end_1_reg_624 <= endPlaintextStrm_1_dout;
            end if; 
        end if;
    end process;

    end_4_reg_658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (end_4_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
                end_4_reg_658 <= tmp_5_reg_1483;
            elsif (((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                end_4_reg_658 <= endCiphertextStrm_dout;
            end if; 
        end if;
    end process;

    i_1_reg_613_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln127_fu_961_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                i_1_reg_613 <= i_2_fu_955_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_1_reg_613 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_3_reg_634_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln73_fu_973_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_3_reg_634 <= i_4_fu_967_p2;
            elsif ((not(((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i_3_reg_634 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i_5_reg_668_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
                i_5_reg_668 <= ap_const_lv8_0;
            elsif (((icmp_ln207_fu_989_p2 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then 
                i_5_reg_668 <= add_ln207_fu_983_p2;
            end if; 
        end if;
    end process;

    i_reg_601_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_reg_601 <= ap_const_lv8_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_reg_601 <= add_ln200_reg_1425;
            end if; 
        end if;
    end process;

    indvar_flatten16_reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_1123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                indvar_flatten16_reg_712 <= add_ln222_1_fu_1117_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                indvar_flatten16_reg_712 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_745_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_1220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                indvar_flatten24_reg_745 <= add_ln228_1_fu_1214_p2;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                indvar_flatten24_reg_745 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten8_reg_679_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_1026_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                indvar_flatten8_reg_679 <= add_ln216_1_fu_1020_p2;
            elsif ((not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                indvar_flatten8_reg_679 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_568_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_844_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_568 <= add_ln192_1_fu_838_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                indvar_flatten_reg_568 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_1_reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln216_reg_1523 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
                r_1_reg_690 <= select_ln216_1_reg_1527;
            elsif ((not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                r_1_reg_690 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_2_reg_723_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (icmp_ln222_reg_1558 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                r_2_reg_723 <= select_ln222_1_reg_1562;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then 
                r_2_reg_723 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_3_reg_756_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_1593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1))) then 
                r_3_reg_756 <= select_ln228_1_reg_1597;
            elsif (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then 
                r_3_reg_756 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_reg_579_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_reg_579 <= select_ln192_1_reg_1398;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                r_reg_579 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                S_read_reg_1306 <= S;
                U_read_reg_1301 <= U;
                V_read_reg_1296 <= V;
                crypto_read_reg_1291 <= crypto;
                gmem_addr_reg_1383 <= sext_ln192_fu_828_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_844_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln195_reg_1403 <= add_ln195_fu_894_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln195_reg_1403_pp0_iter1_reg <= add_ln195_reg_1403;
                icmp_ln192_reg_1394 <= icmp_ln192_fu_844_p2;
                icmp_ln192_reg_1394_pp0_iter1_reg <= icmp_ln192_reg_1394;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln200_reg_1425 <= add_ln200_fu_934_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln207_reg_1498 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                ct_V_load_reg_1507 <= ct_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                gmem_addr_1_read_reg_1434 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                gmem_addr_1_reg_1418 <= sext_ln201_fu_923_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_addr_read_reg_1413 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                i_reg_601_pp1_iter1_reg <= i_reg_601;
                icmp_ln200_reg_1430 <= icmp_ln200_fu_940_p2;
                icmp_ln200_reg_1430_pp1_iter1_reg <= icmp_ln200_reg_1430;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln127_reg_1455 <= icmp_ln127_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001))) then
                icmp_ln207_reg_1498 <= icmp_ln207_fu_989_p2;
                icmp_ln207_reg_1498_pp6_iter1_reg <= icmp_ln207_reg_1498;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                icmp_ln216_reg_1523 <= icmp_ln216_fu_1026_p2;
                icmp_ln216_reg_1523_pp7_iter1_reg <= icmp_ln216_reg_1523;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                icmp_ln222_reg_1558 <= icmp_ln222_fu_1123_p2;
                icmp_ln222_reg_1558_pp8_iter1_reg <= icmp_ln222_reg_1558;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                icmp_ln228_reg_1593 <= icmp_ln228_fu_1220_p2;
                icmp_ln228_reg_1593_pp9_iter1_reg <= icmp_ln228_reg_1593;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln73_reg_1474 <= icmp_ln73_fu_973_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (end_4_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                p_01_0_0_i9495_reg_645 <= trunc_ln155_fu_979_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_reg_1523 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                s_i_load_reg_1542 <= s_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_844_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln192_1_reg_1398 <= select_ln192_1_fu_870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_1026_p2 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then
                select_ln216_1_reg_1527 <= select_ln216_1_fu_1052_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_fu_1123_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                select_ln222_1_reg_1562 <= select_ln222_1_fu_1149_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_fu_1220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                select_ln228_1_reg_1597 <= select_ln228_1_fu_1246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                sext_ln127_reg_1444 <= sext_ln127_fu_951_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                tmp_3_reg_1464 <= endPlaintextStrm_1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then
                tmp_5_reg_1483 <= endCiphertextStrm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln222_reg_1558 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                u_i_load_reg_1577 <= u_i_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln228_reg_1593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                v_i_load_reg_1612 <= v_i_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_enable_reg_pp1_iter1, ap_CS_fsm_state41, ap_enable_reg_pp6_iter2, ap_CS_fsm_state49, ap_CS_fsm_state45, ap_enable_reg_pp7_iter2, ap_CS_fsm_state57, ap_CS_fsm_state53, ap_enable_reg_pp8_iter2, ap_CS_fsm_state65, ap_CS_fsm_state61, ap_enable_reg_pp9_iter2, ap_CS_fsm_state73, gmem_AWREADY, gmem_ARREADY, gmem_BVALID, ap_enable_reg_pp0_iter0, icmp_ln192_fu_844_p2, ap_enable_reg_pp1_iter0, icmp_ln200_fu_940_p2, ap_CS_fsm_state22, ap_enable_reg_pp2_iter0, endCiphertextStrm_1_full_n, icmp_ln127_fu_961_p2, ap_CS_fsm_state29, ap_enable_reg_pp3_iter0, endPlaintextStrm_1_empty_n, ap_phi_mux_end_1_phi_fu_627_p4, ap_enable_reg_pp4_iter0, endPlaintextStrm_full_n, icmp_ln73_fu_973_p2, ap_CS_fsm_state38, ap_enable_reg_pp5_iter0, endCiphertextStrm_empty_n, ap_phi_mux_end_4_phi_fu_661_p4, ap_enable_reg_pp6_iter0, icmp_ln207_fu_989_p2, ap_enable_reg_pp6_iter1, ap_enable_reg_pp7_iter0, icmp_ln216_fu_1026_p2, ap_enable_reg_pp8_iter0, icmp_ln222_fu_1123_p2, ap_enable_reg_pp9_iter0, icmp_ln228_fu_1220_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_CS_fsm_state32, cipherkeyStrm_full_n, IVStrm_full_n, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter1, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter1, ap_block_pp9_stage0_subdone, ap_enable_reg_pp9_iter1, grp_aesCtrDecrypt_128u_s_fu_786_ap_done, grp_aesCtrEncrypt_128u_s_fu_802_ap_done, ap_CS_fsm_state28, ap_CS_fsm_state37, cipherkeyStrm_1_full_n, IVStrm_1_full_n, ap_CS_fsm_state26, ap_CS_fsm_state35)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln192_fu_844_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln192_fu_844_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln200_fu_940_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln200_fu_940_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((cipherkeyStrm_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((icmp_ln127_fu_961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((icmp_ln127_fu_961_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                if (((endCiphertextStrm_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (grp_aesCtrDecrypt_128u_s_fu_786_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((endPlaintextStrm_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state32 => 
                if ((not(((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((icmp_ln73_fu_973_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((icmp_ln73_fu_973_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state35 => 
                if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_aesCtrEncrypt_128u_s_fu_802_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state41 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln207_fu_989_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (icmp_ln207_fu_989_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                if ((not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln216_fu_1026_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) and not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (icmp_ln216_fu_1026_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state53 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state57;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (icmp_ln222_fu_1123_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) and not(((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (icmp_ln222_fu_1123_p2 = ap_const_lv1_1) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state61 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((icmp_ln228_fu_1220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((icmp_ln228_fu_1220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state69;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    IVStrm_1_read_assign_proc : process(grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            IVStrm_1_read <= grp_aesCtrDecrypt_128u_s_fu_786_IV_strm_read;
        else 
            IVStrm_1_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_1_write_assign_proc : process(ap_CS_fsm_state22, cipherkeyStrm_1_full_n, IVStrm_1_full_n)
    begin
        if ((not(((cipherkeyStrm_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            IVStrm_1_write <= ap_const_logic_1;
        else 
            IVStrm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_read_assign_proc : process(grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            IVStrm_read <= grp_aesCtrEncrypt_128u_s_fu_802_initialization_vector_read;
        else 
            IVStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    IVStrm_write_assign_proc : process(ap_CS_fsm_state32, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if ((not(((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            IVStrm_write <= ap_const_logic_1;
        else 
            IVStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    a_i_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_state49, ap_enable_reg_pp0_iter2, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0, zext_ln195_1_fu_906_p1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            a_i_address0 <= zext_ln195_1_fu_906_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            a_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_address0;
        else 
            a_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_i_ce0_assign_proc : process(ap_CS_fsm_state49, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            a_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce0;
        else 
            a_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_i_ce1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            a_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_A_ce1;
        else 
            a_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_i_d0 <= gmem_addr_read_reg_1413;

    a_i_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln192_reg_1394_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln192_reg_1394_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            a_i_we0 <= ap_const_logic_1;
        else 
            a_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln192_1_fu_838_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_568) + unsigned(ap_const_lv11_1));
    add_ln192_fu_850_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_phi_fu_583_p4) + unsigned(ap_const_lv6_1));
    add_ln194_fu_900_p2 <= std_logic_vector(unsigned(select_ln192_fu_862_p3) + unsigned(ap_const_lv6_1));
    add_ln195_fu_894_p2 <= std_logic_vector(unsigned(tmp_1_cast_fu_882_p3) + unsigned(zext_ln195_fu_890_p1));
    add_ln200_fu_934_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_605_p4) + unsigned(ap_const_lv8_1));
    add_ln207_fu_983_p2 <= std_logic_vector(unsigned(i_5_reg_668) + unsigned(ap_const_lv8_1));
    add_ln216_1_fu_1020_p2 <= std_logic_vector(unsigned(indvar_flatten8_reg_679) + unsigned(ap_const_lv11_1));
    add_ln216_fu_1032_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_1_phi_fu_694_p4) + unsigned(ap_const_lv6_1));
    add_ln218_fu_1087_p2 <= std_logic_vector(unsigned(select_ln216_fu_1044_p3) + unsigned(ap_const_lv6_1));
    add_ln219_fu_1076_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_1064_p3) + unsigned(zext_ln219_fu_1072_p1));
    add_ln222_1_fu_1117_p2 <= std_logic_vector(unsigned(indvar_flatten16_reg_712) + unsigned(ap_const_lv11_1));
    add_ln222_fu_1129_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_2_phi_fu_727_p4) + unsigned(ap_const_lv6_1));
    add_ln224_fu_1184_p2 <= std_logic_vector(unsigned(select_ln222_fu_1141_p3) + unsigned(ap_const_lv6_1));
    add_ln225_fu_1173_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_1161_p3) + unsigned(zext_ln225_fu_1169_p1));
    add_ln228_1_fu_1214_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_745) + unsigned(ap_const_lv11_1));
    add_ln228_fu_1226_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_3_phi_fu_760_p4) + unsigned(ap_const_lv6_1));
    add_ln230_fu_1281_p2 <= std_logic_vector(unsigned(select_ln228_fu_1238_p3) + unsigned(ap_const_lv6_1));
    add_ln231_fu_1270_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_1258_p3) + unsigned(zext_ln231_fu_1266_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(19);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(31);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(39);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(45);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(51);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(17);
    ap_CS_fsm_state23 <= ap_CS_fsm(18);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state27 <= ap_CS_fsm(21);
    ap_CS_fsm_state28 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state32 <= ap_CS_fsm(25);
    ap_CS_fsm_state35 <= ap_CS_fsm(27);
    ap_CS_fsm_state36 <= ap_CS_fsm(28);
    ap_CS_fsm_state37 <= ap_CS_fsm(29);
    ap_CS_fsm_state38 <= ap_CS_fsm(30);
    ap_CS_fsm_state41 <= ap_CS_fsm(32);
    ap_CS_fsm_state45 <= ap_CS_fsm(34);
    ap_CS_fsm_state48 <= ap_CS_fsm(37);
    ap_CS_fsm_state49 <= ap_CS_fsm(38);
    ap_CS_fsm_state53 <= ap_CS_fsm(40);
    ap_CS_fsm_state57 <= ap_CS_fsm(44);
    ap_CS_fsm_state61 <= ap_CS_fsm(46);
    ap_CS_fsm_state65 <= ap_CS_fsm(50);
    ap_CS_fsm_state73 <= ap_CS_fsm(56);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln192_reg_1394, gmem_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln192_reg_1394, gmem_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln200_reg_1430, gmem_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln200_reg_1430, gmem_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_01001_assign_proc : process(ciphertextStrm_1_full_n, icmp_ln127_reg_1455, endCiphertextStrm_1_full_n, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_01001 <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((endCiphertextStrm_1_full_n = ap_const_logic_0) and (icmp_ln127_reg_1455 = ap_const_lv1_0)) or ((icmp_ln127_reg_1455 = ap_const_lv1_0) and (ciphertextStrm_1_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp2_stage0_11001_assign_proc : process(ciphertextStrm_1_full_n, icmp_ln127_reg_1455, endCiphertextStrm_1_full_n, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((endCiphertextStrm_1_full_n = ap_const_logic_0) and (icmp_ln127_reg_1455 = ap_const_lv1_0)) or ((icmp_ln127_reg_1455 = ap_const_lv1_0) and (ciphertextStrm_1_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ciphertextStrm_1_full_n, icmp_ln127_reg_1455, endCiphertextStrm_1_full_n, ap_enable_reg_pp2_iter1)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (((endCiphertextStrm_1_full_n = ap_const_logic_0) and (icmp_ln127_reg_1455 = ap_const_lv1_0)) or ((icmp_ln127_reg_1455 = ap_const_lv1_0) and (ciphertextStrm_1_full_n = ap_const_logic_0))));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(end_1_reg_624, ap_enable_reg_pp3_iter0, endPlaintextStrm_1_empty_n, ap_phi_mux_end_1_phi_fu_627_p4, plaintextStrm_1_empty_n, ap_enable_reg_pp3_iter1)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (plaintextStrm_1_empty_n = ap_const_logic_0) and (end_1_reg_624 = ap_const_lv1_0)) or ((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_0) and (endPlaintextStrm_1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(end_1_reg_624, ap_enable_reg_pp3_iter0, endPlaintextStrm_1_empty_n, ap_phi_mux_end_1_phi_fu_627_p4, plaintextStrm_1_empty_n, ap_enable_reg_pp3_iter1)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (plaintextStrm_1_empty_n = ap_const_logic_0) and (end_1_reg_624 = ap_const_lv1_0)) or ((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_0) and (endPlaintextStrm_1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_01001_assign_proc : process(plaintextStrm_full_n, icmp_ln73_reg_1474, endPlaintextStrm_full_n, ap_enable_reg_pp4_iter1)
    begin
                ap_block_pp4_stage0_01001 <= ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (((endPlaintextStrm_full_n = ap_const_logic_0) and (icmp_ln73_reg_1474 = ap_const_lv1_0)) or ((icmp_ln73_reg_1474 = ap_const_lv1_0) and (plaintextStrm_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp4_stage0_11001_assign_proc : process(plaintextStrm_full_n, icmp_ln73_reg_1474, endPlaintextStrm_full_n, ap_enable_reg_pp4_iter1)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (((endPlaintextStrm_full_n = ap_const_logic_0) and (icmp_ln73_reg_1474 = ap_const_lv1_0)) or ((icmp_ln73_reg_1474 = ap_const_lv1_0) and (plaintextStrm_full_n = ap_const_logic_0))));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(plaintextStrm_full_n, icmp_ln73_reg_1474, endPlaintextStrm_full_n, ap_enable_reg_pp4_iter1)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (((endPlaintextStrm_full_n = ap_const_logic_0) and (icmp_ln73_reg_1474 = ap_const_lv1_0)) or ((icmp_ln73_reg_1474 = ap_const_lv1_0) and (plaintextStrm_full_n = ap_const_logic_0))));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(end_4_reg_658, ap_enable_reg_pp5_iter0, endCiphertextStrm_empty_n, ap_phi_mux_end_4_phi_fu_661_p4, ciphertextStrm_empty_n, ap_enable_reg_pp5_iter1)
    begin
                ap_block_pp5_stage0_11001 <= (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ciphertextStrm_empty_n = ap_const_logic_0) and (end_4_reg_658 = ap_const_lv1_0)) or ((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_0) and (endCiphertextStrm_empty_n = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(end_4_reg_658, ap_enable_reg_pp5_iter0, endCiphertextStrm_empty_n, ap_phi_mux_end_4_phi_fu_661_p4, ciphertextStrm_empty_n, ap_enable_reg_pp5_iter1)
    begin
                ap_block_pp5_stage0_subdone <= (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ciphertextStrm_empty_n = ap_const_logic_0) and (end_4_reg_658 = ap_const_lv1_0)) or ((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_0) and (endCiphertextStrm_empty_n = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state44_io)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state44_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter2, ap_block_state44_io)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state44_io) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter2, ap_block_state52_io)
    begin
                ap_block_pp7_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state52_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter2, ap_block_state52_io)
    begin
                ap_block_pp7_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state52_io) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp8_stage0_11001_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state60_io)
    begin
                ap_block_pp8_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state60_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp8_stage0_subdone_assign_proc : process(ap_enable_reg_pp8_iter2, ap_block_state60_io)
    begin
                ap_block_pp8_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state60_io) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp9_stage0_11001_assign_proc : process(ap_enable_reg_pp9_iter2, ap_block_state68_io)
    begin
                ap_block_pp9_stage0_11001 <= ((ap_const_boolean_1 = ap_block_state68_io) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp9_stage0_subdone_assign_proc : process(ap_enable_reg_pp9_iter2, ap_block_state68_io)
    begin
                ap_block_pp9_stage0_subdone <= ((ap_const_boolean_1 = ap_block_state68_io) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(icmp_ln192_reg_1394, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln192_reg_1394 = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp1_stage0_iter1_assign_proc : process(icmp_ln200_reg_1430, gmem_RVALID)
    begin
                ap_block_state20_pp1_stage0_iter1 <= ((gmem_RVALID = ap_const_logic_0) and (icmp_ln200_reg_1430 = ap_const_lv1_0));
    end process;

        ap_block_state21_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_assign_proc : process(cipherkeyStrm_1_full_n, IVStrm_1_full_n)
    begin
                ap_block_state22 <= ((cipherkeyStrm_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_1_full_n));
    end process;

        ap_block_state24_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_pp2_stage0_iter1_assign_proc : process(ciphertextStrm_1_full_n, icmp_ln127_reg_1455, endCiphertextStrm_1_full_n)
    begin
                ap_block_state25_pp2_stage0_iter1 <= (((endCiphertextStrm_1_full_n = ap_const_logic_0) and (icmp_ln127_reg_1455 = ap_const_lv1_0)) or ((icmp_ln127_reg_1455 = ap_const_lv1_0) and (ciphertextStrm_1_full_n = ap_const_logic_0)));
    end process;


    ap_block_state30_pp3_stage0_iter0_assign_proc : process(endPlaintextStrm_1_empty_n, ap_phi_mux_end_1_phi_fu_627_p4)
    begin
                ap_block_state30_pp3_stage0_iter0 <= ((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_0) and (endPlaintextStrm_1_empty_n = ap_const_logic_0));
    end process;


    ap_block_state31_pp3_stage0_iter1_assign_proc : process(end_1_reg_624, plaintextStrm_1_empty_n)
    begin
                ap_block_state31_pp3_stage0_iter1 <= ((plaintextStrm_1_empty_n = ap_const_logic_0) and (end_1_reg_624 = ap_const_lv1_0));
    end process;


    ap_block_state32_assign_proc : process(cipherkeyStrm_full_n, IVStrm_full_n)
    begin
                ap_block_state32 <= ((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n));
    end process;

        ap_block_state33_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_pp4_stage0_iter1_assign_proc : process(plaintextStrm_full_n, icmp_ln73_reg_1474, endPlaintextStrm_full_n)
    begin
                ap_block_state34_pp4_stage0_iter1 <= (((endPlaintextStrm_full_n = ap_const_logic_0) and (icmp_ln73_reg_1474 = ap_const_lv1_0)) or ((icmp_ln73_reg_1474 = ap_const_lv1_0) and (plaintextStrm_full_n = ap_const_logic_0)));
    end process;


    ap_block_state39_pp5_stage0_iter0_assign_proc : process(endCiphertextStrm_empty_n, ap_phi_mux_end_4_phi_fu_661_p4)
    begin
                ap_block_state39_pp5_stage0_iter0 <= ((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_0) and (endCiphertextStrm_empty_n = ap_const_logic_0));
    end process;


    ap_block_state40_pp5_stage0_iter1_assign_proc : process(end_4_reg_658, ciphertextStrm_empty_n)
    begin
                ap_block_state40_pp5_stage0_iter1 <= ((ciphertextStrm_empty_n = ap_const_logic_0) and (end_4_reg_658 = ap_const_lv1_0));
    end process;

        ap_block_state42_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state44_io_assign_proc : process(icmp_ln207_reg_1498_pp6_iter1_reg, gmem_WREADY)
    begin
                ap_block_state44_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln207_reg_1498_pp6_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state44_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state52_io_assign_proc : process(icmp_ln216_reg_1523_pp7_iter1_reg, gmem_WREADY)
    begin
                ap_block_state52_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln216_reg_1523_pp7_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state52_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state60_io_assign_proc : process(icmp_ln222_reg_1558_pp8_iter1_reg, gmem_WREADY)
    begin
                ap_block_state60_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln222_reg_1558_pp8_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state60_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state68_io_assign_proc : process(icmp_ln228_reg_1593_pp9_iter1_reg, gmem_WREADY)
    begin
                ap_block_state68_io <= ((gmem_WREADY = ap_const_logic_0) and (icmp_ln228_reg_1593_pp9_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state68_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln192_fu_844_p2)
    begin
        if ((icmp_ln192_fu_844_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state19_assign_proc : process(icmp_ln200_fu_940_p2)
    begin
        if ((icmp_ln200_fu_940_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state24_assign_proc : process(icmp_ln127_fu_961_p2)
    begin
        if ((icmp_ln127_fu_961_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state30_assign_proc : process(ap_phi_mux_end_1_phi_fu_627_p4)
    begin
        if ((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state33_assign_proc : process(icmp_ln73_fu_973_p2)
    begin
        if ((icmp_ln73_fu_973_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state33 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state33 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state39_assign_proc : process(ap_phi_mux_end_4_phi_fu_661_p4)
    begin
        if ((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state42_assign_proc : process(icmp_ln207_fu_989_p2)
    begin
        if ((icmp_ln207_fu_989_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state42 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state50_assign_proc : process(icmp_ln216_fu_1026_p2)
    begin
        if ((icmp_ln216_fu_1026_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state50 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state50 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state58_assign_proc : process(icmp_ln222_fu_1123_p2)
    begin
        if ((icmp_ln222_fu_1123_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state58 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state58 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state66_assign_proc : process(icmp_ln228_fu_1220_p2)
    begin
        if ((icmp_ln228_fu_1220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state66 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state66 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state73, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter2, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter2, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter2, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_end_1_phi_fu_627_p4_assign_proc : process(end_1_reg_624, tmp_3_reg_1464, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (end_1_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_end_1_phi_fu_627_p4 <= tmp_3_reg_1464;
        else 
            ap_phi_mux_end_1_phi_fu_627_p4 <= end_1_reg_624;
        end if; 
    end process;


    ap_phi_mux_end_4_phi_fu_661_p4_assign_proc : process(end_4_reg_658, tmp_5_reg_1483, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (end_4_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            ap_phi_mux_end_4_phi_fu_661_p4 <= tmp_5_reg_1483;
        else 
            ap_phi_mux_end_4_phi_fu_661_p4 <= end_4_reg_658;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_605_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln200_reg_1430, i_reg_601, add_ln200_reg_1425)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_phi_fu_605_p4 <= add_ln200_reg_1425;
        else 
            ap_phi_mux_i_phi_fu_605_p4 <= i_reg_601;
        end if; 
    end process;


    ap_phi_mux_r_1_phi_fu_694_p4_assign_proc : process(ap_block_pp7_stage0, icmp_ln216_reg_1523, r_1_reg_690, ap_CS_fsm_pp7_stage0, select_ln216_1_reg_1527, ap_enable_reg_pp7_iter1)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (icmp_ln216_reg_1523 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            ap_phi_mux_r_1_phi_fu_694_p4 <= select_ln216_1_reg_1527;
        else 
            ap_phi_mux_r_1_phi_fu_694_p4 <= r_1_reg_690;
        end if; 
    end process;


    ap_phi_mux_r_2_phi_fu_727_p4_assign_proc : process(ap_block_pp8_stage0, icmp_ln222_reg_1558, r_2_reg_723, ap_CS_fsm_pp8_stage0, select_ln222_1_reg_1562, ap_enable_reg_pp8_iter1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (icmp_ln222_reg_1558 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            ap_phi_mux_r_2_phi_fu_727_p4 <= select_ln222_1_reg_1562;
        else 
            ap_phi_mux_r_2_phi_fu_727_p4 <= r_2_reg_723;
        end if; 
    end process;


    ap_phi_mux_r_3_phi_fu_760_p4_assign_proc : process(ap_block_pp9_stage0, icmp_ln228_reg_1593, r_3_reg_756, ap_CS_fsm_pp9_stage0, select_ln228_1_reg_1597, ap_enable_reg_pp9_iter1)
    begin
        if (((icmp_ln228_reg_1593 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_r_3_phi_fu_760_p4 <= select_ln228_1_reg_1597;
        else 
            ap_phi_mux_r_3_phi_fu_760_p4 <= r_3_reg_756;
        end if; 
    end process;


    ap_phi_mux_r_phi_fu_583_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln192_reg_1394, r_reg_579, select_ln192_1_reg_1398)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_r_phi_fu_583_p4 <= select_ln192_1_reg_1398;
        else 
            ap_phi_mux_r_phi_fu_583_p4 <= r_reg_579;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state73, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln219_fu_1093_p1 <= s_i_load_reg_1542;
    bitcast_ln225_fu_1190_p1 <= u_i_load_reg_1577;
    bitcast_ln231_fu_1287_p1 <= v_i_load_reg_1612;

    cipherkeyStrm_1_read_assign_proc : process(grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            cipherkeyStrm_1_read <= grp_aesCtrDecrypt_128u_s_fu_786_cipherkey_read;
        else 
            cipherkeyStrm_1_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_1_write_assign_proc : process(ap_CS_fsm_state22, cipherkeyStrm_1_full_n, IVStrm_1_full_n)
    begin
        if ((not(((cipherkeyStrm_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            cipherkeyStrm_1_write <= ap_const_logic_1;
        else 
            cipherkeyStrm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_read_assign_proc : process(grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            cipherkeyStrm_read <= grp_aesCtrEncrypt_128u_s_fu_802_cipherkey_read;
        else 
            cipherkeyStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    cipherkeyStrm_write_assign_proc : process(ap_CS_fsm_state32, cipherkeyStrm_full_n, IVStrm_full_n)
    begin
        if ((not(((cipherkeyStrm_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            cipherkeyStrm_write <= ap_const_logic_1;
        else 
            cipherkeyStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_1_read_assign_proc : process(grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            ciphertextStrm_1_read <= grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_read;
        else 
            ciphertextStrm_1_read <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_1_write_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln127_reg_1455, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln127_reg_1455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            ciphertextStrm_1_write <= ap_const_logic_1;
        else 
            ciphertextStrm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_read_assign_proc : process(end_4_reg_658, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0_11001)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (end_4_reg_658 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001))) then 
            ciphertextStrm_read <= ap_const_logic_1;
        else 
            ciphertextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    ciphertextStrm_write_assign_proc : process(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ciphertextStrm_write <= grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_write;
        else 
            ciphertextStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    crypto_buff_V_address0_assign_proc : process(ap_block_pp1_stage0, ap_CS_fsm_state22, ap_enable_reg_pp1_iter2, i_cast1_fu_946_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            crypto_buff_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            crypto_buff_V_address0 <= i_cast1_fu_946_p1(7 - 1 downto 0);
        else 
            crypto_buff_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    crypto_buff_V_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_state22, ap_enable_reg_pp1_iter2, cipherkeyStrm_1_full_n, IVStrm_1_full_n)
    begin
        if (((not(((cipherkeyStrm_1_full_n = ap_const_logic_0) or (ap_const_logic_0 = IVStrm_1_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            crypto_buff_V_ce0 <= ap_const_logic_1;
        else 
            crypto_buff_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    crypto_buff_V_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln200_reg_1430_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln200_reg_1430_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            crypto_buff_V_we0 <= ap_const_logic_1;
        else 
            crypto_buff_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_address0_assign_proc : process(ap_CS_fsm_state41, ap_block_pp6_stage0, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, i_5_cast2_fu_995_p1)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            ct_V_address0 <= i_5_cast2_fu_995_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            ct_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);
        else 
            ct_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    ct_V_ce0_assign_proc : process(ap_CS_fsm_state41, gmem_AWREADY, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, ap_block_pp6_stage0_11001)
    begin
        if ((((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)))) then 
            ct_V_ce0 <= ap_const_logic_1;
        else 
            ct_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ct_V_we0_assign_proc : process(ap_CS_fsm_state41, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            ct_V_we0 <= ap_const_logic_1;
        else 
            ct_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    endCiphertextStrm_1_din_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln127_reg_1455, endCiphertextStrm_1_full_n, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_01001, ap_CS_fsm_state26)
    begin
        if (((endCiphertextStrm_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            endCiphertextStrm_1_din <= ap_const_lv1_1;
        elsif (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln127_reg_1455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_01001))) then 
            endCiphertextStrm_1_din <= ap_const_lv1_0;
        else 
            endCiphertextStrm_1_din <= "X";
        end if; 
    end process;


    endCiphertextStrm_1_read_assign_proc : process(grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            endCiphertextStrm_1_read <= grp_aesCtrDecrypt_128u_s_fu_786_ciphertext_e_read;
        else 
            endCiphertextStrm_1_read <= ap_const_logic_0;
        end if; 
    end process;


    endCiphertextStrm_1_write_assign_proc : process(ap_CS_fsm_pp2_stage0, icmp_ln127_reg_1455, endCiphertextStrm_1_full_n, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_11001, ap_CS_fsm_state26)
    begin
        if ((((endCiphertextStrm_1_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (icmp_ln127_reg_1455 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            endCiphertextStrm_1_write <= ap_const_logic_1;
        else 
            endCiphertextStrm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    endCiphertextStrm_read_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, endCiphertextStrm_empty_n, ap_phi_mux_end_4_phi_fu_661_p4, ap_block_pp5_stage0_11001)
    begin
        if ((((endCiphertextStrm_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((ap_phi_mux_end_4_phi_fu_661_p4 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001)))) then 
            endCiphertextStrm_read <= ap_const_logic_1;
        else 
            endCiphertextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endCiphertextStrm_write_assign_proc : process(grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            endCiphertextStrm_write <= grp_aesCtrEncrypt_128u_s_fu_802_ciphertext_e_write;
        else 
            endCiphertextStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_1_read_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, endPlaintextStrm_1_empty_n, ap_phi_mux_end_1_phi_fu_627_p4, ap_block_pp3_stage0_11001)
    begin
        if ((((endPlaintextStrm_1_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_phi_mux_end_1_phi_fu_627_p4 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            endPlaintextStrm_1_read <= ap_const_logic_1;
        else 
            endPlaintextStrm_1_read <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_1_write_assign_proc : process(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            endPlaintextStrm_1_write <= grp_aesCtrDecrypt_128u_s_fu_786_plaintext_e_write;
        else 
            endPlaintextStrm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_din_assign_proc : process(ap_CS_fsm_pp4_stage0, icmp_ln73_reg_1474, endPlaintextStrm_full_n, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_01001, ap_CS_fsm_state35)
    begin
        if (((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            endPlaintextStrm_din <= ap_const_lv1_1;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln73_reg_1474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001))) then 
            endPlaintextStrm_din <= ap_const_lv1_0;
        else 
            endPlaintextStrm_din <= "X";
        end if; 
    end process;


    endPlaintextStrm_read_assign_proc : process(grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            endPlaintextStrm_read <= grp_aesCtrEncrypt_128u_s_fu_802_plaintext_e_read;
        else 
            endPlaintextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    endPlaintextStrm_write_assign_proc : process(ap_CS_fsm_pp4_stage0, icmp_ln73_reg_1474, endPlaintextStrm_full_n, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, ap_CS_fsm_state35)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln73_reg_1474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((endPlaintextStrm_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
            endPlaintextStrm_write <= ap_const_logic_1;
        else 
            endPlaintextStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY, gmem_addr_reg_1383, sext_ln201_fu_923_p1)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARADDR <= sext_ln201_fu_923_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARADDR <= gmem_addr_reg_1383;
            else 
                gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                gmem_ARLEN <= ap_const_lv32_80;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_ARLEN <= ap_const_lv32_400;
            else 
                gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_ARREADY)
    begin
        if ((((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_ARVALID <= ap_const_logic_1;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_CS_fsm_state61, gmem_AWREADY, gmem_addr_1_reg_1418, sext_ln216_fu_1009_p1, sext_ln222_fu_1106_p1, sext_ln228_fu_1203_p1)
    begin
        if ((gmem_AWREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                gmem_AWADDR <= sext_ln228_fu_1203_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                gmem_AWADDR <= sext_ln222_fu_1106_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                gmem_AWADDR <= sext_ln216_fu_1009_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                gmem_AWADDR <= gmem_addr_1_reg_1418;
            else 
                gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_CS_fsm_state61, gmem_AWREADY)
    begin
        if ((((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_AWLEN <= ap_const_lv32_400;
        elsif (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_AWLEN <= ap_const_lv32_80;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_CS_fsm_state61, gmem_AWREADY)
    begin
        if ((((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45)) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state65, ap_CS_fsm_state73, gmem_BVALID, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done)
    begin
        if ((((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state57)) or (not(((grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_done = ap_const_logic_0) or (gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state49)))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln192_reg_1394, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln200_reg_1430, ap_block_pp1_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_RREADY <= ap_const_logic_1;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_enable_reg_pp6_iter2, icmp_ln207_reg_1498_pp6_iter1_reg, ap_enable_reg_pp7_iter2, icmp_ln216_reg_1523_pp7_iter1_reg, ap_enable_reg_pp8_iter2, icmp_ln222_reg_1558_pp8_iter1_reg, ap_enable_reg_pp9_iter2, icmp_ln228_reg_1593_pp9_iter1_reg, ct_V_load_reg_1507, ap_block_pp6_stage0_01001, bitcast_ln219_fu_1093_p1, ap_block_pp7_stage0_01001, bitcast_ln225_fu_1190_p1, ap_block_pp8_stage0_01001, bitcast_ln231_fu_1287_p1, ap_block_pp9_stage0_01001)
    begin
        if (((icmp_ln228_reg_1593_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_01001))) then 
            gmem_WDATA <= bitcast_ln231_fu_1287_p1;
        elsif (((icmp_ln222_reg_1558_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_01001))) then 
            gmem_WDATA <= bitcast_ln225_fu_1190_p1;
        elsif (((icmp_ln216_reg_1523_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_01001))) then 
            gmem_WDATA <= bitcast_ln219_fu_1093_p1;
        elsif (((icmp_ln207_reg_1498_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_01001))) then 
            gmem_WDATA <= ct_V_load_reg_1507;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_enable_reg_pp6_iter2, icmp_ln207_reg_1498_pp6_iter1_reg, ap_enable_reg_pp7_iter2, icmp_ln216_reg_1523_pp7_iter1_reg, ap_enable_reg_pp8_iter2, icmp_ln222_reg_1558_pp8_iter1_reg, ap_enable_reg_pp9_iter2, icmp_ln228_reg_1593_pp9_iter1_reg, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001, ap_block_pp8_stage0_11001, ap_block_pp9_stage0_11001)
    begin
        if ((((icmp_ln228_reg_1593_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001)) or ((icmp_ln222_reg_1558_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001)) or ((icmp_ln216_reg_1523_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001)) or ((icmp_ln207_reg_1498_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_11001)))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state41, ap_CS_fsm_state45, ap_CS_fsm_state53, ap_CS_fsm_state61)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state49, ap_CS_fsm_state57, ap_CS_fsm_state65, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln192_reg_1394, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln200_reg_1430)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln200_reg_1430 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_reg_1394 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_enable_reg_pp6_iter2, ap_block_pp6_stage0, icmp_ln207_reg_1498_pp6_iter1_reg, ap_enable_reg_pp7_iter2, ap_block_pp7_stage0, icmp_ln216_reg_1523_pp7_iter1_reg, ap_enable_reg_pp8_iter2, ap_block_pp8_stage0, icmp_ln222_reg_1558_pp8_iter1_reg, ap_enable_reg_pp9_iter2, ap_block_pp9_stage0, icmp_ln228_reg_1593_pp9_iter1_reg)
    begin
        if ((((icmp_ln228_reg_1593_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0)) or ((icmp_ln222_reg_1558_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0)) or ((icmp_ln216_reg_1523_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0)) or ((icmp_ln207_reg_1498_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0)))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_aesCtrDecrypt_128u_s_fu_786_ap_start <= grp_aesCtrDecrypt_128u_s_fu_786_ap_start_reg;
    grp_aesCtrEncrypt_128u_s_fu_802_ap_start <= grp_aesCtrEncrypt_128u_s_fu_802_ap_start_reg;
    grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_ap_start_reg;
    i_2_fu_955_p2 <= std_logic_vector(unsigned(i_1_reg_613) + unsigned(ap_const_lv11_1));
    i_4_fu_967_p2 <= std_logic_vector(unsigned(i_3_reg_634) + unsigned(ap_const_lv11_1));
    i_5_cast2_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_668),64));
    i_cast1_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_601_pp1_iter1_reg),64));
    icmp_ln127_fu_961_p2 <= "1" when (i_1_reg_613 = ap_const_lv11_400) else "0";
    icmp_ln192_fu_844_p2 <= "1" when (indvar_flatten_reg_568 = ap_const_lv11_400) else "0";
    icmp_ln194_fu_856_p2 <= "1" when (c_reg_590 = ap_const_lv6_20) else "0";
    icmp_ln200_fu_940_p2 <= "1" when (ap_phi_mux_i_phi_fu_605_p4 = ap_const_lv8_80) else "0";
    icmp_ln207_fu_989_p2 <= "1" when (i_5_reg_668 = ap_const_lv8_80) else "0";
    icmp_ln216_fu_1026_p2 <= "1" when (indvar_flatten8_reg_679 = ap_const_lv11_400) else "0";
    icmp_ln218_fu_1038_p2 <= "1" when (c_1_reg_701 = ap_const_lv6_20) else "0";
    icmp_ln222_fu_1123_p2 <= "1" when (indvar_flatten16_reg_712 = ap_const_lv11_400) else "0";
    icmp_ln224_fu_1135_p2 <= "1" when (c_2_reg_734 = ap_const_lv6_20) else "0";
    icmp_ln228_fu_1220_p2 <= "1" when (indvar_flatten24_reg_745 = ap_const_lv11_400) else "0";
    icmp_ln230_fu_1232_p2 <= "1" when (c_3_reg_767 = ap_const_lv6_20) else "0";
    icmp_ln73_fu_973_p2 <= "1" when (i_3_reg_634 = ap_const_lv11_400) else "0";

    plaintextStrm_1_read_assign_proc : process(end_1_reg_624, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0_11001)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (end_1_reg_624 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
            plaintextStrm_1_read <= ap_const_logic_1;
        else 
            plaintextStrm_1_read <= ap_const_logic_0;
        end if; 
    end process;


    plaintextStrm_1_write_assign_proc : process(grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            plaintextStrm_1_write <= grp_aesCtrDecrypt_128u_s_fu_786_plaintext_write;
        else 
            plaintextStrm_1_write <= ap_const_logic_0;
        end if; 
    end process;


    plaintextStrm_read_assign_proc : process(grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            plaintextStrm_read <= grp_aesCtrEncrypt_128u_s_fu_802_plaintext_read;
        else 
            plaintextStrm_read <= ap_const_logic_0;
        end if; 
    end process;


    plaintextStrm_write_assign_proc : process(ap_CS_fsm_pp4_stage0, icmp_ln73_reg_1474, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln73_reg_1474 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
            plaintextStrm_write <= ap_const_logic_1;
        else 
            plaintextStrm_write <= ap_const_logic_0;
        end if; 
    end process;


    s_i_address0_assign_proc : process(ap_CS_fsm_state49, ap_block_pp7_stage0, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0, zext_ln219_1_fu_1082_p1)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            s_i_address0 <= zext_ln219_1_fu_1082_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_address0;
        else 
            s_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    s_i_ce0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, ap_block_pp7_stage0_11001, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0_11001))) then 
            s_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce0;
        else 
            s_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_i_ce1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_ce1;
        else 
            s_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_i_we0_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_i_we0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we0;
        else 
            s_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_i_we1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            s_i_we1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_S_we1;
        else 
            s_i_we1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln192_1_fu_870_p3 <= 
        add_ln192_fu_850_p2 when (icmp_ln194_fu_856_p2(0) = '1') else 
        ap_phi_mux_r_phi_fu_583_p4;
    select_ln192_fu_862_p3 <= 
        ap_const_lv6_0 when (icmp_ln194_fu_856_p2(0) = '1') else 
        c_reg_590;
    select_ln216_1_fu_1052_p3 <= 
        add_ln216_fu_1032_p2 when (icmp_ln218_fu_1038_p2(0) = '1') else 
        ap_phi_mux_r_1_phi_fu_694_p4;
    select_ln216_fu_1044_p3 <= 
        ap_const_lv6_0 when (icmp_ln218_fu_1038_p2(0) = '1') else 
        c_1_reg_701;
    select_ln222_1_fu_1149_p3 <= 
        add_ln222_fu_1129_p2 when (icmp_ln224_fu_1135_p2(0) = '1') else 
        ap_phi_mux_r_2_phi_fu_727_p4;
    select_ln222_fu_1141_p3 <= 
        ap_const_lv6_0 when (icmp_ln224_fu_1135_p2(0) = '1') else 
        c_2_reg_734;
    select_ln228_1_fu_1246_p3 <= 
        add_ln228_fu_1226_p2 when (icmp_ln230_fu_1232_p2(0) = '1') else 
        ap_phi_mux_r_3_phi_fu_760_p4;
    select_ln228_fu_1238_p3 <= 
        ap_const_lv6_0 when (icmp_ln230_fu_1232_p2(0) = '1') else 
        c_3_reg_767;
        sext_ln127_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(crypto_buff_V_q0),128));

        sext_ln192_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_818_p4),64));

        sext_ln201_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln201_1_fu_914_p4),64));

        sext_ln216_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_1000_p4),64));

        sext_ln222_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_fu_1097_p4),64));

        sext_ln228_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln5_fu_1194_p4),64));

    tmp_10_cast_fu_1258_p3 <= (trunc_ln231_fu_1254_p1 & ap_const_lv5_0);
    tmp_1_cast_fu_882_p3 <= (trunc_ln195_fu_878_p1 & ap_const_lv5_0);
    tmp_8_cast_fu_1064_p3 <= (trunc_ln219_fu_1060_p1 & ap_const_lv5_0);
    tmp_9_cast_fu_1161_p3 <= (trunc_ln225_fu_1157_p1 & ap_const_lv5_0);
    trunc_ln155_fu_979_p1 <= ciphertextStrm_dout(32 - 1 downto 0);
    trunc_ln195_fu_878_p1 <= select_ln192_1_fu_870_p3(5 - 1 downto 0);
    trunc_ln201_1_fu_914_p4 <= crypto_read_reg_1291(63 downto 2);
    trunc_ln219_fu_1060_p1 <= select_ln216_1_fu_1052_p3(5 - 1 downto 0);
    trunc_ln225_fu_1157_p1 <= select_ln222_1_fu_1149_p3(5 - 1 downto 0);
    trunc_ln231_fu_1254_p1 <= select_ln228_1_fu_1246_p3(5 - 1 downto 0);
    trunc_ln3_fu_1000_p4 <= S_read_reg_1306(63 downto 2);
    trunc_ln4_fu_1097_p4 <= U_read_reg_1301(63 downto 2);
    trunc_ln5_fu_1194_p4 <= V_read_reg_1296(63 downto 2);
    trunc_ln_fu_818_p4 <= A(63 downto 2);

    u_i_address0_assign_proc : process(ap_CS_fsm_state49, ap_block_pp8_stage0, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0, zext_ln225_1_fu_1179_p1)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            u_i_address0 <= zext_ln225_1_fu_1179_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            u_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_address0;
        else 
            u_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    u_i_ce0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp8_iter0, ap_block_pp8_stage0_11001, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0)
    begin
        if (((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
            u_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            u_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce0;
        else 
            u_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    u_i_ce1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            u_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_ce1;
        else 
            u_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    u_i_we0_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            u_i_we0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we0;
        else 
            u_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    u_i_we1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            u_i_we1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_U_we1;
        else 
            u_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_address0_assign_proc : process(ap_CS_fsm_state49, ap_block_pp9_stage0, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0, zext_ln231_1_fu_1276_p1)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0))) then 
            v_i_address0 <= zext_ln231_1_fu_1276_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            v_i_address0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_address0;
        else 
            v_i_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    v_i_ce0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, ap_block_pp9_stage0_11001, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0)
    begin
        if (((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
            v_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            v_i_ce0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce0;
        else 
            v_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_ce1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            v_i_ce1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_ce1;
        else 
            v_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_we0_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            v_i_we0 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we0;
        else 
            v_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    v_i_we1_assign_proc : process(ap_CS_fsm_state49, grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            v_i_we1 <= grp_svd_pairs_32_32_svd_traits_32_32_float_float_float_float_s_fu_778_V_we1;
        else 
            v_i_we1 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln195_1_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln195_reg_1403_pp0_iter1_reg),64));
    zext_ln195_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln192_fu_862_p3),10));
    zext_ln219_1_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln219_fu_1076_p2),64));
    zext_ln219_fu_1072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln216_fu_1044_p3),10));
    zext_ln225_1_fu_1179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_fu_1173_p2),64));
    zext_ln225_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln222_fu_1141_p3),10));
    zext_ln231_1_fu_1276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln231_fu_1270_p2),64));
    zext_ln231_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln228_fu_1238_p3),10));
end behav;
