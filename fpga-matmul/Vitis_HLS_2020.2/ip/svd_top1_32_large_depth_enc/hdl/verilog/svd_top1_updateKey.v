// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module svd_top1_updateKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        this_0_ssbox_address0,
        this_0_ssbox_ce0,
        this_0_ssbox_q0,
        this_0_ssbox_address1,
        this_0_ssbox_ce1,
        this_0_ssbox_q1,
        this_0_ssbox_address2,
        this_0_ssbox_ce2,
        this_0_ssbox_q2,
        this_0_ssbox_address3,
        this_0_ssbox_ce3,
        this_0_ssbox_q3,
        cipherkey,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] this_0_ssbox_address0;
output   this_0_ssbox_ce0;
input  [7:0] this_0_ssbox_q0;
output  [7:0] this_0_ssbox_address1;
output   this_0_ssbox_ce1;
input  [7:0] this_0_ssbox_q1;
output  [7:0] this_0_ssbox_address2;
output   this_0_ssbox_ce2;
input  [7:0] this_0_ssbox_q2;
output  [7:0] this_0_ssbox_address3;
output   this_0_ssbox_ce3;
input  [7:0] this_0_ssbox_q3;
input  [127:0] cipherkey;
output  [127:0] ap_return_0;
output  [127:0] ap_return_1;
output  [127:0] ap_return_2;
output  [127:0] ap_return_3;
output  [127:0] ap_return_4;
output  [127:0] ap_return_5;
output  [127:0] ap_return_6;
output  [127:0] ap_return_7;
output  [127:0] ap_return_8;
output  [127:0] ap_return_9;
output  [127:0] ap_return_10;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg this_0_ssbox_ce0;
reg this_0_ssbox_ce1;
reg this_0_ssbox_ce2;
reg this_0_ssbox_ce3;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
reg   [3:0] iter_V_reg_198;
reg   [127:0] p_Val2_s_reg_210;
wire   [0:0] icmp_ln878_fu_220_p2;
reg   [0:0] icmp_ln878_reg_602;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln691_fu_297_p2;
reg   [3:0] add_ln691_reg_631;
reg    ap_enable_reg_pp0_iter0;
wire   [127:0] p_Result_7_fu_379_p5;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [3:0] ap_phi_mux_iter_V_phi_fu_202_p4;
wire    ap_block_pp0_stage0;
reg   [127:0] ap_phi_mux_p_Val2_s_phi_fu_213_p4;
wire   [63:0] zext_ln708_fu_246_p1;
wire   [63:0] zext_ln534_fu_257_p1;
wire   [63:0] zext_ln708_1_fu_272_p1;
wire   [63:0] zext_ln708_2_fu_287_p1;
wire   [63:0] zext_ln708_3_fu_292_p1;
reg   [127:0] lastRound_V_fu_90;
wire    ap_CS_fsm_state4;
reg   [127:0] lastRound_V_1_fu_94;
reg   [127:0] lastRound_V_2_fu_98;
reg   [127:0] lastRound_V_3_fu_102;
reg   [127:0] lastRound_V_4_fu_106;
reg   [127:0] lastRound_V_5_fu_110;
reg   [127:0] lastRound_V_6_fu_114;
reg   [127:0] lastRound_V_7_fu_118;
reg   [127:0] lastRound_V_8_fu_122;
reg   [127:0] lastRound_V_9_fu_126;
wire   [7:0] p_Result_s_fu_236_p4;
wire   [3:0] ret_fu_251_p2;
wire   [7:0] p_Result_s_51_fu_262_p4;
wire   [7:0] p_Result_1_fu_277_p4;
wire   [7:0] tmp_fu_226_p4;
wire   [7:0] ret_1_fu_313_p2;
wire   [31:0] trunc_ln674_fu_331_p1;
wire   [31:0] p_Result_6_fu_319_p5;
wire   [31:0] xor_ln1350_fu_335_p2;
wire   [31:0] p_Result_4_fu_341_p4;
wire   [31:0] xor_ln1350_1_fu_351_p2;
wire   [31:0] p_Result_5_fu_357_p4;
wire   [31:0] xor_ln1350_2_fu_367_p2;
wire   [31:0] round_tmp_V_fu_303_p4;
wire   [31:0] xor_ln1350_3_fu_373_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

svd_top1_updateKey_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_602 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        iter_V_reg_198 <= add_ln691_reg_631;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        iter_V_reg_198 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_reg_602 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_s_reg_210 <= p_Result_7_fu_379_p5;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_210 <= cipherkey;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln878_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln691_reg_631 <= add_ln691_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_reg_602 <= icmp_ln878_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_1_fu_94 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd8) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_2_fu_98 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_3_fu_102 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_4_fu_106 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd6) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_5_fu_110 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_6_fu_114 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_7_fu_118 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_8_fu_122 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (iter_V_reg_198 == 4'd3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        lastRound_V_9_fu_126 <= p_Result_7_fu_379_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & ((iter_V_reg_198 == 4'd0) | ((iter_V_reg_198 == 4'd10) | ((iter_V_reg_198 == 4'd11) | ((iter_V_reg_198 == 4'd12) | ((iter_V_reg_198 == 4'd13) | ((iter_V_reg_198 == 4'd14) | (iter_V_reg_198 == 4'd15))))))))) begin
        lastRound_V_fu_90 <= p_Result_7_fu_379_p5;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln878_fu_220_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln878_reg_602 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_iter_V_phi_fu_202_p4 = add_ln691_reg_631;
    end else begin
        ap_phi_mux_iter_V_phi_fu_202_p4 = iter_V_reg_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln878_reg_602 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_p_Val2_s_phi_fu_213_p4 = p_Result_7_fu_379_p5;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_213_p4 = p_Val2_s_reg_210;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_0_ssbox_ce0 = 1'b1;
    end else begin
        this_0_ssbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_0_ssbox_ce1 = 1'b1;
    end else begin
        this_0_ssbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_0_ssbox_ce2 = 1'b1;
    end else begin
        this_0_ssbox_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        this_0_ssbox_ce3 = 1'b1;
    end else begin
        this_0_ssbox_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln878_fu_220_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln878_fu_220_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = zext_ln534_fu_257_p1;

assign add_ln691_fu_297_p2 = (ap_phi_mux_iter_V_phi_fu_202_p4 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = cipherkey;

assign ap_return_1 = lastRound_V_3_fu_102;

assign ap_return_10 = lastRound_V_fu_90;

assign ap_return_2 = lastRound_V_6_fu_114;

assign ap_return_3 = lastRound_V_9_fu_126;

assign ap_return_4 = lastRound_V_8_fu_122;

assign ap_return_5 = lastRound_V_7_fu_118;

assign ap_return_6 = lastRound_V_5_fu_110;

assign ap_return_7 = lastRound_V_4_fu_106;

assign ap_return_8 = lastRound_V_2_fu_98;

assign ap_return_9 = lastRound_V_1_fu_94;

assign icmp_ln878_fu_220_p2 = ((ap_phi_mux_iter_V_phi_fu_202_p4 == 4'd11) ? 1'b1 : 1'b0);

assign p_Result_1_fu_277_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_213_p4[127:120]}};

assign p_Result_4_fu_341_p4 = {{p_Val2_s_reg_210[63:32]}};

assign p_Result_5_fu_357_p4 = {{p_Val2_s_reg_210[95:64]}};

assign p_Result_6_fu_319_p5 = {{{{this_0_ssbox_q0}, {this_0_ssbox_q1}}, {this_0_ssbox_q2}}, {ret_1_fu_313_p2}};

assign p_Result_7_fu_379_p5 = {{{{xor_ln1350_3_fu_373_p2}, {xor_ln1350_2_fu_367_p2}}, {xor_ln1350_1_fu_351_p2}}, {xor_ln1350_fu_335_p2}};

assign p_Result_s_51_fu_262_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_213_p4[119:112]}};

assign p_Result_s_fu_236_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_213_p4[111:104]}};

assign ret_1_fu_313_p2 = (this_0_ssbox_q3 ^ Rcon_q0);

assign ret_fu_251_p2 = (ap_phi_mux_iter_V_phi_fu_202_p4 + 4'd15);

assign round_tmp_V_fu_303_p4 = {{p_Val2_s_reg_210[127:96]}};

assign this_0_ssbox_address0 = zext_ln708_3_fu_292_p1;

assign this_0_ssbox_address1 = zext_ln708_2_fu_287_p1;

assign this_0_ssbox_address2 = zext_ln708_1_fu_272_p1;

assign this_0_ssbox_address3 = zext_ln708_fu_246_p1;

assign tmp_fu_226_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_213_p4[103:96]}};

assign trunc_ln674_fu_331_p1 = p_Val2_s_reg_210[31:0];

assign xor_ln1350_1_fu_351_p2 = (xor_ln1350_fu_335_p2 ^ p_Result_4_fu_341_p4);

assign xor_ln1350_2_fu_367_p2 = (xor_ln1350_1_fu_351_p2 ^ p_Result_5_fu_357_p4);

assign xor_ln1350_3_fu_373_p2 = (xor_ln1350_2_fu_367_p2 ^ round_tmp_V_fu_303_p4);

assign xor_ln1350_fu_335_p2 = (trunc_ln674_fu_331_p1 ^ p_Result_6_fu_319_p5);

assign zext_ln534_fu_257_p1 = ret_fu_251_p2;

assign zext_ln708_1_fu_272_p1 = p_Result_s_51_fu_262_p4;

assign zext_ln708_2_fu_287_p1 = p_Result_1_fu_277_p4;

assign zext_ln708_3_fu_292_p1 = tmp_fu_226_p4;

assign zext_ln708_fu_246_p1 = p_Result_s_fu_236_p4;

endmodule //svd_top1_updateKey
